openapi: 3.0.0
info:
  title: QuantConnect Platform API v2.0
  description:
    QuantConnect Platform API controls creating, updating and deleting
    projects, files, backtests and live algorithms. Automate the updating and backtesting
    of your strategies, or build tools to fast track your development.
  termsOfService: https://www.quantconnect.com/terms
  contact:
    name: QuantConnect
    email: contact@quantconnect.com
  license:
    name:
      License For Use Granted Under QuantConnect Terms of Service. All other rights
      reserved.
  version: 2.0.0
servers:
  - url: https://www.quantconnect.com/api/v2
    description: Primary REST Endpoint
security:
  - nonceTokenAuth: []
paths:
  /account/read:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 12 Account
      summary: Read the organization account status.
      description:
        The organization account status includes the organization Id, QCC
        balance, and credit card information.
      responses:
        "200":
          description: Account information for an organization.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: readAccount
  /projects/create:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 02 Project Management
        - 01 Create Project
      summary: Create a new project in your default organization.
      requestBody:
        description: Name and language of the project to create.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProjectRequest"
        required: true
      responses:
        "200":
          description: Project list response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectListResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: createProject
  /projects/read:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 02 Project Management
        - 02 Read Project
      summary:
        List details of all projects, or the project matched the passed project
        ID if the project ID property passed.
      requestBody:
        description:
          The projectId for the project to read, or nothing to get a details
          list of all projects.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReadProjectRequest"
        required: false
      responses:
        "200":
          description: Project list response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectListResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: readProject
  /projects/update:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 02 Project Management
        - 03 Update Project
      summary: Update a project's name or description.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProjectRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: updateProject
  /projects/delete:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 02 Project Management
        - 04 Delete Project
      summary: Delete a project.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteProjectRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: deleteProject
  /projects/collaboration/create:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 02 Project Management
        - 05 Collaboration
        - 01 Create Project Collaborator
      summary: Add a collaborator to a project.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCollaboratorRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCollaboratorResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: createProjectCollaboration
  /projects/collaboration/read:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 02 Project Management
        - 05 Collaboration
        - 02 Read Project Collaborators
      summary: List all collaborators on a project.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReadCollaboratorsRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadCollaboratorsResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: readProjectCollaboration
  /projects/collaboration/update:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 02 Project Management
        - 05 Collaboration
        - 03 Update Project Collaborator
      summary: Update collaborator information in a project.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCollaboratorRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateCollaboratorResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: updateProjectCollaboration
  /projects/collaboration/delete:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 02 Project Management
        - 05 Collaboration
        - 04 Delete Project Collaborator
      summary: Remove a collaborator from a project.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteCollaboratorRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteCollaboratorResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: deleteProjectCollaboration
  /projects/collaboration/lock/acquire:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 02 Project Management
        - 05 Collaboration
        - 05 Lock Project
      summary:
        Lock a project so you can edit it. This is necessary when the project
        has collaborators or when an LLM is editing files on your behalf via our MCP
        Server.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LockCollaboratorRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: acquireProjectCollaborationLock
  /projects/nodes/read:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 02 Project Management
        - 06 Nodes
        - 01 Read Project Nodes
      summary: Read the available and selected nodes of a project.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReadProjectNodesRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectNodesResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: readProjectNode
  /projects/nodes/update:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 02 Project Management
        - 06 Nodes
        - 02 Update Project Nodes
      summary:
        Update the active state of the given nodes to true. If you don't provide
        any nodes, all the nodes become inactive and autoSelectNode is true.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProjectNodesRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectNodesResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: updateProjectNode
  /files/create:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 03 File Management
        - 01 Create File
      summary: Add a file to a given project.
      requestBody:
        description: Project, file name, and file content to create.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProjectFileRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: createFile
  /files/read:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 03 File Management
        - 02 Read File
      summary:
        If a ReadSingleFileRequest is passed, reads that file from the project.
        If a ReadAllFilesRequest is passed, reads all files in the project.
      requestBody:
        description: An array list of files from the project requested.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReadFilesRequest"
        required: true
      responses:
        "200":
          description: Response received when reading the files of a project.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectFilesResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: readFile
  /files/update:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 03 File Management
        - 03 Update File
      summary:
        If an UpdateProjectFileNameRequest is passed, update the name of a
        file. If a UpdateProjectFileContentsRequest is passed, update the contents
        of a file.
      requestBody:
        description:
          Information about the file to update along with the new properties
          to set.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/files_update_body"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/RestResponse"
                  - $ref: "#/components/schemas/ProjectFilesResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: updateFile
  /files/delete:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 03 File Management
        - 04 Delete File
      summary: Delete a file in a project.
      requestBody:
        description: Project Id and filename to specify the file for deletion.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteFileRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: deleteFile
  /compile/create:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 04 Compiling Code
        - 01 Create Compilation Job
      summary: Asynchronously create a compile job request for a project.
      requestBody:
        description: Project Id specifying project to build.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCompileRequest"
        required: true
      responses:
        "200":
          description: Response from the compiler on a build event.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCompileResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: createCompile
  /compile/read:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 04 Compiling Code
        - 02 Read Compilation Result
      summary: Read a compile packet job result.
      requestBody:
        description: Read a compile result for a specific Project Id and Compile Id.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReadCompileRequest"
        required: true
      responses:
        "200":
          description: Response from the compiler on a build event.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadCompileResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: readCompile
  /backtests/create:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 05 Backtest Management
        - 01 Create Backtest
      summary: Create a new backtest request and get the backtest Id.
      requestBody:
        description: Create a new backtest given a project Id and compile Id.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBacktestRequest"
        required: true
      responses:
        "200":
          description: Backtest read response packet.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BacktestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: createBacktest
  /backtests/read:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 05 Backtest Management
        - 02 Read Backtest
        - 01 Backtest Statistics
      summary: Read the results of a backtest.
      requestBody:
        description:
          Fetch the results for the project Id and backtest Id provided
          (and optional chart name provided).
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReadBacktestRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BacktestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: readBacktest
  /backtests/list:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 05 Backtest Management
        - 05 List Backtests
      summary: List all the backtests for a project.
      requestBody:
        description: Fetch the backtest results for the project Id provided.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListBacktestRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BacktestSummaryResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: listBacktests
  /backtests/orders/read:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 05 Backtest Management
        - 02 Read Backtest
        - 03 Orders
      summary: Read out the orders of a backtest.
      requestBody:
        description:
          Fetch the orders of a backtest for the project Id, backtest Id
          and steps provided.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReadBacktestOrdersRequest"
        required: true
      responses:
        "200":
          description: Orders of the backtest within range.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BacktestOrdersResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: readBacktestOrder
  /backtests/read/report:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 11 Reports
        - 01 Backtest Report
      summary: Read out the report of a backtest.
      requestBody:
        description:
          A JSON object containing info about the backtest to use for the
          report.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BacktestReportRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/BacktestReport"
                  - $ref: "#/components/schemas/BacktestReportGeneratingResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: readBacktestsReport
  /backtests/chart/read:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 05 Backtest Management
        - 02 Read Backtest
        - 02 Charts
      summary: Read a chart from a backtest.
      requestBody:
        description: Request body to obtain a chart from a backtest.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReadBacktestChartRequest"
        required: true
      responses:
        "200":
          description: Response with the chart requested object.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/LoadingResponse"
                  - $ref: "#/components/schemas/ReadChartResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: readBacktestChart
  /backtests/read/insights:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 05 Backtest Management
        - 02 Read Backtest
        - 04 Insights
      summary: Read out the insights of a backtest.
      requestBody:
        description:
          Fetch the insights of a backtest for the project Id, backtest
          Id and steps provided.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReadBacktestInsightsRequest"
        required: true
      responses:
        "200":
          description: Orders of the backtest within range.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BacktestInsightsResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: readBacktestsInsights
  /backtests/update:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 05 Backtest Management
        - 03 Update Backtest
      summary: Update the name or note of a backtest.
      requestBody:
        description:
          A JSON object containing info about the backtest and its new
          name or note.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBacktestRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: updateBacktest
  /backtests/delete:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 05 Backtest Management
        - 04 Delete Backtest
      summary: Delete a backtest from a project.
      requestBody:
        description: Information required to delete the backtest.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteBacktestRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: deleteBacktest
  /lean/versions/read:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 13 Lean Version
      summary: Returns a list of lean versions with basic information for each version.
      responses:
        "200":
          description: List of LEAN versions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LeanVersionsResponse"
      operationId: readLeanVersion
  /live/chart/read:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 07 Live Management
        - 02 Read Live Algorithm
        - 02 Charts
      summary: Read a chart from a live algorithm.
      requestBody:
        description: Request body to obtain a chart from a live algorithm.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReadLiveChartRequest"
        required: true
      responses:
        "200":
          description: Response with the requested chart from a live algorithm.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/LoadingResponse"
                  - $ref: "#/components/schemas/ReadChartResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: readLiveChart
  /live/auth0/authorize:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 07 Live Management
        - 01 Create Live Algorithm
      summary: Authorize an external connection with a live brokerage or data provider.
      requestBody:
        description: Brokerage or data provider with which to authorize the connection.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorizeExternalConnectionRequest"
        required: true
      responses:
        "302":
          description: Live algorithm authorization redirection URL in the header.
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: authorizeLiveAuth0
  /live/auth0/read:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 07 Live Management
        - 01 Create Live Algorithm
      summary: Read an authentication token for a brokerage or data provider.
      requestBody:
        description: Brokerage or data provider with which to authorize the connection.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorizeExternalConnectionRequest"
        required: true
      responses:
        "200":
          description:
            Response with the authentication token for the brokerage or
            data provider.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizeExternalConnectionResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: readLiveAuth0
  /live/create:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 07 Live Management
        - 01 Create Live Algorithm
      summary: Create a live algorithm.
      requestBody:
        description:
          Project, compile, and brokerage login information for deploying
          a live algorithm.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLiveAlgorithmRequest"
        required: true
      responses:
        "200":
          description: Live algorithm instance result.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateLiveAlgorithmResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: createLive
  /live/read:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 07 Live Management
        - 02 Read Live Algorithm
        - 01 Live Algorithm Statistics
      summary: Read details of a live algorithm.
      requestBody:
        description: Id of the project that contains the algorithm.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReadLiveAlgorithmRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LiveAlgorithmResults"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: readLive
  /live/list:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 07 Live Management
        - 04 List Live Algorithms
      summary: List all your past and current live trading deployments.
      requestBody:
        description: Request body to obtain a list of live running algorithms.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListLiveAlgorithmsRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LiveAlgorithmListResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: listLive
  /live/logs/read:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 07 Live Management
        - 02 Read Live Algorithm
        - 06 Logs
      summary:
        Get the logs of a live algorithm. The snapshot updates about every
        5 minutes.
      requestBody:
        description: Information about the algorithm to read live logs from.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReadLiveLogsRequest"
        required: true
      responses:
        "200":
          description: Logs from a live algorithm.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadLiveLogsResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: readLiveLog
  /live/portfolio/read:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 07 Live Management
        - 02 Read Live Algorithm
        - 03 Portfolio State
      summary:
        Read out the portfolio state of a live algorithm. The snapshot updates
        about every 10 minutes.
      requestBody:
        description: Fetch the live portfolio state for the project Id provided.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReadLivePortfolioRequest"
        required: true
      responses:
        "200":
          description: Portfolio holdings and cash of the live algorithm.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LivePortfolioResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: readLivePortfolio
  /live/orders/read:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 07 Live Management
        - 02 Read Live Algorithm
        - 04 Orders
      summary:
        Read out the orders of a live algorithm. The snapshot updates about
        every 10 minutes.
      requestBody:
        description:
          Fetch the orders of a live algorithm for the project Id and steps
          provided.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReadLiveOrdersRequest"
        required: true
      responses:
        "200":
          description: Orders of the live algorithm within range.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/LoadingResponse"
                  - $ref: "#/components/schemas/LiveOrdersResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: readLiveOrder
  /live/insights/read:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 07 Live Management
        - 02 Read Live Algorithm
        - 05 Insights
      summary:
        Read out the insights of a live algorithm. The snapshot updates about
        every 10 minutes.
      requestBody:
        description:
          Fetch the insights of a live algorithm for the project Id and
          steps provided.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReadLiveInsightsRequest"
        required: true
      responses:
        "200":
          description: Insights of the live algorithm within range.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LiveInsightsResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: readLiveInsight
  /live/update/liquidate:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 07 Live Management
        - 03 Update Live Algorithm
        - 01 Liquidate Live Portfolio
      summary: Liquidate a live algorithm from the specified project Id.
      requestBody:
        description: Information about the live algorithm to liquidate.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LiquidateLiveAlgorithmRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: liquidateLive
  /live/update/stop:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 07 Live Management
        - 03 Update Live Algorithm
        - 02 Stop Live Algorithm
      summary: Stop a live algorithm from the specified project Id.
      requestBody:
        description: Information about the project to delete.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StopLiveAlgorithmRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: stopLive
  /live/commands/create:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 07 Live Management
        - 05 Live Commands
        - 01 Create Live Command
      summary: Send a live command to a live trading algorithm.
      requestBody:
        description:
          Sends a command to a live deployment to trigger an action such
          as placing orders.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLiveCommandRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: createLiveCommand
  /live/commands/broadcast:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 07 Live Management
        - 05 Live Commands
        - 02 Broadcast Live Command
      summary: Broadcast a live command to all live algorithms in the organization.
      requestBody:
        description: Broadcasts a command to all live deployments in the organization.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BroadcastLiveCommandRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: broadcastLiveCommand
  /optimizations/create:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 08 Optimization Management
        - 01 Create Optimization
      summary: Create an optimization with the specified parameters.
      requestBody:
        description:
          Project, compile, and optimization parameters for launching an
          optimization job.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOptimizationRequest"
        required: true
      responses:
        "200":
          description: Response received when launching an optimization job.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOptimizationResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: createOptimization
  /optimizations/update:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 08 Optimization Management
        - 03 Update Optimization
      summary: Update the name of an optimization.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOptimizationRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: updateOptimization
  /optimizations/read:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 08 Optimization Management
        - 02 Read Optimization
      summary: Read an optimization.
      requestBody:
        description: Id of the optimization to read.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReadOptimizationRequest"
        required: true
      responses:
        "200":
          description: Response received when reading an optimization job.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadOptimizationResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: readOptimization
  /optimizations/delete:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 08 Optimization Management
        - 04 Delete Optimization
      summary: Delete an optimization.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteOptimizationRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: deleteOptimization
  /optimizations/abort:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 08 Optimization Management
        - 05 Abort Optimization
      summary: Abort an optimization.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AbortOptimizationRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: abortOptimization
  /optimizations/list:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 08 Optimization Management
        - 06 List Optimization
      summary: List all the optimizations for a project.
      requestBody:
        description: If of the Project to get a list of optimizations for.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListOptimizationRequest"
        required: true
      responses:
        "200":
          description: Response received when reading the optimizations of a project.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListOptimizationResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: listOptimizations
  /optimizations/estimate:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 08 Optimization Management
        - 07 Estimate Optimization Cost
      summary: Estimate the execution time of an optimization with the specified parameters.
      requestBody:
        description:
          Project, compile, and optimization parameters for estimating
          the execution time of an optimization job.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EstimateOptimizationRequest"
        required: true
      responses:
        "200":
          description:
            Response received when estimating the execution time of an
            optimization job.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EstimateOptimizationResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: estimateOptimization
  /object/set:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 09 Object Store Management
        - 01 Upload Object Store Files
      summary: Upload files to the Object Store.
      requestBody:
        description: Upload files to the Object Store.
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ObjectStoreBinaryFile"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: setObject
  /object/get:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 09 Object Store Management
        - 03 Get Object Store File
      summary: Get Object Store file of a specific organization and key.
      requestBody:
        description: Get Object Store files of a specific organization and key.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/GetObjectStoreJobIdRequest"
                - $ref: "#/components/schemas/GetObjectStoreURLRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetObjectStoreResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: getObject
  /object/properties:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 09 Object Store Management
        - 02 Get Object Store Metadata
      summary:
        Get Object Store properties of a specific organization and key. It
        doesn't work if the key is a directory in the Object Store.
      requestBody:
        description: Get Object Store properties of a specific organization and key.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetObjectStorePropertiesRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetObjectStorePropertiesResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: getObjectProperties
  /object/delete:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 09 Object Store Management
        - 04 Delete Object Store File
      summary: Delete the Object Store file of a specific organization and key.
      requestBody:
        description: Delete the Object Store file of a specific organization and key.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteObjectStoreRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: deleteObject
  /object/list:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 09 Object Store Management
        - 05 List Object Store Files
      summary: List the Object Store files under a specific directory in an organization.
      requestBody:
        description:
          List the Object Store files under a specific directory in an
          organization.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListObjectStoreRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListObjectStoreResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: listObject
  /ai/tools/backtest-init:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 10 AI Assistance
        - 02 Tools
        - 01 Backtest Initialization
      summary:
        Run a backtest for a few seconds to initialize the algorithm and get
        initialization errors if any.
      requestBody:
        description:
          Run a backtest for a few seconds to initialize the algorithm
          and get initialization errors if any.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BasicFilesRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BacktestInitResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: backtestInitAiTool
  /ai/tools/complete:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 10 AI Assistance
        - 02 Tools
        - 02 Code Completion
      summary: Show the code completion for a specific text input.
      requestBody:
        description: Show the code completion for a specific text input.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeCompletionRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CodeCompletionResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: completeAiTool
  /ai/tools/error-enhance:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 10 AI Assistance
        - 02 Tools
        - 03 Error Enhancement
      summary: Show additional context and suggestions for error messages.
      requestBody:
        description: Show additional context and suggestions for error messages.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ErrorEnhanceRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnhanceResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: errorEnhanceAiTool
  /ai/tools/pep8-convert:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 10 AI Assistance
        - 02 Tools
        - 04 PEP8 Conversion
      summary: Update Python code to follow PEP8 style.
      requestBody:
        description: Update Python code to follow PEP8 style.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PEP8ConvertRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PEP8ConvertResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: pep8ConvertAiTool
  /ai/tools/syntax-check:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 10 AI Assistance
        - 02 Tools
        - 05 Syntax Check
      summary: Check the syntax of a code.
      requestBody:
        description: Check the syntax of a code.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BasicFilesRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SyntaxCheckResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: syntaxCheckAiTool
  /ai/tools/search:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 10 AI Assistance
        - 02 Tools
        - 06 Search
      summary: Search for content in QuantConnect.
      requestBody:
        description: Search for content in QuantConnect.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedErrorResponse"
      operationId: searchAiTool
components:
  schemas:
    BasicFilesRequest:
      type: object
      required:
        - language
        - files
      properties:
        language:
          type: string
          enum:
            - C#
            - Py
          example: Py
          description: Programming language.
        files:
          type: array
          example: '[{"name": "file.py", "content": "fileContent"}]'
          description: Files to process.
          items:
            $ref: "#/components/schemas/File"
      description: Request to process files.
    BacktestInitRequest:
      type: object
      required:
        - language
        - files
      properties:
        language:
          type: string
          enum:
            - C#
            - Py
          description: Programming language.
        files:
          type: array
          example: '[{"name": "main.py", "content": "fileContent"}]'
          description:
            Files to process. One of the files must have the name main.py
            (when language=Py) or Main.cs (when language=C#).
          items:
            $ref: "#/components/schemas/File"
      description: Request to process files.
    BacktestInitResponse:
      type: object
      properties:
        state:
          type: string
          enum:
            - End
            - Error
          description: State of the backtest.
        version:
          type: number
          example: 2.0
          description: Version of the response.
        payload:
          type: string
          description: Information about the backtest initialization.
        payloadType:
          type: string
          example: String
          description: Type of the payload.
      description: Response to a backtest initialization request.
    CodeCompletionRequest:
      type: object
      required:
        - language
        - sentence
      properties:
        language:
          type: string
          enum:
            - C#
            - Py
          example: Py
          description: Programming language for the code completion.
        sentence:
          type: string
          example: self.add_eq
          description: Sentence to complete.
        responseSizeLimit:
          type: integer
          example: 10
          description: Maximum size of the responses.
      description: Request to show code completion for a specific text input.
    CodeCompletionResponse:
      type: object
      properties:
        state:
          type: string
          enum:
            - End
          description: State of the code completion.
        version:
          type: number
          example: 2.0
          description: Version of the response.
        payload:
          type: array
          items:
            type: string
          description: Code completion suggestions.
        payloadType:
          type: string
          example: StringArray
          description: Type of the payload.
      description: Response to a code completion request.
    ErrorEnhanceRequest:
      type: object
      required:
        - language
        - error
      properties:
        language:
          type: string
          enum:
            - C#
            - Py
          example: Py
          description: Programming language for the code completion.
        error:
          $ref: "#/components/schemas/Error"
      description: Request to show additional context and suggestions for error messages.
    ErrorEnhanceResponse:
      type: object
      properties:
        state:
          type: string
          example: End
          description: State of the code completion.
        version:
          type: number
          example: 2.0
          description: Version of the response.
        payload:
          type: string
          description: Error message suggestions.
        payloadType:
          type: string
          example: String
          description: Type of the payload.
      description: Response to error enhancement request.
    PEP8ConvertRequest:
      type: object
      required:
        - files
      properties:
        files:
          type: array
          example: '[{"name": "file.py", "content": "fileContent"}]'
          description: Files of the project.
          items:
            $ref: "#/components/schemas/File"
      description: Request to convert Python code to PEP8 style.
    PEP8ConvertResponse:
      type: object
      properties:
        state:
          type: string
          example: End
          description: State of PEP8 conversion.
        version:
          type: number
          example: 2.0
          description: Version of the response.
        payload:
          type: object
          example:
            utils.py: "def add(a,b):\n    return a+b\n"
          description:
            A dictionary where the key is the file name and the value is
            the PEP8 converted code of that file.
        payloadType:
          type: string
          example: StringDict
          description: Type of the payload.
      description: Response to a PEP8 conversion request.
    SyntaxCheckResponse:
      type: object
      properties:
        state:
          type: string
          enum:
            - End
            - Error
          description: State of the syntax check.
        version:
          type: number
          example: 2.0
          description: Version of the response.
        payload:
          type: array
          items:
            type: string
          description: Code completion suggestions.
        payloadType:
          type: string
          example: StringArray
          description: Type of the payload.
      description: Response to a syntax check request.
    SearchRequest:
      type: object
      required:
        - language
        - criteria
      properties:
        language:
          type: string
          enum:
            - C#
            - Py
          example: Py
          description: Programming language of the content to search.
        criteria:
          type: array
          items:
            $ref: "#/components/schemas/SearchCriteria"
          description: Criteria for the search.
      description: Request to search content in QuantConnect.
    SearchCriteria:
      type: object
      required:
        - input
        - type
        - count
      properties:
        input:
          type: string
          example: How to create an Alpha model
          description: Input for the search.
        type:
          type: string
          enum:
            - Stubs
            - Forum
            - Docs
            - Examples
          description: Type of the search criteria.
        count:
          type: integer
          example: 1
          description: Number of results to return.
      description: Search criteria.
    SearchResponse:
      type: object
      properties:
        state:
          type: string
          enum:
            - End
            - Error
          description: State of the search.
        version:
          type: number
          example: 2.0
          description: Version of the response.
        retrivals:
          type: array
          items:
            $ref: "#/components/schemas/SearchRetrieval"
          description: List of search results.
        messageId:
          type: integer
          example: 0
          description: Id of the message.
      description: Response to a search request.
    SearchRetrieval:
      type: object
      properties:
        url:
          type: string
          example: "[Index Options - QuantConnect.com](https://www.quantconnect.com/docs/v2/writing-algorithms/universes/index-options)"
          description: Input for the search.
        score:
          type: number
          example: 0.320344448
          description: Relevance score of the search result.
        content:
          type: string
          description: Content of the search result.
        type:
          type: number
          example: 2
          description: Type of the search result. 0=Stubs, 1=Forum, 2=Docs, 3=Examples.
      description: Search criteria.
    AbortOptimizationRequest:
      type: object
      required:
        - optimizationId
      properties:
        optimizationId:
          type: string
          example: O-401d3d40b5a0e9f8c46c954a303f3ddd
          description: Id of the optimization to abort.
      description: Abort an optimization.
    AccountResponse:
      type: object
      properties:
        organizationId:
          type: string
          example: 5cad178b20a1d52567b534553413b691
          description: The organization Id.
        creditBalance:
          type: number
          description: The current account balance.
        card:
          $ref: "#/components/schemas/Card"
      description: Account information for an organization.
    AlgorithmPerformance:
      type: object
      properties:
        tradeStatistics:
          $ref: "#/components/schemas/TradeStatistics"
        portfolioStatistics:
          $ref: "#/components/schemas/PortfolioStatistics"
        closedTrades:
          type: array
          description: The algorithm statistics on portfolio.
          items:
            $ref: "#/components/schemas/Trade"
      description:
        The AlgorithmPerformance class is a wrapper for TradeStatistics
        and PortfolioStatistics.
    BacktestOrdersResponse:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: "#/components/schemas/Order"
        length:
          type: integer
          description: Total number of returned orders
      description:
        Contains orders and the number of orders of the backtest in the
        request criteria.
    BacktestInsightsResponse:
      type: object
      properties:
        insights:
          type: array
          description: Collection of insights.
          items:
            $ref: "#/components/schemas/Insight"
        length:
          type: integer
          description: Total number of returned insights.
        success:
          type: boolean
          description: Indicate if the API request was successful.
      description:
        Contains insights and the number of insights of the backtest in
        the request criteria.
    BacktestResponse:
      type: object
      properties:
        backtest:
          $ref: "#/components/schemas/BacktestResult"
        debugging:
          type: boolean
          description: Indicates if the backtest is run under debugging mode.
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Collection container for a list of backtests for a project.
    BacktestSummaryResponse:
      type: object
      properties:
        backtests:
          type: array
          description: Collection of backtest summaries for a project.
          items:
            $ref: "#/components/schemas/BacktestSummaryResult"
        count:
          type: integer
          description: Number of backtest summaries retrieved in the response.
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Collection container for a list of backtest summaries for a project.
    BacktestReport:
      type: object
      properties:
        report:
          type: string
          description: HTML data of the report with embedded base64 images.
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Backtest Report Response wrapper.
    BacktestReportGeneratingResponse:
      type: object
      properties:
        generating:
          type: boolean
          description: Indicate if the report is generating.
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Backtest Report Response wrapper.
    BacktestReportRequest:
      type: object
      required:
        - projectId
        - backtestId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project to read.
        backtestId:
          type: string
          description: Id of the backtest to read.
          example: 26c7bb06b8487cff1c7b3c44652b30f1
      description: Request to read out the report of a backtest.
    BacktestResult:
      type: object
      properties:
        note:
          type: string
          description: Note on the backtest attached by the user.
        name:
          type: string
          description: Name of the backtest.
        organizationId:
          type: string
          example: d6d62db48592c72e67b534553413b602
          description: The Id of the orgainization.
        projectId:
          type: integer
          example: 23456789
          description: Id of the project.
        completed:
          type: boolean
          description: Boolean true when the backtest is completed.
        optimizationId:
          type: string
          example: O-401d3d40b5a0e9f8c46c954a303f3ddd
          description: Optimization task ID, if the backtest is part of an optimization.
        backtestId:
          type: string
          example: 26c7bb06b8487cff1c7b3c44652b30f1
          description: Assigned backtest ID.
        tradeableDates:
          type: integer
          description: Number of tradeable days in the backtest.
        researchGuide:
          $ref: "#/components/schemas/ResearchGuide"
        backtestStart:
          type: string
          description: The starting time of the backtest
          format: date-time
        backtestEnd:
          type: string
          description: The ending time of the backtest
          format: date-time
        created:
          type: string
          description: Backtest creation date and time.
          format: date-time
        snapshotId:
          type: integer
          description: Snapshot Id of this backtest result.
        status:
          type: string
          description: Status of the backtest.
          enum:
            - Completed.
            - In Queue...
            - In Progress...
            - "Running: _%"
            - Runtime Error
        error:
          type: string
          description: Backtest error message.
        stacktrace:
          type: string
          description: Backtest error stacktrace.
        progress:
          type: number
          description: Progress of the backtest in percent 0-1.
          format: float
        hasInitializeError:
          type: boolean
          description: Indicates if the backtest has error during initialization.
        charts:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ChartSummary"
          description:
            Charts updates for the live algorithm since the last result
            packet.
        parameterSet:
          $ref: "#/components/schemas/ParameterSet"
        rollingWindow:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AlgorithmPerformance"
          description: Rolling window detailed statistics.
        runtimeStatistics:
          $ref: "#/components/schemas/RuntimeStatistics"
        statistics:
          $ref: "#/components/schemas/StatisticsResult"
        totalPerformance:
          $ref: "#/components/schemas/AlgorithmPerformance"
        nodeName:
          type: string
          description: The backtest node name.
        outOfSampleMaxEndDate:
          type: string
          description: End date of out of sample data.
          format: date-time
        outOfSampleDays:
          type: integer
          description: Number of days of out of sample days.
      description:
        Results object class. Results are exhaust from backtest or live
        algorithms running in LEAN.
    BacktestSummaryResult:
      type: object
      properties:
        backtestId:
          type: string
          example: 26c7bb06b8487cff1c7b3c44652b30f1
          description: Assigned backtest ID
        status:
          type: string
          description: Status of the backtest.
          enum:
            - Completed.
            - In Queue...
            - In Progress...
            - "Running: _%"
            - Runtime Error
        name:
          type: string
          description: Name of the backtest.
        created:
          type: string
          description: Backtest creation date and time.
          format: date-time
        progress:
          type: number
          description: Progress of the backtest in percent 0-1.
          format: float
        optimizationId:
          type: string
          example: O-401d3d40b5a0e9f8c46c954a303f3ddd
          description: Optimization task ID, if the backtest is part of an optimization.
        tradeableDates:
          type: integer
          description: Number of traadeable days
        parameterSet:
          $ref: "#/components/schemas/ParameterSet"
        snapshotId:
          type: integer
          description: Snapshot id of this backtest result.
        tags:
          type: array
          description: Collection of tags for the backtest.
          items:
            type: string
        sharpeRatio:
          type: number
          description:
            Sharpe ratio with respect to risk free rate; measures excess
            of return per unit of risk.
        alpha:
          type: number
          description:
            Algorithm 'Alpha' statistic - abnormal returns over the risk
            free rate and the relationshio (beta) with the benchmark returns.
        beta:
          type: number
          description:
            Algorithm 'beta' statistic - the covariance between the algorithm
            and benchmark performance, divided by benchmark's variance.
        compoundingAnnualReturn:
          type: number
          description:
            Annual compounded returns statistic based on the final-starting
            capital and years.
        drawdown:
          type: number
          description: Drawdown maximum percentage.
        lossRate:
          type: number
          description:
            The ratio of the number of losing trades to the total number
            of trades.
        netProfit:
          type: number
          description: Net profit percentage.
        parameters:
          type: integer
          description: Number of parameters in the backtest.
        psr:
          type: number
          description: Price-to-sales ratio.
        securityTypes:
          type: integer
          description:
            The number of security types (QuantConnect.SecurityType) present
            in the backtest.
        sortinoRatio:
          type: number
          description:
            Sortino ratio with respect to risk free rate; measures excess
            of return per unit of downside risk.
        trades:
          type: integer
          description: Number of trades in the backtest.
        treynorRatio:
          type: number
          description:
            Treynor ratio statistic is a measurement of the returns earned
            in excess of that which could have been earned on an investment that has
            no diversifiable risk.
        winRate:
          type: number
          description:
            The ratio of the number of winning trades to the total number
            of trades.
      description: Result object class for the List Backtest response from the API.
    BaseLiveAlgorithmSettings:
      type: object
      properties:
        id:
          type: string
          description: "'Interactive' / 'FXCM' / 'Oanda' / 'Tradier' /'PaperTrading'"
          example: Default
        user:
          type: string
          description: Username associated with brokerage.
          example: ""
        password:
          type: string
          description: Password associated with brokerage.
          example: ""
        environment:
          type: string
          description:
            Represents the types of environments supported by brokerages
            for trading.
          enum:
            - live
            - paper
        account:
          type: string
          description: Account of the associated brokerage.
          example: ""
      description:
        Base class for settings that must be configured per Brokerage to
        create new algorithms via the API.
    BrokerageData:
      type: object
      properties:
        authentication:
          $ref: "#/components/schemas/LiveAuthenticationData"
        additionalProperties:
          $ref: "#/components/schemas/BrokerageId"
      description: Brokerage data saved on live deployment.
    BrokerageId:
      type: object
      properties:
        id:
          type: string
          description: The ID of the brokerage.
      description: Brokerage Id.
    Card:
      type: object
      properties:
        brand:
          type: string
          description: Credit card brand.
        expiration:
          type: string
          description: The credit card expiration (mm/yy).
          example: 12/27
        last4:
          type: string
          description: The last 4 digits of the card.
      description: Credit card information.
    Cash:
      type: object
      properties:
        securitySymbols:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
                description: TODO
              id:
                type: string
                description: TODO
              permtick:
                type: string
                description: TODO
        symbol:
          type: string
          description: Gets the symbol used to represent this cash.
        amount:
          type: number
          description: Gets or sets the amount of cash held.
          format: float
        conversionRate:
          type: number
          description: The currency conversion rate to the account base currency.
          format: float
        currencySymbol:
          type: string
          description: The symbol of the currency.
          example: $
        valueInAccountCurrency:
          type: number
          description: The value of the currency cash in the account base currency.
          format: float
      description: Represents a holding of a currency in cash.
    CashAmount:
      properties:
        amount:
          type: number
          description: The amount of cash.
          format: float
        currency:
          type: string
          description: The currency in which the cash amount is denominated.
      description:
        Represents a cash amount which can be converted to account currency
        using a currency converter.
    ChartSummary:
      type: object
      properties:
        name:
          type: string
          description: Name of the Chart.
      description: Contains the names of all charts
    Chart:
      type: object
      properties:
        name:
          type: string
          description: Name of the Chart.
        chartType:
          type: integer
          description: Type of the Chart. 0=Overlayed, 1=Stacked.
          enum:
            - 0
            - 1
        series:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Series"
          description: Series Objects for this Chart.
      description: Single Parent Chart Object for Custom Charting.
    ChartPoint:
      type: object
      properties:
        x:
          type: string
          description:
            "Time of this chart point: lower case for javascript encoding
            simplicty."
        y:
          type: number
          description:
            "Value of this chart point:  lower case for javascript encoding
            simplicty."
          format: float
      description: Location on a chart containing the X-Y location
    CreateCompileRequest:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project to compile.
      description: Request to compile a project.
    Collaborator:
      type: object
      properties:
        uid:
          type: integer
          description: User ID.
        liveControl:
          type: boolean
          description: Indicate if the user has live control.
        permission:
          type: string
          description: The permission this user is given.
          enum:
            - read
            - write
        publicId:
          type: string
          description: The user public ID.
        profileImage:
          type: string
          description: The url of the user profile image.
          example: https://cdn.quantconnect.com/web/i/users/profile/abc123.jpeg
        email:
          type: string
          description: The registered email of the user.
          example: abc@123.com
        name:
          type: string
          description: The display name of the user.
        bio:
          type: string
          description: The biography of the user.
        owner:
          type: boolean
          description: Indicate if the user is the owner of the project.
    CreateCollaboratorRequest:
      type: object
      required:
        - projectId
        - collaboratorUserId
        - collaborationLiveControl
        - collaborationWrite
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project to add the collaborator to.
        collaboratorUserId:
          type: string
          example: mia-ai
          description: User Id of the collaborator to add.
        collaborationLiveControl:
          type: boolean
          example: true
          description: Gives the right to deploy and stop live algorithms.
        collaborationWrite:
          type: boolean
          example: false
          description: Gives the right to edit the code.
      description: Request to add a new collaborator to a project.
    CreateCollaboratorResponse:
      type: object
      properties:
        collaborators:
          type: array
          description: List of collaborators.
          items:
            $ref: "#/components/schemas/Collaborator"
        success:
          type: boolean
          description: Indicate if the API request was successful.
      description: Response received when creating collaborator.
    ReadCollaboratorsRequest:
      required:
        - projectId
      type: object
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project from which to read the collaborators.
      description: Request to list the collaborators in a project.
    ReadCollaboratorsResponse:
      type: object
      properties:
        collaborators:
          type: array
          description: List of collaborators on the project.
          items:
            $ref: "#/components/schemas/Collaborator"
        userLiveControl:
          type: boolean
          description:
            Indicate if the project owner has the right to deploy and stop
            live algorithms.
        userPermissions:
          type: string
          enum:
            - write
            - read
          description: Permissions of the project owner
        success:
          type: boolean
          description: Indicate if the API request was successful.
      description: Response received when reading the collaborators of a project.
    UpdateCollaboratorRequest:
      type: object
      required:
        - projectId
        - collaboratorUserId
        - liveControl
        - write
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project the collaborator is on.
        collaboratorUserId:
          type: string
          example: mia-ai
          description: User Id of the collaborator to update.
        liveControl:
          type: boolean
          example: true
          description: Gives the right to deploy and stop live algorithms.
        write:
          type: boolean
          example: true
          description: Gives the right to edit the code.
      description: Request to update an existing collaborator on a project.
    UpdateCollaboratorResponse:
      type: object
      properties:
        collaborators:
          type: array
          description: List of collaborators.
          items:
            $ref: "#/components/schemas/Collaborator"
        success:
          type: boolean
          description: Indicate if the API request was successful.
      description: Response received when updating collaborator.
    DeleteCollaboratorRequest:
      type: object
      required:
        - projectId
        - collaboratorId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project to remove the collaborator from.
        collaboratorId:
          type: string
          example: mia-ai
          description: User Id of the collaborator to remove.
      description: Request to remove a collaborator from a project.
    DeleteCollaboratorResponse:
      type: object
      properties:
        collaborators:
          type: array
          description: List of collaborators.
          items:
            $ref: "#/components/schemas/Collaborator"
        success:
          type: boolean
          description: Indicate if the API request was successful.
      description: Response received when removing collaborator.
    LockCollaboratorRequest:
      type: object
      required:
        - projectId
        - codeSourceId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project to edit.
        codeSourceId:
          type: string
          example: MCP Server
          description: Name of the environment that's creating the request.
      description:
        Lock a project so you can edit it. This is necessary when the project
        has collaborators or when an LLM is editing files on your behalf via our MCP
        Server.
    CreateCompileResponse:
      type: object
      properties:
        compileId:
          type: string
          example: 5d1f2cba3a0ec7407c566614300502b5-173e0419674daf4144ce7c9931155ca8
          description: Compile Id for a successful build.
        state:
          type: string
          description: The current state of the compile job.
          enum:
            - InQueue
            - BuildSuccess
            - BuildError
        parameters:
          type: array
          description:
            List of files and their associated parameters detected during
            compilation.
          items:
            $ref: "#/components/schemas/FileParameters"
        projectId:
          type: integer
          example: 23456789
          description: Id of the project you requested to compile.
        signature:
          type: string
          description: Signature key of compilation.
        signatureOrder:
          type: array
          description: Signature order of files to be compiled.
          items:
            type: string
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received from creating a compile job.
    ReadCompileResponse:
      type: object
      properties:
        compileId:
          type: string
          example: 5d1f2cba3a0ec7407c566614300502b5-173e0419674daf4144ce7c9931155ca8
          description: Compile Id for a successful build.
        state:
          type: string
          description: The current state of the compile job.
          enum:
            - InQueue
            - BuildSuccess
            - BuildError
        logs:
          type: array
          description: Logs of the compilation request.
          items:
            type: string
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received from reading a compile job.
    FileParameters:
      type: object
      properties:
        file:
          type: string
          description: Path of the file in the project.
          example: __init__.py
        parameters:
          type: array
          description: List of parameters detected in the file.
          items:
            $ref: "#/components/schemas/ParameterDetail"
    ParameterDetail:
      type: object
      properties:
        line:
          type: integer
          description: Line number where the parameter was detected.
          example: 8
        type:
          type: string
          description: Description of the detected parameter.
          example:
            3 LEAN API parameters detected near "self.set_start_date(2024,
            1, 3)".
    CreateBacktestRequest:
      required:
        - projectId
        - compileId
        - backtestName
      type: object
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project to backtest.
        compileId:
          type: string
          example: 5d1f2cba3a0ec7407c566614300502b5-173e0419674daf4144ce7c9931155ca8
          description: Compile Id for the project to backtest.
        backtestName:
          type: string
          example: New Backtest
          description: Name for the new backtest.
        parameters:
          type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: number
              - type: integer
          description: Parameters to use for the backtest.
      description: Request to create a new backtest.
    AuthorizeExternalConnectionRequest:
      type: object
      required:
        - brokerage
      properties:
        brokerage:
          type: string
          enum:
            - alpaca
            - tradestation
            - charlesschwab
            - tastytrade
          description: The brokerage to authenticate a connection with.
      description:
        Request for authenticating with an external brokerage or data provider
        for a live algorithm.
    AuthorizeExternalConnectionResponse:
      type: object
      properties:
        authorization:
          type: object
          description:
            Authentication information from the data provider or brokerage,
            including the access token or refresh token.
          example:
            alpaca-access-token: 37a2c4f3-7b1c-41a4-b103-197a88ef2a4d
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description:
        Response for authenticating with an external brokerage or data
        provider for a live algorithm.
    CreateLiveAlgorithmRequest:
      type: object
      required:
        - projectId
        - compileId
        - nodeId
        - versionId
        - brokerage
      properties:
        versionId:
          type: string
          description:
            The version of the Lean used to run the algorithm. -1 is master,
            however, sometimes this can create problems with live deployments. If
            you experience problems using, try specifying the version of Lean you
            would like to use.
          example: "-1"
        projectId:
          type: integer
          example: 23456789
          description: Project Id.
        compileId:
          type: string
          example: 5d1f2cba3a0ec7407c566614300502b5-173e0419674daf4144ce7c9931155ca8
          description: Compile Id.
        nodeId:
          type: string
          description: Id of the node that will run the algorithm.
          example: LN-c54129e1b4f667613d3f34542b787771
        brokerage:
          type: object
          description: Brokerage configuration for the live algorithm.
          oneOf:
            - $ref: "#/components/schemas/QuantConnectBrokerageSettings"
            - $ref: "#/components/schemas/InteractiveBrokersBrokerageSettings"
            - $ref: "#/components/schemas/TradierBrokerageSettings"
            - $ref: "#/components/schemas/BitfinexSettings"
            - $ref: "#/components/schemas/CoinbaseBrokerageSettings"
            - $ref: "#/components/schemas/BinanceBrokerageSettings"
            - $ref: "#/components/schemas/BinanceUSBrokerageSettings"
            - $ref: "#/components/schemas/BinanceUSDMFuturesBrokerageSettings"
            - $ref: "#/components/schemas/BinanceCOINFuturesBrokerageSettings"
            - $ref: "#/components/schemas/TradingTechnologiesBrokerageSettings"
            - $ref: "#/components/schemas/KrakenSettings"
            - $ref: "#/components/schemas/BybitBrokerageSettings"
            - $ref: "#/components/schemas/OandaSettings"
            - $ref: "#/components/schemas/WolverineSettings"
            - $ref: "#/components/schemas/CharlesSchwabSettings"
            - $ref: "#/components/schemas/RBIBrokerageSettings"
            - $ref: "#/components/schemas/TerminalLinkSettings"
            - $ref: "#/components/schemas/TradeStationSettings"
            - $ref: "#/components/schemas/TastytradeSettings"
            - $ref: "#/components/schemas/AlpacaBrokerageSettings"
        dataProviders:
          type: object
          description:
            Dictionary of data provider configurations to be used in the
            live algorithm. Provide at least one. The order in which you define the
            providers defines their order of precedence.
          properties:
            QuantConnectBrokerage:
              $ref: "#/components/schemas/QuantConnectDataProviderSettings"
            InteractiveBrokersBrokerage:
              $ref: "#/components/schemas/InteractiveBrokersDataProviderSettings"
            TradierBrokerage:
              $ref: "#/components/schemas/TradierDataProviderSettings"
            BitfinexBrokerage:
              $ref: "#/components/schemas/BitfinexSettings"
            CoinbaseBrokerage:
              $ref: "#/components/schemas/CoinbaseDataProviderSettings"
            BinanceBrokerage:
              oneOf:
                - $ref: "#/components/schemas/BinanceDataProviderSettings"
                - $ref: "#/components/schemas/BinanceUSDataProviderSettings"
                - $ref: "#/components/schemas/BinanceUSDMFuturesDataProviderSettings"
                - $ref: "#/components/schemas/BinanceCOINFuturesDataProviderSettings"
            KrakenBrokerage:
              $ref: "#/components/schemas/KrakenSettings"
            PolygonDataFeed:
              $ref: "#/components/schemas/PolygonDataProviderSettings"
            BybitBrokerage:
              $ref: "#/components/schemas/BybitDataProviderSettings"
            OandaBrokerage:
              $ref: "#/components/schemas/OandaSettings"
            CharlesSchwabBrokerage:
              $ref: "#/components/schemas/CharlesSchwabSettings"
            TradeStationBrokerage:
              $ref: "#/components/schemas/TradeStationSettings"
            TastytradeBrokerage:
              $ref: "#/components/schemas/TastytradeSettings"
            AlpacaBrokerage:
              $ref: "#/components/schemas/AlpacaDataProviderSettings"
    QuantConnectDataProviderSettings:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: Id of the module.
          enum:
            - QuantConnectBrokerage
          default: QuantConnectBrokerage
      description: Settings for using QuantConnect as a data provider for a live algorithm.
    QuantConnectBrokerageSettings:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: Id of the module.
          enum:
            - QuantConnectBrokerage
        holdings:
          type: array
          description: List of holdings for the brokerage.
          items:
            $ref: "#/components/schemas/BrokerageHolding"
        cash:
          type: array
          description: List of cash amount.
          items:
            $ref: "#/components/schemas/CashAmount"
      description: Settings for using Paper Trading as the brokerage for a live algorithm.
    InteractiveBrokersBrokerageSettings:
      type: object
      required:
        - id
        - ib-user-name
        - ib-account
        - ib-password
        - ib-weekly-restart-utc-time
      properties:
        id:
          type: string
          description: Id of the module.
          enum:
            - InteractiveBrokersBrokerage
        ib-user-name:
          type: string
          description: Your Interactive Brokers username.
        ib-account:
          type: string
          description: Your Interactive Brokers account id.
        ib-password:
          type: string
          description: Your Interactive Brokers password.
        ib-weekly-restart-utc-time:
          type: string
          description:
            Weekly restart UTC time (hh:mm:ss). Each week on Sunday your
            algorithm restarts at this time and requires 2FA verification. This is
            required by Interactive Brokers.
        ib-financial-advisors-group-filter:
          type: string
          description:
            Use this field to filter data by a specific financial advisor
            group within your Interactive Brokers account. Leave blank to include
            all groups.
      description:
        Settings for using Interactive Brokers as the brokerage or a data
        provider for a live algorithm.
    InteractiveBrokersDataProviderSettings:
      allOf:
        - $ref: "#/components/schemas/InteractiveBrokersBrokerageSettings"
      description:
        Settings for using Interactive Brokers as a data provider for a
        live algorithm.
    TradierBrokerageSettings:
      type: object
      required:
        - id
        - tradier-account-id
        - tradier-access-token
        - tradier-environment
      properties:
        id:
          type: string
          description: Id of the module.
          enum:
            - TradierBrokerage
        tradier-account-id:
          type: string
          description: Your Tradier account id.
        tradier-access-token:
          type: string
          description: Your Tradier access token.
        tradier-environment:
          type: string
          description: Whether the developer sandbox should be used.
          enum:
            - live
            - paper
      description: Settings for using Tradier as the brokerage for a live algorithm.
    TradierDataProviderSettings:
      allOf:
        - $ref: "#/components/schemas/TradierBrokerageSettings"
      description: Settings for using Tradier as a data provider for a live algorithm.
    BitfinexSettings:
      type: object
      required:
        - id
        - bitfinex-api-key
        - bitfinex-api-secret
      properties:
        id:
          type: string
          description: Id of the module.
          enum:
            - BitfinexBrokerage
        bitfinex-api-key:
          type: string
          description: Your Bitfinex API key.
        bitfinex-api-secret:
          type: string
          description: Your Bitfinex API secret.
      description:
        Settings for using Bitfinex as the brokerage or a data provider
        for a live algorithm.
    CoinbaseBrokerageAndDataProviderSettings:
      type: object
      required:
        - id
        - coinbase-api-name
        - coinbase-api-private-key
      properties:
        id:
          type: string
          description: Id of the module.
          enum:
            - CoinbaseBrokerage
        coinbase-api-name:
          type: string
          description: Your Coinbase Advanced Trade API name.
        coinbase-api-private-key:
          type: string
          description: Your Coinbase Advanced Trade API private key.
    CoinbaseBrokerageSettings:
      allOf:
        - $ref: "#/components/schemas/CoinbaseBrokerageAndDataProviderSettings"
        - type: object
          properties:
            holdings:
              type: array
              description: List of holdings for the brokerage.
              items:
                $ref: "#/components/schemas/BrokerageHolding"
      description:
        Settings for using Coinbase Advanced Trade as the brokerage for
        a live algorithm.
    CoinbaseDataProviderSettings:
      allOf:
        - $ref: "#/components/schemas/CoinbaseBrokerageAndDataProviderSettings"
      description:
        Settings for using Coinbase Advanced Trade as a data provider for
        a live algorithm.
    BinanceBrokerageAndDataProviderSettings:
      type: object
      required:
        - id
        - binance-exchange-name
        - binance-api-key
        - binance-api-secret
        - binance-use-testnet
      properties:
        id:
          type: string
          description: Id of the module.
          enum:
            - BinanceBrokerage
        binance-exchange-name:
          type: string
          description: Binance exchange name.
          enum:
            - Binance
        binance-api-key:
          type: string
          description: Your Binance API key
        binance-api-secret:
          type: string
          description: Your Binance API secret
        binance-use-testnet:
          type: string
          description: Whether the testnet should be used
          enum:
            - live
            - paper
    BinanceBrokerageSettings:
      allOf:
        - $ref: "#/components/schemas/BinanceBrokerageAndDataProviderSettings"
        - type: object
          properties:
            holdings:
              type: array
              description: List of holdings for the brokerage.
              items:
                $ref: "#/components/schemas/BrokerageHolding"
      description: Settings for using Binance as the brokerage for a live algorithm.
    BinanceDataProviderSettings:
      allOf:
        - $ref: "#/components/schemas/BinanceBrokerageAndDataProviderSettings"
      description: Settings for using Binance as a data provider for a live algorithm.
    BinanceUSBrokerageAndDataProviderSettings:
      type: object
      required:
        - id
        - binance-exchange-name
        - binanceus-api-key
        - binanceus-api-secret
      properties:
        id:
          type: string
          description: Id of the module.
          enum:
            - BinanceBrokerage
        binance-exchange-name:
          type: string
          description: Binance exchange name.
          enum:
            - BinanceUS
        binanceus-api-key:
          type: string
          description: Your Binance API key
        binanceus-api-secret:
          type: string
          description: Your Binance API secret
    BinanceUSBrokerageSettings:
      allOf:
        - $ref: "#/components/schemas/BinanceUSBrokerageAndDataProviderSettings"
        - type: object
          properties:
            holdings:
              type: array
              description: List of holdings for the brokerage.
              items:
                $ref: "#/components/schemas/BrokerageHolding"
      description: Settings for using Binance as the brokerage for a live algorithm.
    BinanceUSDataProviderSettings:
      allOf:
        - $ref: "#/components/schemas/BinanceUSBrokerageAndDataProviderSettings"
      description: Settings for using Binance as a data provider for a live algorithm.
    BinanceUSDMFuturesBrokerageAndDataProviderSettings:
      type: object
      required:
        - id
        - binance-exchange-name
        - binance-api-key
        - binance-api-secret
      properties:
        id:
          type: string
          description: Id of the module.
          enum:
            - BinanceBrokerage
        binance-exchange-name:
          type: string
          description: Binance exchange name.
          enum:
            - Binance-USDM-Futures
        binance-api-key:
          type: string
          description: Your Binance API key
        binance-api-secret:
          type: string
          description: Your Binance API secret
    BinanceUSDMFuturesBrokerageSettings:
      allOf:
        - $ref: "#/components/schemas/BinanceUSDMFuturesBrokerageAndDataProviderSettings"
        - type: object
          properties:
            holdings:
              type: array
              description: List of holdings for the brokerage.
              items:
                $ref: "#/components/schemas/BrokerageHolding"
      description: Settings for using Binance as the brokerage for a live algorithm.
    BinanceUSDMFuturesDataProviderSettings:
      allOf:
        - $ref: "#/components/schemas/BinanceUSDMFuturesBrokerageAndDataProviderSettings"
      description: Settings for using Binance as a data provider for a live algorithm.
    BinanceCOINFuturesBrokerageAndDataProviderSettings:
      type: object
      required:
        - id
        - binance-exchange-name
        - binance-api-key
        - binance-api-secret
      properties:
        id:
          type: string
          description: Id of the module.
          enum:
            - BinanceBrokerage
        binance-exchange-name:
          type: string
          description: Binance exchange name.
          enum:
            - Binance-COIN-Futures
        binance-api-key:
          type: string
          description: Your Binance API key
        binance-api-secret:
          type: string
          description: Your Binance API secret
    BinanceCOINFuturesBrokerageSettings:
      allOf:
        - $ref: "#/components/schemas/BinanceCOINFuturesBrokerageAndDataProviderSettings"
        - type: object
          properties:
            holdings:
              type: array
              description: List of holdings for the brokerage.
              items:
                $ref: "#/components/schemas/BrokerageHolding"
      description: Settings for using Binance as the brokerage for a live algorithm.
    BinanceCOINFuturesDataProviderSettings:
      allOf:
        - $ref: "#/components/schemas/BinanceCOINFuturesBrokerageAndDataProviderSettings"
      description: Settings for using Binance as a data provider for a live algorithm.
    TradingTechnologiesBrokerageSettings:
      type: object
      required:
        - id
        - tt-user-name
        - tt-session-password
        - tt-account-name
        - tt-rest-app-key
        - tt-rest-app-secret
        - tt-rest-environment
        - tt-order-routing-sender-comp-id
        - cash
      properties:
        id:
          type: string
          description: Id of the module.
          enum:
            - TradingTechnologiesBrokerage
        tt-user-name:
          type: string
          description: Your Trading Technologies username
        tt-session-password:
          type: string
          description: Your Trading Technologies session password
        tt-account-name:
          type: string
          description: Your Trading Technologies account name
        tt-rest-app-key:
          type: string
          description: Your Trading Technologies REST app key
        tt-rest-app-secret:
          type: string
          description: Your Trading Technologies REST app secret
        tt-rest-environment:
          type: string
          description: The REST environment to run in
          enum:
            - live
            - uat
        tt-order-routing-sender-comp-id:
          type: string
          description: The order routing sender comp id to use
        cash:
          type: array
          description: List of cash amount.
          items:
            $ref: "#/components/schemas/CashAmount"
      description:
        Settings for using Trading Technologies as the brokerage for a
        live algorithm.
    KrakenSettings:
      type: object
      required:
        - id
        - kraken-api-key
        - kraken-api-secret
        - kraken-verification-tier
      properties:
        id:
          type: string
          description: Id of the module.
          enum:
            - KrakenBrokerage
        kraken-api-key:
          type: string
          description: Your Kraken API key.
        kraken-api-secret:
          type: string
          description: Your Kraken API secret.
        kraken-verification-tier:
          type: string
          description: Your Kraken Verification Tier.
          enum:
            - Starter
            - Intermediate
            - Pro
      description:
        Settings for using Kraken as the brokerage or a data provider for
        a live algorithm.
    AlpacaBrokerageSettings:
      type: object
      required:
        - id
        - alpaca-access-token
        - alpaca-environment
      properties:
        id:
          type: string
          description: Id of the module.
          enum:
            - AlpacaBrokerage
        alpaca-access-token:
          type: string
          description: Your Alpaca access token for authentication.
        alpaca-environment:
          type: string
          description: The environment to run the algorithm in.
          enum:
            - live
            - paper
      description: Settings for using Alpaca as the brokerage for a live algorithm.
    AlpacaDataProviderSettings:
      type: object
      required:
        - id
        - alpaca-api-key
        - alpaca-api-secret
      properties:
        id:
          type: string
          description: Id of the module.
          enum:
            - AlpacaBrokerage
        alpaca-api-key:
          type: string
          description: Your Alpaca API key.
        alpaca-api-secret:
          type: string
          description: Your Alpaca API secret.
      description: Settings for using Alpaca as a data provider for a live algorithm.
    PolygonDataProviderSettings:
      type: object
      required:
        - id
        - polygon-api-key
      properties:
        id:
          type: string
          description: Id of the module.
          enum:
            - Polygon
        polygon-api-key:
          type: string
          description: Your Polygon.io API Key.
      description: Settings for using Polygon as a data provider for a live algorithm.
    BybitBrokerageAndDataProviderSettings:
      type: object
      required:
        - id
        - bybit-api-key
        - bybit-api-secret
        - bybit-vip-level
      properties:
        id:
          type: string
          description: Id of the module.
          enum:
            - BybitBrokerage
        bybit-api-key:
          type: string
          description: Your Bybit API key
        bybit-api-secret:
          type: string
          description: Your Bybit API secret
        bybit-vip-level:
          type: string
          description: Your Bybit VIP Level
          enum:
            - VIP0
            - VIP1
            - VIP2
            - VIP3
            - VIP4
            - VIP5
            - SupremeVIP
            - Pro1
            - Pro2
            - Pro3
            - Pro4
            - Pro5
    BybitBrokerageSettings:
      allOf:
        - $ref: "#/components/schemas/BybitBrokerageAndDataProviderSettings"
        - type: object
          properties:
            holdings:
              type: array
              description: List of holdings for the brokerage.
              items:
                $ref: "#/components/schemas/BrokerageHolding"
      description: Settings for using Bybit as the brokerage for a live algorithm.
    BybitDataProviderSettings:
      allOf:
        - $ref: "#/components/schemas/BybitBrokerageAndDataProviderSettings"
      description: Settings for using Bybit as a data provider for a live algorithm.
    OandaSettings:
      type: object
      required:
        - id
        - oanda-account-id
        - oanda-access-token
        - oanda-environment
      properties:
        id:
          type: string
          description: Id of the module.
          enum:
            - OandaBrokerage
        oanda-account-id:
          type: string
          description:
            Your OANDA account id can be found on your OANDA Account Statement
            page (https://www.oanda.com/account/statement/). It follows the following
            format '###-###-######-###'.
        oanda-access-token:
          type: string
          description:
            Your OANDA API token. You can generate an API token from the
            Manage API Access page (https://www.oanda.com/account/tpa/personal_token).
        oanda-environment:
          type: string
          description:
            The environment to run in. Practice for fxTrade Practice, Trade
            for fxTrade.
          enum:
            - Practice
            - Trade
      description:
        Settings for using Oanda as the brokerage or a data provider for
        a live algorithm.
    WolverineSettings:
      type: object
      required:
        - id
        - wolverine-account
        - wolverine-on-behalf-of-comp-id
      properties:
        id:
          type: string
          description: Id of the module.
          enum:
            - WolverineBrokerage
        wolverine-on-behalf-of-comp-id:
          type: string
          description: Value used to identify the trading firm.
        wolverine-account:
          type: string
          description: Wolverine Execution Services account name.
        cash:
          type: array
          description: List of cash amount.
          items:
            $ref: "#/components/schemas/CashAmount"
        holdings:
          type: array
          description: List of holdings for the brokerage.
          items:
            $ref: "#/components/schemas/BrokerageHolding"
      description:
        Settings for using Wolverine Execution Services as the brokerage
        for a live algorithm.
    TradeStationSettings:
      type: object
      required:
        - id
        - trade-station-client-id
        - trade-station-account-id
        - trade-station-refresh-token
        - trade-station-environment
      properties:
        id:
          type: string
          description: Id of the module.
          enum:
            - TradeStationBrokerage
        trade-station-client-id:
          type: string
          description: Your TradeStation client Id.
        trade-station-account-id:
          type: string
          description: The TradeStation account Id.
        trade-station-refresh-token:
          type: string
          description: The TradeStation refresh token.
        trade-station-environment:
          type: string
          description: The environment to run the algorithm in.
          enum:
            - live
            - paper
      description:
        Settings for using TradeStation as the brokerage or a data provider
        for a live algorithm.
    TastytradeSettings:
      type: object
      required:
        - id
        - tastytrade-account-number
        - tastytrade-refresh-token
      properties:
        id:
          type: string
          description: Id of the module.
          enum:
            - TastytradeBrokerage
        tastytrade-account-number:
          type: integer
          description: Your Tastytrade account number.
        tastytrade-refresh-token:
          type: string
          description: The TradeStation refresh token.
      description:
        Settings for using Tastytrade as the brokerage or a data provider
        for a live algorithm.
    CharlesSchwabSettings:
      type: object
      required:
        - id
        - charles-schwab-account-number
      properties:
        id:
          type: string
          description: Id of the module.
          enum:
            - CharlesSchwabBrokerage
        charles-schwab-account-number:
          type: string
          description: Your Charles Schwab account number.
      description:
        Settings for using Charles Schwab as a data provider or the brokerage
        for a live algorithm.
    TerminalLinkSettings:
      type: object
      required:
        - id
        - terminal-link-connection-type
        - terminal-link-server-auth-id
        - terminal-link-environment
        - terminal-link-server-host
        - terminal-link-server-port
        - terminal-link-emsx-broker
        - terminal-link-emsx-account
        - terminal-link-openfigi-api-key
      properties:
        id:
          type: string
          description: Id of the module.
          enum:
            - TerminalLinkBrokerage
        terminal-link-connection-type:
          type: string
          description: Terminal Link Connection Type.
          enum:
            - SAPI
        terminal-link-server-auth-id:
          type: string
          description:
            Your unique user identifier (UUID). The UUID is a unique integer
            identifier that's assigned to each Bloomberg Anywhere user. If you don't
            know your UUID, contact Bloomberg.
        terminal-link-environment:
          type: string
          description: The environment to run in.
          enum:
            - Production
            - Beta
        terminal-link-server-host:
          type: string
          description: The public IP address of the SAPI AWS server.
        terminal-link-server-port:
          type: integer
          description: The port where SAPI is listening. The default port is 8194.
        terminal-link-emsx-broker:
          type: string
          description: The EMSX broker to use.
        terminal-link-emsx-account:
          type: string
          description: The account to which LEAN should route orders.
        terminal-link-openfigi-api-key:
          type: string
          description: The OpenFIGI API key to use for mapping options.
        terminal-link-emsx-team:
          type: string
          description: The EMSX team to use.
        cash:
          type: array
          description: List of cash amount.
          items:
            $ref: "#/components/schemas/CashAmount"
        holdings:
          type: array
          description: List of holdings for the brokerage.
          items:
            $ref: "#/components/schemas/BrokerageHolding"
      description: Settings for using TerminalLink as the brokerage for a live algorithm.
    RBIBrokerageSettings:
      type: object
      required:
        - id
        - rbi-on-behalf-of-comp-id
        - rbi-account
      properties:
        id:
          type: string
          description: Id of the module.
          enum:
            - RBIBrokerage
        rbi-on-behalf-of-comp-id:
          type: string
          description: Value used to identify the trading firm.
        rbi-account:
          type: string
          description: RBI account name.
        cash:
          type: array
          description: List of cash amount.
          items:
            $ref: "#/components/schemas/CashAmount"
        holdings:
          type: array
          description: List of holdings for the brokerage.
          items:
            $ref: "#/components/schemas/BrokerageHolding"
      description: Settings for using RBI as the brokerage for a live algorithm.
    CreateLiveAlgorithmResponse:
      type: object
      properties:
        responseCode:
          type: string
          description: Response code of the request.
        source:
          type: string
          description: Source of the API call.
        deployId:
          type: string
          description: Id of the live deployment.
          example: L-141106d80de1da9a9f85ea07c06bf7b6
        versionId:
          type: integer
          description: Id of the LEAN version deployed.
          example: 17202
        projectId:
          type: integer
          description: Id of the project deployed.
          example: 24058693
        live:
          $ref: "#/components/schemas/LiveAlgorithm"
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received when deploying a live algorithm.
    CreateLiveCommandRequest:
      type: object
      required:
        - projectId
        - command
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project for the live instance we want to run the command against.
        command:
          type: object
          description: The command to run.
          example:
            $type: OrderCommand
            symbol:
              id: BTCUSD 2XR
              value: BTCUSD
            order_type: market
            quantity: "0.1"
            limit_price: 0
            stop_price: 0
            tag: ""
      description: Request to create a live command.
    BroadcastLiveCommandRequest:
      type: object
      required:
        - organizationId
        - command
      properties:
        organizationId:
          type: string
          description:
            Organization Id of the projects we would like to broadcast
            the command to
          example: 5cad178b20a1d52567b534553413b691
        excludeProjectId:
          type: integer
          example: 23456789
          description:
            Project for the live instance we want to exclude from the broadcast
            list. If null, all projects will be included.
        command:
          type: object
          description: The command to run.
          example:
            $type: OrderCommand
            symbol:
              id: BTCUSD 2XR
              value: BTCUSD
            order_type: market
            quantity: "0.1"
            limit_price: 0
            stop_price: 0
            tag: ""
      description: Request to create a live command.
    CreateOptimizationRequest:
      type: object
      required:
        - projectId
        - name
        - target
        - targetTo
        - strategy
        - compileId
        - parameters
        - estimatedCost
        - nodeType
        - parallelNodes
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project to optimize.
        name:
          type: string
          example: Mia First Optimization Job
          description: Name of the optimization.
        target:
          $ref: "#/components/schemas/OptimizationTargetStatistic"
        targetTo:
          $ref: "#/components/schemas/OptimizationTargetTo"
        targetValue:
          type: number
          description: Desired value for the optimization target statistic.
          example: 1
        strategy:
          $ref: "#/components/schemas/OptimizationStrategy"
        compileId:
          type: string
          example: 5d1f2cba3a0ec7407c566614300502b5-173e0419674daf4144ce7c9931155ca8
          description: Optimization compile Id.
        parameters:
          type: array
          description: Optimization parameters.
          items:
            $ref: "#/components/schemas/OptimizationParameter"
        constraints:
          type: array
          description: Optimization constraints.
          items:
            $ref: "#/components/schemas/OptimizationConstraint"
        estimatedCost:
          type: number
          description: Estimated cost for optimization.
          example: 10
        nodeType:
          $ref: "#/components/schemas/OptimizationNodeType"
        parallelNodes:
          type: integer
          description: Number of parallel nodes for optimization.
          example: 4
      description: Request to create an optimization job.
    CreateOptimizationResponse:
      type: object
      properties:
        optimizationId:
          type: string
          example: O-401d3d40b5a0e9f8c46c954a303f3ddd
          description: Id of the optimization job.
        projectId:
          type: integer
          example: 23456789
          description: Id of the project the optimization belongs to.
        name:
          type: string
          description: Name of the optimization.
        status:
          $ref: "#/components/schemas/OptimizationStatus"
        nodeType:
          $ref: "#/components/schemas/OptimizationNodeType"
        criterion:
          $ref: "#/components/schemas/OptimizationTarget"
        created:
          type: string
          description: Date and time of when this optimization was created.
          format: date-time
        psr:
          type: number
          description: Probabilistic Sharpe ratio statistic.
        sharpeRatio:
          type: number
          description: Sharpe ratio statistic.
        trades:
          type: integer
          description:
            Number of trades in the best backtest (based on the criterion)
            of the optimziation.
        cloneId:
          type: integer
          description: Id of project where this current project was originally cloned.
        outOfSampleDays:
          type: integer
          description: Number out-of-sample days.
        outOfSampleMaxEndDate:
          type: string
          description: End date of out-of-sample data.
          format: date-time
        parameters:
          type: array
          description: Parameters used in this optimization.
          items:
            $ref: "#/components/schemas/OptimizationParameter"
      description:
        Response received when launching an optimization job or listing
        all the optimization jobs of a project.
    CreateProjectRequest:
      type: object
      required:
        - name
        - language
      properties:
        name:
          type: string
          description: Project name.
        language:
          type: string
          description: Programming language to use.
          enum:
            - C#
            - Py
        organizationId:
          type: string
          example: 5cad178b20a1d52567b534553413b691
          description:
            The organization to create project under. If you don't provide
            a value, it defaults to your preferred organization.
      description:
        Request to create a project with the specified name and language
        via QuantConnect.com API.
    CreateProjectFileRequest:
      type: object
      required:
        - projectId
        - name
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project to add the file.
        name:
          type: string
          example: alpha.py
          description: The name of the new file.
        content:
          type: string
          example:
            - "class CustomClass:\n    def __init__(self):\n        pass\n"
          description: The content of the new file.
        codeSourceId:
          type: string
          example: MCP Server
          description: Name of the environment that's creating the request.
      description: Request to add a file to a project.
    DeleteFileRequest:
      type: object
      required:
        - projectId
        - name
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project that contains the file.
        name:
          type: string
          example: file.py
          description: The name of the file to delete.
        codeSourceId:
          type: string
          example: MCP Server
          description: Name of the environment that's creating the request.
      description: Request to delete a file in a project.
    PatchFileRequest:
      type: object
      required:
        - projectId
        - patch
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project that contains the file.
        patch:
          type: string
          example:
            - "diff --git a/main.py b/main.py\nindex 5a38b08..72c8d1e 100644\n--- a/main.py\n\
              +++ b/main.py\n@@ -2,4 +2,4 @@\n from AlgorithmImports import *\n # endregion\n\
              \n-a = 1\n+a = 2\n"
          description:
            "A patch string in **unified diff format** (as produced by
            `git diff`). It specifies changes to apply to one or more files in the
            project.


            **Required format:**

            - Must include `diff --git a/filename b/filename` header

            - Must include `index` line (can use placeholder hashes like `1234567..abcdefg`)

            - Must include `--- a/filename` and `+++ b/filename` lines

            - Must include `@@` hunk headers with line numbers and context counts

            - Include context lines before and after changes when possible

            - Use exact line content from the file (whitespace sensitive)


            **CRITICAL: The patch must match the EXACT file content including:**

            - Exact whitespace (spaces vs tabs)

            - Exact line endings

            - Exact indentation

            - All characters must match precisely


            **Recommended approach:**

            1. Read the current file content first

            2. Use 3+ lines of context before and after the change

            3. Copy exact text from the file for context lines

            4. Only modify the specific line(s) that need changing


            See examples for the complete structure required.

            "
        codeSourceId:
          type: string
          example: MCP Server
          description: Name of the environment that's creating the request.
      description: Request to apply a patch (unified diff) to a file in a project.
    DeleteProjectRequest:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project to delete.
      description: Request to delete a project.
    DeleteBacktestRequest:
      type: object
      required:
        - projectId
        - backtestId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project that contains the backtest.
        backtestId:
          type: string
          example: 26c7bb06b8487cff1c7b3c44652b30f1
          description: Id of the backtest to delete.
      description: Request to delete a backtest.
    DeleteObjectStoreRequest:
      type: object
      required:
        - organizationId
        - key
      properties:
        organizationId:
          type: string
          example: 5cad178b20a1d52567b534553413b691
          description: Id of the organization that owns the Object Store.
        key:
          type: string
          example: key1
          description: Key of the Object Store file to delete.
      description:
        Request to delete an object in the Object Store for a specific
        organization and key.
    DeleteOptimizationRequest:
      type: object
      required:
        - optimizationId
      properties:
        optimizationId:
          type: string
          example: O-401d3d40b5a0e9f8c46c954a303f3ddd
          description: Id of the optimization to delete.
      description: Delete an optimization.
    EncryptionKey:
      type: object
      properties:
        id:
          type: string
          description: Encryption key id.
        name:
          type: string
          description: Name of the encryption key.
      description: Encryption key details.
    Estimate:
      type: object
      properties:
        estimateId:
          type: string
          description: Estimate Id.
        time:
          type: integer
          description: Estimated time in seconds to run the optimization job.
          example: 60
        balance:
          type: integer
          description: The organization's QCC balance.
          example: 10
      description:
        Response received when estimating the time to run an optimization
        job.
    OptimizationTargetStatistic:
      type: string
      enum:
        - TotalPerformance.PortfolioStatistics.SharpeRatio
        - TotalPerformance.PortfolioStatistics.CompoundingAnnualReturn
        - TotalPerformance.PortfolioStatistics.ProbabilisticSharpeRatio
        - TotalPerformance.PortfolioStatistics.Drawdown
    OptimizationTargetTo:
      type: string
      enum:
        - min
        - max
    OptimizationStrategy:
      type: string
      enum:
        - QuantConnect.Optimizer.Strategies.GridSearchOptimizationStrategy
    EstimateOptimizationRequest:
      type: object
      required:
        - projectId
        - name
        - target
        - targetTo
        - strategy
        - parameters
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project to optimize.
        name:
          type: string
          example: Mia First Optimization Job
          description: Name of the optimization.
        target:
          $ref: "#/components/schemas/OptimizationTargetStatistic"
        targetTo:
          $ref: "#/components/schemas/OptimizationTargetTo"
        targetValue:
          type: number
          description: Desired value for the optimization target statistic.
          example: 1
        strategy:
          $ref: "#/components/schemas/OptimizationStrategy"
        compileId:
          type: string
          example: 5d1f2cba3a0ec7407c566614300502b5-173e0419674daf4144ce7c9931155ca8
          description: Optimization compile Id.
        parameters:
          type: array
          description: Optimization parameters.
          items:
            $ref: "#/components/schemas/OptimizationParameter"
        constraints:
          type: array
          description: Optimization constraints.
          items:
            $ref: "#/components/schemas/OptimizationConstraint"
      description: Request to estimate the cost of an optimization job.
    EstimateOptimizationResponse:
      type: object
      properties:
        estimate:
          $ref: "#/components/schemas/Estimate"
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received when estimating the cost of an optimization.
    GetObjectStoreJobIdRequest:
      type: object
      required:
        - organizationId
        - keys
      properties:
        organizationId:
          type: string
          example: 5cad178b20a1d52567b534553413b691
          description: Id of the organization that owns the Object Store.
        keys:
          type: array
          items:
            type: string
          example:
            - key1
            - key2
          description: Keys of the Object Store files.
      description: Request to create a download job for some Object Store files.
    GetObjectStoreURLRequest:
      type: object
      required:
        - organizationId
        - jobId
      properties:
        organizationId:
          type: string
          example: 5cad178b20a1d52567b534553413b691
          description: Id of the organization that owns the Object Store.
        jobId:
          type: string
          example: 2585354eb2e23cbbc4ba714332884650
          description: Id of the download job for the files.
      description: Request to get a download URL for some Object Store files.
    GetObjectStorePropertiesRequest:
      type: object
      required:
        - organizationId
        - key
      properties:
        organizationId:
          type: string
          example: 5cad178b20a1d52567b534553413b691
          description: Id of the organization that owns the Object Store.
        key:
          type: string
          example: key1
          description: Key in the Object Store.
      description:
        Request to get Object Store properties of a specific organization
        and key.
    GetObjectStoreResponse:
      type: object
      properties:
        jobId:
          type: string
          description: Id of the job, which you can use to request a download URL.
        url:
          type: string
          description:
            The URL to download the object. This can also be null. To download
            the object, paste the full URL (including the URL parameters) into a browser.
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received when fetching an Object Store file.
    GetObjectStorePropertiesResponse:
      type: object
      properties:
        metadata:
          $ref: "#/components/schemas/ObjectStoreProperties"
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received when fetching Object Store file properties.
    ObjectStoreProperties:
      type: object
      properties:
        key:
          type: string
          description: Object Store key.
        modified:
          type: string
          description: Last time it was modified.
          format: date-time
        created:
          type: string
          description: Date this project was created.
          format: date-time
        size:
          type: number
          description: Object Store file size.
          example: 24
        md5:
          type: string
          description: MD5 (hashing algorithm) hash authentication code.
        mime:
          type: string
          description: MIME type.
        preview:
          type: string
          description: Preview of the Object Store file content.
      description: Object Store file properties.
    Grid:
      type: object
      properties:
        xs:
          type: array
          description: List of chart in the xs (Extra small) position.
          items:
            $ref: "#/components/schemas/GridChart"
        sm:
          type: array
          description: List of chart in the sm (Small) position.
          items:
            $ref: "#/components/schemas/GridChart"
        md:
          type: array
          description: List of chart in the md (Medium) position.
          items:
            $ref: "#/components/schemas/GridChart"
        lg:
          type: array
          description: List of chart in the lg (Large) position.
          items:
            $ref: "#/components/schemas/GridChart"
        xl:
          type: array
          description: List of chart in the xl (Extra large) position.
          items:
            $ref: "#/components/schemas/GridChart"
      description: The grid arrangement of charts.
    GridChart:
      type: object
      properties:
        chartName:
          type: string
          description: The chart name.
        width:
          type: integer
          description: Width of the chart.
        height:
          type: integer
          description: Height of the chart.
        row:
          type: integer
          description: Number of rows of the chart.
        column:
          type: integer
          description: Number of columns of the chart.
        sort:
          type: integer
          description: Sort of the chart.
      description: The chart display properties.
    GroupOrderManager:
      type: object
      properties:
        id:
          type: integer
          description: The unique order group Id.
        quantity:
          type: number
          description: The group order quantity.
        count:
          type: integer
          description: The total order count associated with this order group.
        limitPrice:
          type: number
          description: The limit price associated with this order group if any.
        orderIds:
          type: array
          description: The order Ids in this group.
          items:
            type: integer
        direction:
          type: integer
          description: Order Direction Property based off Quantity.
      description: Manager of a group of orders.
    BrokerageHolding:
      type: object
      properties:
        symbolId:
          type: string
          description: Symbol Id of the holding.
          example: BTCUSD 2XR
        symbol:
          type: string
          description: Symbol ticker of the holding.
          example: BTCUSD
        quantity:
          type: number
          description: Quantity of the Symbol you hold.
          format: float
        averagePrice:
          type: number
          description:
            Average price of your Holding in the currency the symbol is
            traded in.
          format: float
      description: Holding object class for creating a live algorithm.
    Insight:
      type: object
      properties:
        id:
          type: string
          description: Id of the insight.
          example: 81ff7c1daf404ee39d612df321df5931
        groupId:
          type: string
          description: Id of the group of insights.
        sourceModel:
          type: string
          description: An identifier for the source model that generated this insight.
          example: 952d6ff7-e513-4971-aa50-cbe13bf56898
        generatedTime:
          type: integer
          format: unix-time
          description: Gets the Unix time this insight was generated.
          example: 1753714506
        closeTime:
          type: integer
          format: unix-time
          description: Gets the Unix time this insight was closed.
          example: 1753800906
        symbol:
          type: string
          description: Gets the symbol Id this insight is for.
          example: BTCUSD 2XR
        ticker:
          type: string
          description: Gets the symbol ticker this insight is for.
          example: BTCUSD
        type:
          type: string
          description: Gets the type of insight.
          enum:
            - price
            - volatility
        reference:
          type: number
          description:
            Gets the initial reference value this insight is predicting
            against. That is, the price of the asset when the insight was created.
          example: 118159.19
        referenceFinal:
          type: number
          description:
            Gets the final reference value, used for scoring, this insight
            is predicting against.
        direction:
          type: string
          description: Gets the predicted direction.
          enum:
            - down
            - flat
            - up
        period:
          type: integer
          description:
            Gets the period, in seconds, over which this insight is expected
            to come to fruition.
        magnitude:
          type: number
          description:
            Gets the predicted percent change in the insight type (price/volatility).
            This value can be null.
          format: float
        confidence:
          type: number
          description: Gets the confidence in this insight. This value can be null.
          format: float
        weight:
          type: number
          description:
            Gets the portfolio weight of this insight. This value can be
            null.
          format: float
        scoreFinal:
          type: boolean
          description: Gets whether or not this is the insight's final score.
        scoreDirection:
          type: number
          description: Gets the direction score.
        scoreMagnitude:
          type: number
          description: Gets the magnitude score.
        estimatedValue:
          type: number
          description: Gets the estimated value of this insight in the account currency.
        tag:
          type: string
          description: The insight's tag containing additional information.
      description: Insight struct for emitting new prediction.
    LeanVersionsResponse:
      type: object
      properties:
        versions:
          type: array
          description: List of LEAN versions with their basic descriptions.
          items:
            $ref: "#/components/schemas/LeanVersion"
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Contains the LEAN versions with their basic descriptions.
    LeanVersion:
      type: object
      properties:
        id:
          type: integer
          description: Id of the LEAN version.
        created:
          type: string
          description: Date when this version was created.
          format: date-time
        description:
          type: string
          description: Description of the LEAN version.
        leanHash:
          type: string
          description: Commit Hash in the LEAN repository.
        leanCloudHash:
          type: string
          description: Commit Hash in the LEAN Cloud repository.
        name:
          type: string
          description: Name of the branch where the commit is.
        ref:
          type: string
          description: Reference to the branch where the commit is.
        public:
          type: boolean
          description: Indicates if the version is available for the public.
    Library:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id of the library project.
        libraryName:
          type: string
          description: Name of the library project.
        ownerName:
          type: string
          description: Name of the library project owner.
        access:
          type: boolean
          description: Indicate if the library project can be accessed.
    LiveAlgorithm:
      type: object
      properties:
        message:
          type: string
          description: Error message.
        deployId:
          type: string
          example: L-sdf86b7045bb83203e79d2aa6150b321
          description:
            Unique live algorithm deployment identifier (similar to a backtest
            id).
        status:
          type: string
          description: State of the live deployment.
          enum:
            - DeployError
            - InQueue
            - Running
            - Stopped
            - Liquidated
            - Deleted
            - Completed
            - RuntimeError
            - Invalid
            - LoggingIn
            - Initializing
            - History
        cloneId:
          type: integer
          description:
            The snapshot project Id for cloning the live development's
            source code.
        launched:
          type: string
          description: Datetime the algorithm was launched in UTC.
          format: date-time
        stopped:
          type: string
          description:
            Datetime the algorithm was stopped in UTC, null if its still
            running.
          format: date-time
        brokerage:
          type: string
          description: Brokerage
        securityTypes:
          type: string
          description: Security types detected in the algorithm.
        datacenter:
          type: string
          description: Name of the datacenter where the algorithm is physically located.
          example: NY7
        isPublicStreaming:
          type: boolean
          description: Flag to indicate if public streaming is enabled.
        public:
          type: boolean
          description: Flag to indicate if the algorithm is public.
        files:
          type: array
          description: Files present in the project that contains the algorithm.
          items:
            $ref: "#/components/schemas/ProjectFile"
        runtimeStatistics:
          $ref: "#/components/schemas/RuntimeStatistics"
        charts:
          $ref: "#/components/schemas/ChartSummary"
      description: Live algorithm instance result from the QuantConnect Rest API.
    LiveAuthenticationData:
      type: object
      description:
        Authentication details of the live brokerage. Details on each brokerage
        refers to https://www.quantconnect.com/docs/v2/lean-cli/api-reference/lean-cloud-live-deploy.
    LiveForm:
      type: object
      properties:
        brokerageData:
          $ref: "#/components/schemas/BrokerageData"
        dataProvidersData:
          type: array
          description: The data providers used in the live deployment.
          items:
            $ref: "#/components/schemas/BrokerageId"
        node:
          type: string
          description: Node ID of the live node deployed.
        notifyInsights:
          type: string
          description: Indicates if notification should be issued on new insights.
          enum:
            - "true"
            - "false"
        notifyOrderEvents:
          type: string
          description: Indicates if notification should be issued on new order events.
          enum:
            - "true"
            - "false"
        autoRestart:
          type: string
          description:
            Indicates if the live algorithm should automatically restart
            after encountering runtime errors.
          enum:
            - "true"
            - "false"
      description: The live wizard content used.
    LiveAlgorithmResults:
      type: object
      properties:
        message:
          type: string
          description: Error message.
        deployId:
          type: string
          example: L-sdf86b7045bb83203e79d2aa6150b321
          description:
            Unique live algorithm deployment identifier (similar to a backtest
            id).
        status:
          type: string
          description: State of the live deployment.
          enum:
            - DeployError
            - InQueue
            - Running
            - Stopped
            - Liquidated
            - Deleted
            - Completed
            - RuntimeError
            - Invalid
            - LoggingIn
            - Initializing
            - History
        cloneId:
          type: integer
          description:
            The snapshot project Id for cloning the live development's
            source code.
        launched:
          type: string
          description: Datetime the algorithm was launched in UTC.
          format: date-time
        stopped:
          type: string
          description:
            Datetime the algorithm was stopped in UTC, null if its still
            running.
          format: date-time
        brokerage:
          type: string
          description: Brokerage
        securityTypes:
          type: string
          description: Security types detected in the algorithm.
        datacenter:
          type: string
          description: Name of the datacenter where the algorithm is physically located.
          example: NY7
        isPublicStreaming:
          type: boolean
          description: Flag to indicate if public streaming is enabled.
        public:
          type: boolean
          description: Flag to indicate if the algorithm is public.
        files:
          type: array
          description: Files present in the project that contains the algorithm.
          items:
            $ref: "#/components/schemas/ProjectFile"
        runtimeStatistics:
          $ref: "#/components/schemas/RuntimeStatistics"
        charts:
          $ref: "#/components/schemas/ChartSummary"
        projectName:
          type: string
          description: Name of the project the live algorithm is in.
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Details a live algorithm from the live/read API endpoint.
    LiveAlgorithmListResponse:
      type: object
      properties:
        live:
          type: array
          description: Live algorithms that pass the filters in the request.
          items:
            $ref: "#/components/schemas/LiveAlgorithmSummary"
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: List of the live algorithms running which match the requested status.
    LiveAlgorithmSummary:
      type: object
      properties:
        projectId:
          type: integer
          description: Id of the project.
        deployId:
          type: string
          description: Id of the live deployment.
        status:
          type: string
          description: The current status of the deployment.
        launched:
          type: string
          format: date-time
          description: The date and time when the deployment was launched.
        stopped:
          type: string
          format: date-time
          description: The date and time when the deployment was stopped.
        brokerage:
          type: string
          description: The brokerage used for the deployment.
        subscription:
          type: string
          description: The chart to which you're subscribed.
        equity:
          type: number
          minimum: 0
          description: The equity value associated with the deployment.
        environment:
          type: string
          description: The environment in which the deployment is running.
        description:
          type: string
          description: The project description.
        error:
          type: string
          description: The error message if there was a runtime error.
        leagues:
          type: array
          items:
            type: string
          description: Quant Leagues the algorithm is enrolled in.
      description: Summary of the live algorithm.
    LiquidateLiveAlgorithmRequest:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id for the live instance to liquidate.
      description: Request to liquidate a live algorithm.
    ListObjectStoreRequest:
      type: object
      required:
        - organizationId
      properties:
        organizationId:
          type: string
          example: 5cad178b20a1d52567b534553413b691
          description: Id of the organization to list the Object Store files from.
        path:
          type: string
          example: folder1/models
          description: Path to a directory in the Object Store.
      description:
        Request to list the Object Store files under a specific directory
        in an organization.
    ListObjectStoreResponse:
      type: object
      properties:
        path:
          type: string
          description: Path to the directory in the Object Store.
          example: Mia
        objects:
          type: array
          description:
            List of directories and files stored in the directory at the
            given path. If the path contains directories, this list of objects doesn't
            contain the children of those directories.
          items:
            $ref: "#/components/schemas/ObjectStoreSummary"
        page:
          type: integer
          description: The current page number in the paginated response.
        totalPages:
          type: integer
          description: The total number of pages in the paginated response.
        objectStorageUsed:
          type: integer
          description: Size of all objects stored in bytes.
        objectStorageUsedHuman:
          type: string
          description: Size of all the objects stored in human-readable format.
          example: 2.27 GB
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description:
        Response received containing a list of stored objects metadata,
        as well as the total size of all of them.
    ListOptimizationRequest:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the Project to get a list of optimizations for.
      description: Id of the Project to get a list of optimizations for.
    ListOptimizationResponse:
      type: object
      properties:
        optimizations:
          type: array
          description: Collection of summarized optimization objects.
          items:
            $ref: "#/components/schemas/CreateOptimizationResponse"
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description:
        Response received when creating an optimization or listing optimizations
        of a project.
    LivePortfolioResponse:
      type: object
      properties:
        portfolio:
          $ref: "#/components/schemas/Portfolio"
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description:
        Contains holdings and cash of the live algorithm in the request
        criteria.
    LiveOrdersResponse:
      type: object
      properties:
        orders:
          type: array
          description: Collection of orders.
          items:
            $ref: "#/components/schemas/Order"
        length:
          type: integer
          description: Total number of returned orders
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description:
        Contains orders and the number of orders of the live algorithm
        in the request criteria.
    LiveInsightsResponse:
      type: object
      properties:
        insights:
          type: array
          description: Collection of insights.
          items:
            $ref: "#/components/schemas/Insight"
        length:
          type: integer
          description: Total number of returned insights
        success:
          type: boolean
          description: Indicate if the API request was successful.
      description:
        Contains insights and the number of insights of the live algorithm
        in the request criteria.
    LoadingResponse:
      type: object
      properties:
        progress:
          type: number
          description: Loading percentage of the data generation process.
        status:
          type: string
          description: Status of the data generation process.
          enum:
            - loading
        success:
          type: boolean
          description: Indicate if the API request was successful.
      description: Response when the requested chart or orders are being generated.
    Market:
      type: string
      description: Fungible market of the underlying security.
      enum:
        - usa
        - oanda
        - fxcm
        - dukascopy
        - bitfinex
        - cmeglobex
        - nymex
        - cbot
        - ice
        - cboe
        - nse
        - comex
        - cme
        - sgx
        - hkfe
        - coinbase
        - kraken
        - bitstamp
        - okcoin
        - bithumb
        - binance
        - poloniex
        - coinone
        - hitbtc
        - bittrex
    Node:
      type: object
      properties:
        speed:
          type: number
          description: The nodes cpu clock speed in GHz.
        price:
          $ref: "#/components/schemas/NodePrices"
        cpu:
          type: integer
          description: CPU core count of node.
        ram:
          type: number
          description: Size of RAM in Gigabytes.
        name:
          type: string
          description: Name of the node.
        sku:
          type: string
          description: Node type identifier for configuration.
        description:
          type: string
          description: Description of the node.
        usedBy:
          type: string
          description: User currently using the node.
        userProfile:
          type: string
          description: URL of the user using the node.
        projectName:
          type: string
          description: Project the node is being used for.
        projectId:
          type: integer
          example: 23456789
          description: Id of the project the node is being used for.
        busy:
          type: boolean
          description: Indicates if the node is currently busy.
        id:
          type: string
          description: Full Id of node.
        assets:
          type: integer
          description: Maximum number of assets recommended for this node.
        host:
          type: string
          description: Node host.
        active:
          type: boolean
          description:
            Indicate if this is an active node for the project. The project
            will use this node if it's not busy.
        hasGpu:
          type: integer
          description: Indicate if the node has GPU (1) or not (0).
      description:
        Contains all relevant information on a Node to interact through
        API endpoints.
    ObjectStoreBinaryFile:
      type: object
      required:
        - organizationId
        - key
        - objectData
      properties:
        organizationId:
          type: string
          example: 5cad178b20a1d52567b534553413b691
          description: Orgainization ID.
        key:
          type: string
          example: key1
          description: Unique key to access the object in Object Store.
        objectData:
          type: string
          format: binary
          description: Object data to be stored.
      description:
        Represents a binary file we we'd like to upload the file to upload
        to the Object Store.
    ObjectStoreSummary:
      type: object
      properties:
        key:
          type: string
          description: Object Store key.
          example: Mia/Test
        name:
          type: string
          description: File or folder name.
        modified:
          type: string
          description: Last time it was modified.
          format: date-time
        mime:
          type: string
          description: MIME type.
          example: application/json
        folder:
          type: boolean
          description: True if it is a folder, false otherwise.
        size:
          type: number
          description: Object Store file size.
          example: 13
      description: Summary information of the Object Store.
    OptimizationConstraint:
      type: object
      required:
        - target
        - operator
        - targetValue
      properties:
        target:
          $ref: "#/components/schemas/OptimizationTargetStatistic"
        operator:
          type: string
          description: The target comparison operation.
          enum:
            - LessOrEqual
            - Less
            - GreaterOrEqual
            - Greater
            - NotEqual
            - Equals
        targetValue:
          type: number
          description: The threshold value for the target constraint.
          example: 1
      description:
        Backtests in the optimization job that don't respect this constraint
        are excluded from the optimization result.
    OptimizationParameter:
      type: object
      required:
        - name
        - min
        - max
        - step
      properties:
        name:
          type: string
          description: Name of optimization parameter.
          example: rsi_period
        min:
          type: number
          description:
            Minimum value of optimization parameter, applicable for boundary
            conditions.
          example: 10
        max:
          type: number
          description:
            Maximum value of optimization parameter, applicable for boundary
            conditions.
          example: 20
        step:
          type: number
          description: Movement, should be positive.
          example: 1
        minStep:
          type: number
          description:
            Minimal possible movement for current parameter, should be
            positive. Used by <code>Strategies.EulerSearchOptimizationStrategy</code>
            to determine when this parameter can no longer be optimized.
          example: 1
    OptimizationTarget:
      type: object
      properties:
        target:
          $ref: "#/components/schemas/OptimizationTargetStatistic"
        extremum:
          $ref: "#/components/schemas/OptimizationTargetTo"
        targetValue:
          type: number
          description: Desired value for the optimization target statistic.
          example: 1
    ProjectNodes:
      type: object
      properties:
        backtest:
          type: array
          description: Collection of backtest nodes.
          items:
            $ref: "#/components/schemas/Node"
        live:
          type: array
          description: Collection of live nodes.
          items:
            $ref: "#/components/schemas/Node"
        research:
          type: array
          description: Collection of research nodes.
          items:
            $ref: "#/components/schemas/Node"
      description: Contains sets of node lists for each target environment.
    NodePrices:
      type: object
      properties:
        monthly:
          type: integer
          description: The monthly price of the node in US dollars.
        yearly:
          type: integer
          description: The yearly price of the node in US dollars.
      description: Node prices from node object.
    OptimizationNodeType:
      type: string
      description: Optimization node types available in QuantConnect Cloud.
      enum:
        - O2-8
        - O4-12
        - O8-16
    OptimizationStatus:
      description: Status of the optimization job.
      enum:
        - new
        - aborted
        - running
        - completed
    OptimizationRuntimeStatistics:
      type: object
      properties:
        Completed:
          type: string
          description: Number of completed backtests in the optimization job.
        Failed:
          type: string
          description: Number of failed backtests in the optimization job.
        Running:
          type: string
          description: Number of running backtests in the optimization job.
        In Queue:
          type: string
          description: Number of backtests waiting in-queue in the optimization job.
        Average Length:
          type: string
          format: time
          description: The average time of each backtest in the optimization job (HH:MM:SS).
        Total Runtime:
          type: string
          format: time
          description: The total runtime of the optimization (HH:MM:SS).
        Total:
          type: string
          description: Number of backtests in the optimization job.
        Consumed:
          type: string
          description:
            Amount of QuantConnect Credit consumed by the optimization
            job.
    Optimization:
      type: object
      required:
        - projectId
      properties:
        optimizationId:
          type: string
          example: O-401d3d40b5a0e9f8c46c954a303f3ddd
          description: Id of the optimization.
        snapshotId:
          type: integer
          description: Snapshot Id of this optimization.
          example: 24013333
        projectId:
          type: integer
          example: 23456789
          description: Id of the project the optimization belongs to.
        name:
          type: string
          description: Name of the optimization.
        status:
          $ref: "#/components/schemas/OptimizationStatus"
        nodeType:
          $ref: "#/components/schemas/OptimizationNodeType"
        parallelNodes:
          type: integer
          description: Number of parallel nodes for the optimization.
          example: 4
        criterion:
          $ref: "#/components/schemas/OptimizationTarget"
        runtimeStatistics:
          $ref: "#/components/schemas/OptimizationRuntimeStatistics"
        constraints:
          type: array
          description: Optimization constraints.
          items:
            $ref: "#/components/schemas/OptimizationConstraint"
        parameters:
          type: array
          description: Optimization parameters.
          items:
            $ref: "#/components/schemas/OptimizationParameter"
        backtests:
          type: object
          description: Dictionary of optimization backtests.
          additionalProperties:
            $ref: "#/components/schemas/OptimizationBacktest"
        strategy:
          $ref: "#/components/schemas/OptimizationStrategy"
        requested:
          type: string
          description: Optimization requested date and time.
          format: date-time
        optimizationTarget:
          $ref: "#/components/schemas/OptimizationTargetStatistic"
        targetValue:
          type: number
          description: Desired value for the optimization target statistic.
          example: 1
        gridLayout:
          type: array
          description: List with grid charts representing the grid layout.
          items:
            $ref: "#/components/schemas/GridChart"
        outOfSampleMaxEndDate:
          type: string
          description: End date of out of sample data.
          format: date-time
        outOfSampleDays:
          type: integer
          description: Number of days of out of sample days.
      description: Response received when reading an optimization job.
    OptimizationBacktest:
      type: object
      properties:
        name:
          type: string
          description: The backtest name.
        id:
          type: string
          description: Id of the backtest.
        progress:
          type: number
          description:
            Progress of the backtest as a percentage from 0-1 based on
            the days lapsed from start-finish.
        exitCode:
          type: integer
          description: The exit code of this backtest.
        statistics:
          type: array
          description:
            The backtest statistics results. [alpha, annual standard deviation,
            annual variance, average loss (%), average win (%), beta, compounding
            annual return (%), drawdown (%), estimated strategy capacity, expectancy,
            information ratio, loss rate (%), net profit (%), probabilistic sharpe
            ratio, profit-loss ratio, sharpe ratio, total fees, total orders, tracking
            error, treynor ratio, win rate (%)]
          items:
            type: number
        parameterSet:
          $ref: "#/components/schemas/ParameterSet"
        equity:
          type: array
          description: The backtest equity chart series.
          items:
            type: array
            description: Time and OHLC values.
            items:
              type: object
        startDate:
          type: string
          description: The backtest start date.
          format: date-time
        endDate:
          type: string
          description: The backtest end date.
          format: date-time
        outOfSampleDays:
          type: integer
          description: The backtest out-of-sample day count.
        outOfSampleMaxEndDate:
          type: string
          format: date-time
          description: End date of out-of-sample data.
    Order:
      type: object
      properties:
        id:
          type: integer
          description: Order ID.
        contingentId:
          type: integer
          description: Order Id to process before processing this order.
        brokerId:
          type: array
          description:
            Brokerage Id for this order for when the brokerage splits orders
            into multiple pieces.
          items:
            type: string
        symbol:
          $ref: "#/components/schemas/Symbol"
        limitPrice:
          type: number
          description: Limit price of the Order.
        stopPrice:
          type: number
          description: Stop price of the Order.
        stopTriggered:
          type: boolean
          description:
            Indicates if the stop price has been reached, so the limit
            order has been triggered.
        price:
          type: number
          description: Price of the Order.
          format: float
        priceCurrency:
          type: string
          description: Currency for the order price.
        time:
          type: string
          description: Gets the UTC time the order was created.
          format: date-time
        createdTime:
          type: string
          description: Gets the UTC time this order was created. Alias for Time.
          format: date-time
        lastFillTime:
          type: string
          description:
            Gets the UTC time the last fill was received, or null if no
            fills have been received.
          format: date-time
        lastUpdateTime:
          type: string
          description:
            Gets the UTC time this order was last updated, or null if the
            order has not been updated.
          format: date-time
        canceledTime:
          type: string
          description:
            Gets the UTC time this order was canceled, or null if the order
            was not canceled.
          format: date-time
        quantity:
          type: number
          description: Number of shares to execute.
          format: float
        type:
          type: integer
          description:
            Order type. 0=Market, 1=Limit, 2=StopMarket, 3=StopLimit, 4=MarketOnOpen,
            5=MarketOnClose, 6=OptionExercise, 7=LimitIfTouched, 8=ComboMarket, 9=ComboLimit,
            10=ComboLegLimit, 11=TrailingStop.
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
            - 8
            - 9
            - 10
            - 11
        status:
          type: integer
          description:
            Status of the Order. 0=New, 1=Submitted, 2=PartiallyFilled,
            3=Filled, 5=Canceled, 6=None, 7=Invalid, 8=CancelPending, 9=UpdateSubmitted.
          enum:
            - 0
            - 1
            - 2
            - 3
            - 5
            - 6
            - 7
            - 8
            - 9
        tag:
          type: string
          description: Tag the order with some custom data.
        securityType:
          type: integer
          description:
            Type of tradable security / underlying asset. 0=Base, 1=Equity,
            2=Option, 3=Commodity, 4=Forex, 5=Future, 6=Cfd, 7=Crypto, 8=FutureOption,
            9=Index, 10=IndexOption, 11=CryptoFuture.
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
            - 8
            - 9
            - 10
            - 11
        direction:
          type: integer
          description:
            Order Direction Property based off Quantity. 0=Buy, 1=Sell,
            2=Hold.
          enum:
            - 0
            - 1
            - 2
        value:
          type: number
          description:
            Gets the executed value of this order. If the order has not
            yet filled, then this will return zero.
          format: float
        orderSubmissionData:
          $ref: "#/components/schemas/OrderSubmissionData"
        isMarketable:
          type: boolean
          description: Returns true if the order is a marketable order.
        properties:
          $ref: "#/components/schemas/OrderProperties"
        events:
          type: array
          description: The order events.
          items:
            $ref: "#/components/schemas/OrderEvent"
        trailingAmount:
          type: number
          description: Trailing amount for a trailing stop order.
        trailingPercentage:
          type: boolean
          description:
            Determines whether the trailingAmount is a percentage or an
            absolute currency value.
        groupOrderManager:
          $ref: "#/components/schemas/GroupOrderManager"
        triggerPrice:
          type: number
          description:
            The price which, when touched, will trigger the setting of
            a limit order at limitPrice.
        triggerTouched:
          type: boolean
          description: Whether or not the triggerPrice has been touched.
      description: Order struct for placing new trade.
    OrderProperties:
      type: object
      properties:
        timeInForce:
          type: object
          description:
            Defines the length of time over which an order will continue
            working before it is cancelled.
      description: Additional properties of the order
    OrderDirection:
      type: string
      description: Direction of the order.
      enum:
        - buy
        - sell
        - hold
    OrderEvent:
      type: object
      properties:
        algorithmId:
          type: string
          description: Algorithm Id, BacktestId or DeployId.
        symbol:
          type: string
          description: Easy access to the order symbol associated with this event.
        symbolValue:
          type: string
          description:
            The current symbol for this ticker; It is a user friendly symbol
            representation.
        symbolPermtick:
          type: string
          description: The original symbol used to generate this symbol.
        orderId:
          type: integer
          description: Id of the order this event comes from.
        orderEventId:
          type: integer
          description: The unique order event id for each order.
        id:
          type: string
          description: The unique order event Id for each order.
        status:
          type: string
          description: Status of the Order.
          enum:
            - new
            - submitted
            - partiallyFilled
            - filled
            - canceled
            - none
            - invalid
            - cancelPending
            - updateSubmitted
        orderFeeAmount:
          type: number
          description: The fee amount associated with the order.
        orderFeeCurrency:
          type: string
          description: The fee currency associated with the order.
        fillPrice:
          type: number
          description: Fill price information about the order.
          format: float
        fillPriceCurrency:
          type: string
          description: Currency for the fill price.
        fillQuantity:
          type: number
          description: Number of shares of the order that was filled in this event.
          format: float
        direction:
          $ref: "#/components/schemas/OrderDirection"
        message:
          type: string
          description: Any message from the exchange.
        isAssignment:
          type: boolean
          description: True if the order event is an assignment.
        stopPrice:
          type: number
          description: The current stop price.
          format: float
        limitPrice:
          type: number
          description: The current limit price.
          format: float
        quantity:
          type: number
          description: The current order quantity.
          format: float
        time:
          type: number
          description: The time of this event in unix timestamp.
        isInTheMoney:
          type: boolean
          description: True if the order event's option is In-The-Money (ITM).
      description: Change in an order state applied to user algorithm portfolio
    OrderSubmissionData:
      type: object
      properties:
        bidPrice:
          type: number
          description: The bid price at order submission time.
          format: float
        askPrice:
          type: number
          description: The ask price at order submission time.
          format: float
        lastPrice:
          type: number
          description: The current price at order submission time.
          format: float
      description:
        Stores time and price information available at the time an order
        was submitted.
    ParameterSet:
      oneOf:
        - type: array
          items:
            oneOf:
              - type: string
              - type: number
              - type: integer
        - type: object
          additionalProperties:
            oneOf:
              - type: string
              - type: number
              - type: integer
    Portfolio:
      type: object
      properties:
        holdings:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Holding"
          description:
            Dictionary of algorithm holdings information, where the key
            is the Symbol Id.
        cash:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Cash"
          description:
            Dictionary of algorithm cash currencies information, where
            the key is the currency ticker.
      description: Portfolio object with the holdings and cash information.
    Holding:
      type: object
      properties:
        a:
          type: number
          description:
            Average purchase price of the holding in the currency it trades
            in.
        q:
          type: number
          description: Quantity of the asset.
        p:
          type: number
          description:
            Current market price of the asset in the currency it trades
            in.
        v:
          type: number
          description: Current market value of the holding.
        u:
          type: number
          description: Unrealized profit/loss of the position.
        up:
          type: number
          description: Unrealized profit/loss percentage of the position.
      description: Summary of asset holding.
    Project:
      type: object
      required:
        - projectId
        - organizationId
        - name
        - modified
        - created
        - ownerId
        - language
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project id.
        organizationId:
          type: string
          example: 5cad178b20a1d52567b534553413b691
          description: Orgainization id.
        name:
          type: string
          description: Name of the project.
        modified:
          type: string
          description: Modified date for the project.
          format: date-time
        created:
          type: string
          description: Date the project was created.
          format: date-time
        ownerId:
          type: integer
          description: Owner id.
        language:
          type: string
          description: Programming language of the project.
          enum:
            - C#
            - Py
        collaborators:
          type: array
          description: List of collaborators.
          items:
            $ref: "#/components/schemas/Collaborator"
        leanVersionId:
          type: integer
          description: The version of LEAN this project is running on.
        leanPinnedToMaster:
          type: boolean
          description: Indicate if the project is pinned to the master branch of LEAN.
        owner:
          type: boolean
          description: Indicate if you are the owner of the project.
        description:
          type: string
          description: The project description.
        channelId:
          type: string
          description: Channel id.
        parameters:
          $ref: "#/components/schemas/ParameterSet"
        libraries:
          type: array
          description: The library projects.
          items:
            $ref: "#/components/schemas/Library"
        grid:
          $ref: "#/components/schemas/Grid"
        liveGrid:
          $ref: "#/components/schemas/Grid"
        paperEquity:
          type: number
          description: The equity value of the last paper trading instance.
          format: float
        lastLiveDeployment:
          type: string
          description: The last live deployment active time.
          format: date-time
        liveForm:
          $ref: "#/components/schemas/LiveForm"
        encrypted:
          type: boolean
          description: Indicates if the project is encrypted.
        codeRunning:
          type: boolean
          description: Indicates if the project is running or not.
        leanEnvironment:
          type: integer
          description: LEAN environment of the project running on.
        encryptionKey:
          $ref: "#/components/schemas/EncryptionKey"
      description: Response from reading a project by id.
    ProjectFile:
      type: object
      properties:
        id:
          type: integer
          description: ID of the project file. This can also be null.
        projectId:
          type: integer
          example: 23456789
          description: ID of the project.
        name:
          type: string
          description: Name of a project file.
        content:
          type: string
          description: Contents of the project file.
        modified:
          type: string
          description: DateTime project file was modified.
          format: date-time
        open:
          type: boolean
          description: Indicates if the project file is open or not.
        isLibrary:
          type: boolean
          description:
            Indicates if the project file is a library or not. It's always
            false in live/read and backtest/read.
      description: File for a project.
    ProjectFilesResponse:
      type: object
      properties:
        files:
          type: array
          description: List of project file information.
          items:
            $ref: "#/components/schemas/ProjectFile"
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received when creating or reading project files.
    File:
      type: object
      properties:
        name:
          type: string
          description: Name of a file.
          example: main.py
        content:
          type: string
          description: Contents of the file.
      description: File for a AI.
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Error message.
        stacktrace:
          type: string
          description: Stack trace of the error.
      description: Error information.
    ProjectListResponse:
      type: object
      properties:
        projects:
          type: array
          description: List of projects for the authenticated user.
          items:
            $ref: "#/components/schemas/Project"
        versions:
          type: array
          description: List of LEAN versions.
          items:
            $ref: "#/components/schemas/LeanVersion"
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Project list response.
    ProjectNodesResponse:
      type: object
      properties:
        nodes:
          $ref: "#/components/schemas/ProjectNodes"
        autoSelectNode:
          type: boolean
          description: Indicate if the best-performing node is automatically selected.
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received when reading all nodes of a project.
    PortfolioStatistics:
      type: object
      properties:
        averageWinRate:
          type: number
          description: The average rate of return for winning trades.
          format: float
        averageLossRate:
          type: number
          description: The average rate of return for losing trades.
          format: float
        profitLossRatio:
          type: number
          description: The ratio of the average win rate to the average loss rate.
          format: float
        winRate:
          type: number
          description:
            The ratio of the number of winning trades to the total number
            of trades.
          format: float
        lossRate:
          type: number
          description:
            The ratio of the number of losing trades to the total number
            of trades.
          format: float
        expectancy:
          type: number
          description: The expected value of the rate of return.
          format: float
        startEquity:
          type: number
          description: Initial Equity Total Value.
          format: float
        endEquity:
          type: number
          description: Final Equity Total Value
          format: float
        compoundingAnnualReturn:
          type: number
          description:
            Annual compounded returns statistic based on the final-starting
            capital and years.
          format: float
        drawdown:
          type: number
          description: Drawdown maximum percentage.
          format: float
        totalNetProfit:
          type: number
          description: The total net profit percentage.
          format: float
        sharpeRatio:
          type: number
          description:
            "Sharpe ratio with respect to risk free rate: measures excess
            of return per unit of risk."
          format: float
        probabilisticSharpeRatio:
          type: number
          description:
            Probabilistic Sharpe Ratio is a probability measure associated
            with the Sharpe ratio. It informs us of the probability that the estimated
            Sharpe ratio is greater than a chosen benchmark.
          format: float
        sortinoRatio:
          type: number
          description:
            Sortino ratio with respect to risk free rate; measures excess
            of return per unit of downside risk.
          format: float
        alpha:
          type: number
          description:
            Algorithm 'Alpha' statistic - abnormal returns over the risk
            free rate and the relationshio (beta) with the benchmark returns.
          format: float
        beta:
          type: number
          description:
            Algorithm beta statistic - the covariance between the algorithm
            and benchmark performance, divided by benchmark variance.
          format: float
        annualStandardDeviation:
          type: number
          description: Annualized standard deviation
          format: float
        annualVariance:
          type: number
          description:
            Annualized variance statistic calculation using the daily performance
            variance and trading days per year.
          format: float
        informationRatio:
          type: number
          description: Information ratio - risk adjusted return.
          format: float
        trackingError:
          type: number
          description:
            Tracking error volatility (TEV) statistic - a measure of how
            closely a portfolio follows the index to which it is benchmarked.
          format: float
        treynorRatio:
          type: number
          description:
            Treynor ratio statistic is a measurement of the returns earned
            in excess of that which could have been earned on an investment that has
            no diversifiable risk.
          format: float
        portfolioTurnover:
          type: number
          description: The average Portfolio Turnover.
          format: float
        valueAtRisk99:
          type: number
          description:
            The 1-day VaR for the portfolio, using the Variance-covariance
            approach. Assumes a 99% confidence level, 1 year lookback period, and
            that the returns are normally distributed.
          format: float
        valueAtRisk95:
          type: number
          description:
            The 1-day VaR for the portfolio, using the Variance-covariance
            approach. Assumes a 95% confidence level, 1 year lookback period, and
            that the returns are normally distributed.
      description:
        Represents a set of statistics calculated from equity and benchmark
        samples.
    ReadFilesRequest:
      required:
        - projectId
      type: object
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project that contains the file.
        name:
          type: string
          example: file.py
          description: The name of the file to read.
        codeSourceId:
          type: string
          example: MCP Server
          description: Name of the environment that's creating the request.
      description:
        Request to read all files from a project or just one (if the name
        is provided).
    ReadCompileRequest:
      type: object
      required:
        - projectId
        - compileId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project you requested to compile.
        compileId:
          type: string
          example: 5d1f2cba3a0ec7407c566614300502b5-173e0419674daf4144ce7c9931155ca8
          description: Compile Id returned during the creation request.
      description: Request to read a compile packet job.
    ReadLiveLogsRequest:
      type: object
      required:
        - projectId
        - algorithmId
        - startLine
        - endLine
      properties:
        format:
          description: Format of the log results.
          example: json
        projectId:
          type: integer
          example: 23456789
          description: Id of the project that contains the live running algorithm.
        algorithmId:
          type: string
          description: Deploy Id (Algorithm Id) of the live running algorithm.
          example: L-6e9d8a78f5af89d401f630585be90e43
        startLine:
          type: integer
          description:
            Start line (inclusive) of logs to read. The lines numbers start
            at 0.
        endLine:
          type: integer
          description:
            End line (exclusive) of logs to read, where endLine - startLine
            <= 250.
        deploymentLogs:
          type: boolean
          description:
            Indicates if only the given deployment logs should be included
            in the response.
      description: Request to read the logs of a specific algorithm.
    ReadLiveLogsResponse:
      type: object
      properties:
        logs:
          type: array
          description: List of logs from the live algorithm.
          items:
            type: string
        length:
          type: integer
          description:
            Total amount of rows in the logs across all live deployments
            for this project.
        deploymentOffset:
          type: integer
          description:
            Number of log rows before the given deployment (the `algorithmId`
            in the request).
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Logs from a live algorithm.
    ReadProjectRequest:
      type: object
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project to read.
        start:
          type: integer
          example: 0
          default: 0
          description:
            Starting (inclusive, zero-based) index of the projects to fetch.
            If you provide this property, omit the project Id property.
        end:
          type: integer
          example: 100
          description:
            Last (exlusive) index of the projects to fetch. If you provide
            this property, omit the project Id property.
      description:
        Request to get details about a specific project or a subset of
        your projects.
    ReadProjectNodesRequest:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project to which the nodes refer.
      description:
        Request to get details about the nodes in your organization, including
        which nodes may be used by the project.
    ReadLiveAlgorithmRequest:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project to read.
      description: Request to read out a live algorithm.
    ReadLivePortfolioRequest:
      required:
        - projectId
      type: object
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project from which to read the live algorithm.
      description: Request to read the portfolio state from a live algorithm.
    ReadLiveOrdersRequest:
      required:
        - start
        - end
        - projectId
      type: object
      properties:
        algorithmId:
          type: string
          description: Deploy Id (Algorithm Id) of the live running algorithm.
          example: L-6e9d8a78f5af89d401f630585be90e43
        start:
          type: integer
          example: 0
          description: Starting index of the orders to be fetched.
        end:
          type: integer
          example: 100
          description:
            Last index of the orders to be fetched. Note that end - start
            must be <= 1,000.
        projectId:
          type: integer
          example: 23456789
          description: Id of the project from which to read the live algorithm.
      description: Request to read orders from a live algorithm.
    ReadLiveInsightsRequest:
      required:
        - end
        - projectId
      type: object
      properties:
        algorithmId:
          type: string
          description: Deploy Id (Algorithm Id) of the live running algorithm.
          example: L-6e9d8a78f5af89d401f630585be90e43
        start:
          type: integer
          example: 0
          description:
            Starting index of the insights to be fetched. Required if end
            > 100.
        end:
          type: integer
          example: 100
          description:
            Last index of the insights to be fetched. Note that end - start
            must be less than 100.
        projectId:
          type: integer
          example: 23456789
          description: Id of the project from which to read the live algorithm.
      description: Request to read insights from a live algorithm.
    ListLiveAlgorithmsRequest:
      type: object
      properties:
        projectId:
          type: integer
          example: 23456789
          description:
            Id of the project to include in response. If you omit this
            property, the response includes all your projects.
        status:
          type: string
          description:
            Status of the live deployments to include in the response.
            If you omit this property, the response includes deployments with any
            status.
          enum:
            - Running
            - Stopped
            - RuntimeError
            - Liquidated
      description: Request for a list of past and present live deployments.
    ReadBacktestRequest:
      required:
        - projectId
        - backtestId
      type: object
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project that contains the backtest.
        backtestId:
          type: string
          example: 26c7bb06b8487cff1c7b3c44652b30f1
          description: Id of the backtest to read.
      description: Request to read a single backtest from a project.
    ListBacktestRequest:
      required:
        - projectId
      type: object
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project from which to read one or multiple backtests.
        includeStatistics:
          type: boolean
          example: true
          default: false
          description:
            If true, the backtests summaries from the response will contain
            the statistics with their corresponding values.
      description: Request to list the backtests from a project.
    ReadBacktestChartRequest:
      type: object
      required:
        - projectId
        - backtestId
        - name
        - count
        - start
        - end
      properties:
        projectId:
          type: integer
          description: Id of the project that contains the backtest.
          example: 12345678
        backtestId:
          type: string
          description: Id of the backtest for this chart request.
          example: 2a748c241eb93b0b57b4747b3dacc80e
        name:
          type: string
          description: The requested chart name.
          example: Strategy Equity
        count:
          type: integer
          description: The number of data points to request.
          example: 100
        start:
          type: integer
          description: The start timestamp of the request in Unix time.
          example: 1717801200
        end:
          type: integer
          description: The end timestamp of the request in Unix time.
          example: 1743462000
      description: Request body to obtain a chart from a backtest.
    ReadBacktestOrdersRequest:
      required:
        - start
        - end
        - projectId
        - backtestId
      type: object
      properties:
        start:
          type: integer
          example: 0
          description: Starting index of the orders to be fetched.
        end:
          type: integer
          example: 100
          description:
            Last index of the orders to be fetched. Note that end - start
            must be less than 100.
        projectId:
          type: integer
          example: 23456789
          description: Id of the project from which to read the backtest.
        backtestId:
          type: string
          example: 26c7bb06b8487cff1c7b3c44652b30f1
          description: Id of the backtest from which to read the orders.
      description: Request to read orders from a backtest.
    ReadBacktestInsightsRequest:
      required:
        - start
        - end
        - projectId
        - backtestId
      type: object
      properties:
        start:
          type: integer
          example: 0
          description: Starting index of the insights to be fetched.
        end:
          type: integer
          example: 100
          description:
            Last index of the insights to be fetched. Note that end - start
            must be less than 100.
        projectId:
          type: integer
          example: 23456789
          description: Id of the project from which to read the backtest.
        backtestId:
          type: string
          example: 26c7bb06b8487cff1c7b3c44652b30f1
          description: Id of the backtest from which to read the insights.
      description: Request to read insights from a backtest.
    ReadLiveChartRequest:
      type: object
      required:
        - projectId
        - start
        - end
        - name
        - count
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project that's live trading.
        name:
          type: string
          description: Name of the chart to read.
          example: Strategy Equity
        count:
          type: integer
          description: The number of data points to request.
          example: 100
        start:
          type: integer
          description: The unix start time of the request.
          example: 1717801200
        end:
          type: integer
          description: The unix end time of the request.
          example: 1743462000
      description: Request to body to obtain a chart from a live algorithm.
    ReadChartResponse:
      type: object
      properties:
        chart:
          $ref: "#/components/schemas/Chart"
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response with the requested chart from a live algorithm or backtest
    ReadOptimizationRequest:
      required:
        - optimizationId
      type: object
      properties:
        optimizationId:
          type: string
          example: O-401d3d40b5a0e9f8c46c954a303f3ddd
          description: Id of the optimization to read.
      description: Request to read an optimization from a project.
    ReadOptimizationResponse:
      type: object
      properties:
        optimization:
          $ref: "#/components/schemas/Optimization"
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received when reading an optimization.
    ResearchGuide:
      type: object
      properties:
        minutes:
          type: integer
          description: Number of minutes used in developing the current backtest.
        backtestCount:
          type: integer
          description: The quantity of backtests run in the project.
        parameters:
          type: integer
          description: Number of parameters detected.
      description:
        A power gauge for backtests, time and parameters to estimate the
        overfitting risk.
    RestResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Base API response class for the QuantConnect API.
    Resolution:
      type: string
      description: Resolution of data requested.
      enum:
        - Tick
        - Second
        - Minute
        - Hour
        - Daily
    RuntimeStatistics:
      type: object
      properties:
        Equity:
          type: string
          description: Total portfolio value.
          example: $100.00
        Fees:
          type: string
          description: Transaction fee.
          example: -$100.00
        Holdings:
          type: string
          description: Equity value of security holdings.
          example: $100.00
        Net Profit:
          type: string
          description: Net profit.
          example: $100.00
        Probabilistic Sharpe Ratio:
          type: string
          description: Probabilistic Sharpe Ratio.
          example: 50.00%
        Return:
          type: string
          description: Return.
          example: 50.00%
        Unrealized:
          type: string
          description: Unrealized profit/loss.
          example: $100.00
        Volume:
          type: string
          description: Total transaction volume.
          example: $100.00
    ChartResolution:
      type: string
      description: Storage format of the charting data
      enum:
        - 10minute
        - minute
        - second
    Series:
      type: object
      properties:
        name:
          type: string
          description: Name of the series.
        unit:
          type: string
          description: Axis for the chart series.
        index:
          type: integer
          description: Index/position of the series on the chart.
        values:
          oneOf:
            - type: array
              items:
                type: array
                items:
                  type: object
            - type: array
              items:
                type: object
          description:
            Values for the series plot. These values are assumed to be
            in ascending time order (first points earliest, last points latest)
        seriesType:
          type: integer
          description:
            Chart type for the series. 0=Line, 1=Scatter, 2=Candle, 3=Bar,
            4=Flag, 5=StackedArea, 6=Pie, 7=Treemap, 9=Heatmap, 10=Scatter3d.
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
            - 9
            - 19
        color:
          type: string
          description: Color of the series.
        scatterMarkerSymbol:
          type: string
          description: Shape or symbol for the marker in a scatter plot.
          enum:
            - none
            - circle
            - square
            - diamond
            - triangle
            - triangle-down
      description: Chart Series Object - Series data and properties for a chart.
    SetObjectStoreRequest:
      type: object
      properties:
        organizationId:
          type: string
          example: 5cad178b20a1d52567b534553413b691
          description: Organization ID we'd like to upload the file to.
        key:
          type: string
          description: Key to the Object Store file.
      description:
        Request to upload a file to an Object Store of a specific organization
        and key.
    StatisticsResult:
      type: object
      properties:
        Total Orders:
          type: string
          description: Total nuber of orders.
        Average Win:
          type: string
          description: The average rate of return for winning trades.
        Average Loss:
          type: string
          description: The average rate of return for losing trades.
        Compounding Annual Return:
          type: string
          description:
            Annual compounded returns statistic based on the final-starting
            capital and years.
        Drawdown:
          type: string
          description: Drawdown maximum percentage.
        Expectancy:
          type: string
          description: The expected value of the rate of return.
        Start Equity:
          type: string
          description: Initial Equity Total Value.
        End Equity:
          type: string
          description: Final Equity Total Value.
        Net Profit:
          type: string
          description: The total net profit percentage.
        Sharpe Ratio:
          type: string
          description:
            Sharpe ratio with respect to risk free rate; measures excess
            of return per unit of risk.
        Sortino Ratio:
          type: string
          description:
            Sortino ratio with respect to risk free rate; measures excess
            of return per unit of downside risk.
        Probabilistic Sharpe Ratio:
          type: string
          description:
            Is a probability measure associated with the Sharpe ratio.
            It informs us of the probability that the estimated Sharpe ratio is greater
            than a chosen benchmark.
        Loss Rate:
          type: string
          description:
            The ratio of the number of losing trades to the total number
            of trades.
        Win Rate:
          type: string
          description:
            The ratio of the number of winning trades to the total number
            of trades.
        Profit-Loss Ratio:
          type: string
          description: The ratio of the average win rate to the average loss rate.
        Alpha:
          type: string
          description:
            Algorithm 'Alpha' statistic - abnormal returns over the risk
            free rate and the relationshio (beta) with the benchmark returns.
        Beta:
          type: string
          description:
            Algorithm 'beta' statistic - the covariance between the algorithm
            and benchmark performance, divided by benchmark's variance.
        Annual Standard Deviation:
          type: string
          description: Annualized standard deviation.
        Annual Variance:
          type: string
          description:
            Annualized variance statistic calculation using the daily performance
            variance and trading days per year.
        Information Ratio:
          type: string
          description: Information ratio - risk adjusted return.
        Tracking Error:
          type: string
          description:
            Tracking error volatility (TEV) statistic - a measure of how
            closely a portfolio follows the index to which it is benchmarked.
        Treynor Ratio:
          type: string
          description:
            Treynor ratio statistic is a measurement of the returns earned
            in excess of that which could have been earned on an investment that has
            no diversifiable risk.
        Total Fees:
          type: string
          description: Total amount of fees.
        Estimated Strategy Capacity:
          type: string
          description:
            The estimated total capacity of the strategy at a point in
            time.
        Lowest Capacity Asset:
          type: string
          description:
            Provide a reference to the lowest capacity symbol used in scaling
            down the capacity for debugging.
        Portfolio Turnover:
          type: string
          description: The average Portfolio Turnover
      description: Statistics information sent during the algorithm operations.
    StopLiveAlgorithmRequest:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project to stop trading live.
      description: Request to stop a live algorithm.
    Symbol:
      type: object
      properties:
        value:
          type: string
          description: The current symbol for this ticker.
        id:
          type: string
          description: The security identifier for this symbol.
        permtick:
          type: string
          description: The ticker at IPO for this security.
      description:
        Represents a unique security identifier. This is made of two components,
        the unique SID and the Value. The value is the current ticker symbol while
        the SID is constant over the life of a security.
    Trade:
      type: object
      properties:
        symbol:
          $ref: "#/components/schemas/Symbol"
        entryTime:
          type: string
          description: The date and time the trade was opened.
          format: date-time
        entryPrice:
          type: number
          description:
            The price at which the trade was opened (or the average price
            if multiple entries).
          format: float
        direction:
          type: integer
          description: Direction of a trade. 0=Long, 1=Short.
          enum:
            - 0
            - 1
        quantity:
          type: number
          description: The total unsigned quantity of the trade.
          format: float
        exitTime:
          type: string
          description: The date and time the trade was closed.
          format: date-time
        exitPrice:
          type: number
          description:
            The price at which the trade was closed (or the average price
            if multiple exits).
          format: float
        profitLoss:
          type: number
          description: The gross profit/loss of the trade (as account currency).
          format: float
        totalFees:
          type: number
          description:
            The total fees associated with the trade (always positive value)
            (as account currency).
          format: float
        mae:
          type: number
          description: The Maximum Adverse Excursion (as account currency).
          format: float
        mfe:
          type: number
          description: The Maximum Favorable Excursion (as account currency).
          format: float
        duration:
          type: string
          description: The duration of the trade.
        endTradeDrawdown:
          type: number
          description: The amount of profit given back before the trade was closed.
          format: float
      description: Represents a closed trade.
    TradeStatistics:
      type: object
      properties:
        startDateTime:
          type: string
          description: The entry date/time of the first trade
          format: date-time
        endDateTime:
          type: string
          description: The exit date/time of the first trade.
          format: date-time
        totalNumberOfTrades:
          type: integer
          description: The total number of trades.
        numberOfWinningTrades:
          type: integer
          description: The total number of winning trades.
        numberOfLosingTrades:
          type: integer
          description: The total number of losing trades.
        totalProfitLoss:
          type: number
          description: The total profit/loss for all trades (as symbol currency).
          format: float
        totalProfit:
          type: number
          description: The total profit for all winning trades (as symbol currency).
          format: float
        totalLoss:
          type: number
          description: The total loss for all losing trades (as symbol currency).
          format: float
        largestProfit:
          type: number
          description: The largest profit in a single trade (as symbol currency).
          format: float
        largestLoss:
          type: number
          description: The largest loss in a single trade (as symbol currency).
          format: float
        averageProfitLoss:
          type: number
          description:
            The average profit/loss (a.k.a. Expectancy or Average Trade)
            for all trades (as symbol currency).
          format: float
        averageProfit:
          type: number
          description: The average profit for all winning trades (as symbol currency).
          format: float
        averageLoss:
          type: number
          description: The average loss for all winning trades (as symbol currency).
          format: float
        averageTradeDuration:
          type: string
          description: The average duration for all trades.
        averageWinningTradeDuration:
          type: string
          description: The average duration for all winning trades.
        averageLosingTradeDuration:
          type: string
          description: The average duration for all losing trades.
        medianTradeDuration:
          type: string
          description: The median duration for all trades.
        medianWinningTradeDuration:
          type: string
          description: The median duration for all winning trades.
        medianLosingTradeDuration:
          type: string
          description: The median duration for all losing trades.
        maxConsecutiveWinningTrades:
          type: integer
          description: The maximum number of consecutive winning trades.
        maxConsecutiveLosingTrades:
          type: integer
          description: The maximum number of consecutive losing trades.
        profitLossRatio:
          type: number
          description:
            The ratio of the average profit per trade to the average loss
            per trade.
          format: float
        winLossRatio:
          type: number
          description:
            The ratio of the number of winning trades to the number of
            losing trades.
          format: float
        winRate:
          type: number
          description:
            The ratio of the number of winning trades to the total number
            of trades.
          format: float
        lossRate:
          type: number
          description:
            The ratio of the number of losing trades to the total number
            of trades.
          format: float
        averageMAE:
          type: number
          description: The average Maximum Adverse Excursion for all trades.
          format: float
        averageMFE:
          type: number
          description: The average Maximum Adverse Excursion for all trades.
          format: float
        largestMAE:
          type: number
          description: The average Maximum Favorable Excursion for all trades.
          format: float
        largestMFE:
          type: number
          description:
            The largest Maximum Adverse Excursion in a single trade (as
            symbol currency).
          format: float
        maximumClosedTradeDrawdown:
          type: number
          description:
            The maximum closed-trade drawdown for all trades (as symbol
            currency).
          format: float
        maximumIntraTradeDrawdown:
          type: number
          description:
            The maximum intra-trade drawdown for all trades (as symbol
            currency).
          format: float
        profitLossStandardDeviation:
          type: number
          description:
            The standard deviation of the profits/losses for all trades
            (as symbol currency).
          format: float
        profitLossDownsideDeviation:
          type: number
          description:
            The downside deviation of the profits/losses for all trades
            (as symbol currency).
          format: float
        profitFactor:
          type: number
          description: The ratio of the total profit to the total loss.
          format: float
        sharpeRatio:
          type: number
          description: The ratio of the average profit/loss to the standard deviation.
          format: float
        sortinoRatio:
          type: number
          description: The ratio of the average profit/loss to the downside deviation.
          format: float
        profitToMaxDrawdownRatio:
          type: number
          description:
            The ratio of the total profit/loss to the maximum closed trade
            drawdown.
          format: float
        maximumEndTradeDrawdown:
          type: number
          description:
            The maximum amount of profit given back by a single trade before
            exit (as symbol currency).
          format: float
        averageEndTradeDrawdown:
          type: number
          description:
            The average amount of profit given back by all trades before
            exit (as symbol currency).
          format: float
        maximumDrawdownDuration:
          type: string
          description:
            The maximum amount of time to recover from a drawdown (longest
            time between new equity highs or peaks).
        totalFees:
          type: number
          description: The sum of fees for all trades.
          format: float
      description: A set of statistics calculated from a list of closed trades.
    UpdateBacktestRequest:
      required:
        - backtestId
        - projectId
      type: object
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project that contains the backtest.
        backtestId:
          type: string
          example: 26c7bb06b8487cff1c7b3c44652b30f1
          description: Id of the backtest to update.
        name:
          type: string
          description: Name to assign to the backtest.
        note:
          type: string
          description: Note to attach to the backtest.
      description: Request to update a backtest's name or note.
    UpdateFileNameRequest:
      type: object
      required:
        - projectId
        - name
        - newName
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project that contains the file.
        name:
          type: string
          example: file1.py
          description: The current name of the file.
        newName:
          type: string
          example: file2.py
          description: The new name for the file.
        codeSourceId:
          type: string
          example: MCP Server
          description: Name of the environment that's creating the request.
      description: Request to update the name of a file.
    UpdateFileContentsRequest:
      type: object
      required:
        - projectId
        - name
        - content
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project that contains the file.
        name:
          type: string
          example: main.py
          description: The name of the file to update.
        content:
          type: string
          example: "class CustomClass:\n      def __init__(self):\n          pass\n"
          description: The new contents of the file.
        codeSourceId:
          type: string
          example: MCP Server
          description: Name of the environment that's creating the request.
      description: Request to update the contents of a file.
    UpdateOptimizationRequest:
      type: object
      required:
        - optimizationId
        - name
      properties:
        optimizationId:
          type: string
          example: O-401d3d40b5a0e9f8c46c954a303f3ddd
          description: Id of the optimization to update.
        name:
          type: string
          example: New Optimization Name
          description: Name to assign to the optimization.
      description: Update the name of an optimization.
    UpdateProjectRequest:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id to which the file belongs.
        name:
          type: string
          example: New Project Name
          description: The new name for the project.
        description:
          type: string
          example: New Project Description
          description: The new description for the project.
      description: Update a project's name or description.
    UpdateProjectNodesRequest:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id to which the nodes refer.
        nodes:
          type: array
          description:
            List of node Ids the project may use. If you omit this property
            or pass an empty list, the best node will be automatically selected for
            backtest, research, and live trading.
          items:
            type: string
      description: Request to update the nodes of a project.
    Version:
      type: object
      properties:
        sdescription:
          type: string
        bpublic:
          type: integer
        itimestamp:
          type: string
          format: date-time
        benchmark_basic:
          type: number
          format: float
        benchmark_equity_400_minute:
          type: number
          format: float
        benchmark_equity_1_second:
          type: number
          format: float
        benchmark_cs_indicator:
          type: number
          format: float
        benchmark_cs_history:
          type: number
          format: float
        benchmark_cs_schedule_events:
          type: number
          format: float
        benchmark_py_basic:
          type: number
          format: float
        benchmark_py_equity_400_minute:
          type: number
          format: float
        benchmark_py_equity_1_second:
          type: number
          format: float
        benchmark_py_indicator:
          type: number
          format: float
        benchmark_py_history:
          type: number
          format: float
        benchmark_py_schedule_events:
          type: number
          format: float
        benchmark_py_universe_coarsefine:
          type: number
          format: float
        benchmark_cs_universe_coarsefine:
          type: number
          format: float
        benchmark_py_universe_stateful:
          type: number
          format: float
        benchmark_cs_universe_stateful:
          type: number
          format: float
        benchmark_py_universe_stateless:
          type: number
          format: float
        benchmark_cs_universe_stateless:
          type: number
          format: float
      additionalProperties:
        $ref: "#/components/schemas/Version"
    files_update_body:
      oneOf:
        - $ref: "#/components/schemas/UpdateFileNameRequest"
        - $ref: "#/components/schemas/UpdateFileContentsRequest"
  responses:
    BacktestResponse:
      description: Backtest read response packet.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BacktestResponse"
    BacktestReport:
      description: Backtest Report Response wrapper.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BacktestReport"
    CompileResponse:
      description: Response from the compiler on a build event.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateCompileResponse"
    LiveAlgorithm:
      description: Live algorithm instance result.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LiveAlgorithm"
    LiveAlgorithmListResponse:
      description: List of the live algorithms running which match the requested status.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LiveAlgorithmListResponse"
    LiveAlgorithmResults:
      description: Details a live algorithm from the live/read API endpoint.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LiveAlgorithmResults"
    ProjectListResponse:
      description: Project list response.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProjectListResponse"
    ProjectFilesResponse:
      description: Response received when reading all files of a project.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProjectFilesResponse"
    ReadLiveLogsResponse:
      description: Logs from a live algorithm.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ReadLiveLogsResponse"
    RestResponse:
      description: Base API response class.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RestResponse"
    UnauthorizedErrorResponse:
      description:
        Unauthorized response from the API. Key is missing, invalid, or
        timestamp is too old for hash.
      headers:
        www_authenticate:
          style: simple
          explode: false
          schema:
            type: string
  securitySchemes:
    nonceTokenAuth:
      type: http
      description:
        The standard QuantConnect API authentication scheme is used. This
        requires the current unixtime and your api key to be hashed together with
        SHA256 and sent as the B64 password in a basic authentication. The username
        for the basic authentication is the UID on your QuantConnect account.
      scheme: basic
