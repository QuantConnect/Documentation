---
openapi: 3.0.0
info:
  title: QuantConnect Platform API v2.0
  description: QuantConnect Platform API controls creating, updating and deleting projects, files, backtests and live algorithms. Automate the updating and backtesting of your strategies, or build tools to fast track your development.
  termsOfService: https://www.quantconnect.com/terms
  contact:
    name: QuantConnect
    email: contact@quantconnect.com
  license:
    name: License For Use Granted Under QuantConnect Terms of Service. All other rights reserved.
  version: 2.0.0
servers:
- url: https://virtserver.swaggerhub.com/QuantConnect/Platform/2.0.0
  description: SwaggerHub API Auto Mocking
- url: https://www.quantconnect.com/api/v2
  description: Primary REST Endpoint
security:
- nonceTokenAuth: []
paths:
  /account/read:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 12 Account
      description: Will read the organization account status.
      responses:
        "200":
          description: Account information for an organization.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /projects/create:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 02 Project Management
      - 01 Create Project
      summary: Create a new project in your default organization.
      description: Create a project with the specified name and programming language. If the project-name already exists, API call returns success:false with exception details in the errors array.
      requestBody:
        description: Name and language of the project to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
        required: true
      responses:
        "200":
          description: Project list response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /projects/read:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 02 Project Management
      - 02 Read Project
      summary: List details of all projects, or the project matched the passed project ID if the project ID property passed.
      requestBody:
        description: The projectId for the project to read, or nothing to get a details list of all projects.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadProjectRequest'
        required: false
      responses:
        "200":
          description: Project list response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /projects/update:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 02 Project Management
      - 03 Update Project
      summary: Update a project name, description or parameters.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /projects/delete:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 02 Project Management
      - 04 Delete Project
      summary: Delete a project.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteProjectRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /projects/collaboration/create:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 02 Project Management
      - 05 Collaboration
      - 01 Create Project Collaborator
      summary: Adds collaborator to the project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCollaboratorRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCollaboratorResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /projects/collaboration/read:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 02 Project Management
      - 05 Collaboration
      - 02 Read Project Collaborators
      summary: List all collaborators in a project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadCollaboratorsRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadCollaboratorsResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /projects/collaboration/update:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 02 Project Management
      - 05 Collaboration
      - 03 Update Project Collaborator
      summary: Updates collaborator information in the project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCollaboratorRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCollaboratorResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /projects/collaboration/delete:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 02 Project Management
      - 05 Collaboration
      - 04 Delete Project Collaborator
      summary: Removes collaborator from the project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCollaboratorRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCollaboratorResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /projects/nodes/read:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 02 Project Management
      - 06 Nodes
      - 01 Read Project Nodes
      summary: Read all nodes in a project.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadProjectNodesRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectNodesResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /projects/nodes/update:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 02 Project Management
      - 06 Nodes
      - 02 Update Project Nodes
      summary: Update the active state of some nodes to true. If you don't provide any nodes, all the nodes become inactive and AutoSelectNode is true.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectNodesRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectNodesResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /files/create:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 03 File Management
      - 01 Create File
      summary: Add a file to given project.
      requestBody:
        description: Project, file name and file content to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectFileRequest'
        required: true
      responses:
        "200":
          description: Response received when reading all files of a project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /files/read:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 03 File Management
      - 02 Read File
      summary: If a ReadSingleFileRequest is passed, reads that file from the project. If a ReadAllFilesRequest is passed, reads all files in the project.
      requestBody:
        description: An array list of files from the project requested.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadFilesRequest'
        required: true
      responses:
        "200":
          description: Response received when reading all files of a project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectFilesResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /files/update:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 03 File Management
      - 03 Update File
      summary: If an UpdateProjectFileNameRequest is passed, update the name of a file. If a UpdateProjectFileContentsRequest is passed, update the contents of a file.
      requestBody:
        description: Information about the file to update along with the new properties to set.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/files_update_body'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /files/delete:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 03 File Management
      - 04 Delete File
      summary: Delete a file in a project
      requestBody:
        description: Project Id and filename to specify the file for deletion.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteFileRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /compile/create:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 04 Compiling Code
      - 01 Create Compilation Job
      summary: Asynchronously create a compile job request for a project
      requestBody:
        description: Project Id specifying project to build.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompileRequest'
        required: true
      responses:
        "200":
          description: Response from the compiler on a build event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompileResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /compile/read:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 04 Compiling Code
      - 02 Read Compilation Result
      summary: Read a compile packet job result.
      requestBody:
        description: Read a compile result for a specific Project Id and Compile Id.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadCompileRequest'
        required: true
      responses:
        "200":
          description: Response from the compiler on a build event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompileResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /backtests/create:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 05 Backtest Management
      - 01 Create Backtest
      summary: Create a new backtest request and get the backtest Id.
      requestBody:
        description: Create a new backtest given a project Id and compile Id.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBacktestRequest'
        required: true
      responses:
        "200":
          description: Backtest read response packet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BacktestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /backtests/read:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 05 Backtest Management
      - 02 Read Backtest
      - 01 Backtest Statistics
      summary: Read out that backtest from the project (optionally with the charts included).
      requestBody:
        description: Fetch the results for the project Id and backtest Id provided (and optional chart name provided).
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadBacktestRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BacktestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /backtests/list:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 05 Backtest Management
      - 05 List Backtests
      summary: List all the backtests for the project.
      requestBody:
        description: Fetch the results for the project Id provided.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListBacktestRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BacktestSummaryResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /backtests/orders/read:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 05 Backtest Management
      - 02 Read Backtest
      - 03 Orders
      summary: Read out the orders of a backtest.
      requestBody:
        description: Fetch the orders of a backtest for the project Id, backtest Id and steps provided.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadBacktestOrdersRequest'
        required: true
      responses:
        "200":
          description: Orders of the backtest within range.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BacktestOrdersResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /backtests/read/report:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 11 Reports
      - 01 Backtest Report
      summary: Read out the report of a backtest in the project Id specified
      requestBody:
        description: A JSON object containing info about the project to delete.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BacktestReportRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /backtests/chart/read:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 05 Backtest Management
        - 02 Read Backtest
        - 02 Charts
      summary: Read chart from a backtest.
      requestBody:
        description: Request body to obtain a chart from a backtest.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadBacktestChartRequest'
        required: true
      responses:
        "200":
          description: Response with the chart requested object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /backtests/insights/read:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 05 Backtest Management
      - 02 Read Backtest
      - 04 Insights
      summary: Read out the insights of a backtest.
      requestBody:
        description: Fetch the insights of a backtest for the project Id, backtest Id and steps provided.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadBacktestInsightsRequest'
        required: true
      responses:
        "200":
          description: Orders of the backtest within range.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BacktestInsightsResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /backtests/update:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 05 Backtest Management
      - 03 Update Backtest
      summary: Update a backtest name or note
      requestBody:
        description: A JSON object containing info about the backtest and new name.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBacktestRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /backtests/delete:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 05 Backtest Management
      - 04 Delete Backtest
      summary: Delete a backtest from the specified project and backtestId
      requestBody:
        description: Information required to delete the backtest.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteBacktestRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /backtests/tags/update:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 05 Backtest Management
      summary: Updates the tags collection for a backtest
      requestBody:
        description: Information required to update the tags collection for a backtest.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBacktestTagsRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /lean/versions/read:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 13 Lean Version
      summary: Returns a list of lean versions with basic information for each version.
      responses:
        "200":
          description: List of LEAN versions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeanVersionsResponse'
  /live/chart/read:
    post:
      tags:
        - 01 Cloud Platform
        - 99 API Reference
        - 07 Live Management
        - 02 Read Live Algorithm
        - 02 Charts
      summary: Read a chart from a live algorithm
      requestBody:
        description: Request body to obtain a chart from a live algorithm.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadLiveChartRequest'
        required: true
      responses:
        "200":
          description: Response with the requested chart from a live algorithm.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_3'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /live/create:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 07 Live Management
      - 01 Create Live Algorithm
      summary: Create a live algorithm
      requestBody:
        description: Project, compile and brokerage login information for deploying a live algorithm.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLiveAlgorithmRequest'
        required: true
      responses:
        "200":
          description: Live algorithm instance result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLiveAlgorithmResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /live/read:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 07 Live Management
      - 02 Read Live Algorithm
      - 01 Live Algorithm Statistics
      summary: If a ReadLiveAlgorithmRequest is provided details on a live algorithm are returned. If a ListLiveAlgorithmsRequest is passed get a list of live running algorithms.
      requestBody:
        description: Dynamic arguement to specify whether seeking single project or list response.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadLiveAlgorithmRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveAlgorithmResults'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /live/list:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 07 Live Management
      - 04 List Live Algorithms
      summary: Returns a list of live running algorithms.
      requestBody:
        description: Request body to obtain a list of live running algorithms.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListLiveAlgorithmsRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveAlgorithmListResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /live/read/logs:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 07 Live Management
      - 02 Read Live Algorithm
      - 06 Logs
      summary: Get the logs of a specific live algorithm.
      requestBody:
        description: Information about the algorithm to read live logs from.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadLiveLogsRequest'
        required: true
      responses:
        "200":
          description: Logs from a live algorithm.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadLiveLogsResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /live/portfolio/read:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 07 Live Management
      - 02 Read Live Algorithm
      - 03 Portfolio State
      summary: Read out the portfolio state of a live algorithm.
      requestBody:
        description: Fetch the live portfolio state for the project Id provided.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadLivePortfolioRequest'
        required: true
      responses:
        "200":
          description: Portfolio holdings and cash of the live algorithm.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LivePortfolioResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /live/orders/read:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 07 Live Management
      - 02 Read Live Algorithm
      - 04 Orders
      summary: Read out the orders of a live algorithm.
      requestBody:
        description: Fetch the orders of a live algorithm for the project Id and steps provided.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadLiveOrdersRequest'
        required: true
      responses:
        "200":
          description: Orders of the live algorithm within range.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveOrdersResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /live/insights/read:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 07 Live Management
      - 02 Read Live Algorithm
      - 05 Insights
      summary: Read out the insights of a live algorithm.
      requestBody:
        description: Fetch the insights of a live algorithm for the project Id and steps provided.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadLiveInsightsRequest'
        required: true
      responses:
        "200":
          description: Insights of the live algorithm within range.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveInsightsResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /live/update/liquidate:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 07 Live Management
      - 03 Update Live Algorithm
      - 01 Liquidate Live Portfolio
      summary: Liquidate a live algorithm from the specified project and deployId.
      requestBody:
        description: Information about the live algorithm to liquidate.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LiquidateLiveAlgorithmRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /live/update/stop:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 07 Live Management
      - 03 Update Live Algorithm
      - 02 Stop Live Algorithm
      summary: Stop a live algorithm from the specified project and deployId.
      requestBody:
        description: Information about the project to delete.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopLiveAlgorithmRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /live/commands/create:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 07 Live Management
      - 05 Live Commands
      - 01 Create Live Command
      summary: Create a live command.
      requestBody:
        description: Sends a command to a live deployment to trigger an action such as placing orders.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLiveCommandRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /live/commands/broadcast:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 07 Live Management
      - 05 Live Commands
      - 02 Broadcast Live Command
      summary: Broadcast a live command to all live algorithms in the organization.
      requestBody:
        description: Broadcasts a command to all live deployments in the organization.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BroadcastLiveCommandRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /optimizations/create:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 08 Optimization Management
      - 01 Create Optimization
      summary: Create an optimization with the specified parameters
      requestBody:
        description: Project, compile and optimization parameters for launching an optimization job.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOptimizationRequest'
        required: true
      responses:
        "200":
          description: Response received when launching an optimization job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOptimizationResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /optimizations/update:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 08 Optimization Management
      - 03 Update Optimization
      summary: Updates the name of an optimization.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOptimizationRequest'
          required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /optimizations/read:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 08 Optimization Management
      - 02 Read Optimization
      summary: Read an optimization.
      requestBody:
        description: Optimization ID for the optimization we want to read
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadOptimizationRequest'
        required: true
      responses:
        "200":
          description: Response received when reading an optimization job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadOptimizationResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /optimizations/delete:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 08 Optimization Management
      - 04 Delete Optimization
      summary: Delete an optimization.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteOptimizationRequest'
          required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /optimizations/abort:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 08 Optimization Management
      - 05 Abort Optimization
      summary: Abort an optimization.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbortOptimizationRequest'
          required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /optimizations/list:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 08 Optimization Management
      - 06 List Optimization
      summary: List all the optimizations for a project.
      requestBody:
        description: Project ID we'd like to get a list of optimizations for.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListOptimizationRequest'
        required: true
      responses:
        "200":
          description: Response received when reading an optimization job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOptimizationResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /optimizations/estimate:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 08 Optimization Management
      - 07 Estimate Optimization Cost
      summary: Estimate the cost of an optimization with the specified parameters
      requestBody:
        description: Project, compile and optimization parameters for estimating the cost of an optimization job.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EstimateOptimizationRequest'
        required: true
      responses:
        "200":
          description: Response received when estimating the cost of an optimization job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstimateOptimizationResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /object/set:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 09 Object Store Management
      - 01 Upload Object Store Files
      summary: Upload files to the Object Store.
      requestBody:
        description: Upload files to the Object Store.
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ObjectStoreBinaryFile'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /object/get:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 09 Object Store Management
      - 03 Get Object Store File
      summary: Get Object Store file of a specific organization and key.
      requestBody:
        description: Get Object Store files of a specific organization and key.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/get_object_store'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetObjectStoreResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /object/properties:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 09 Object Store Management
      - 02 Get Object Store Metadata
      summary: Get Object Store properties of a specific organization and key. It does not work if the object store is a directory.
      requestBody:
        description: Get Object Store properties of a specific organization and key.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetObjectStorePropertiesRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetObjectStorePropertiesResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /object/delete:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 09 Object Store Management
      - 04 Delete Object Store File
      summary: Delete the Object Store file of a specific organization and key.
      requestBody:
        description: Delete the Object Store file of a specific organization and key.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteObjectStoreRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /object/list:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 09 Object Store Management
      - 05 List Object Store Files
      summary: List the Object Store files of a specific organization and path.
      requestBody:
        description: List the Object Store files of a specific organization and path.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListObjectStoreRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListObjectStoreResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /ai/tools/backtest-init:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 10 AI Assistance
      - 02 Tools
      - 01 Backtest Initialization
      summary: Run a backtest for a few seconds to initialize the algorithm and get inialization errors if any.
      requestBody:
        description: Run a backtest for a few seconds to initialize the algorithm and get inialization errors if any.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicFilesRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BacktestInitResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /ai/tools/complete:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 10 AI Assistance
      - 02 Tools
      - 02 Code Completion
      summary: Show the code completion for a specific text input.
      requestBody:
        description: Show the code completion for a specific text input.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeCompletionRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeCompletionResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /ai/tools/error-enhance:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 10 AI Assistance
      - 02 Tools
      - 03 Error Enhancement
      summary: Shows additional context and suggestions for error messages.
      requestBody:
        description: Shows additional context and suggestions for error messages.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorEnhanceRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnhanceResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /ai/tools/pep8-convert:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 10 AI Assistance
      - 02 Tools
      - 04 PEP8 Conversion
      summary: Ensure a Python code follows PEP8 style.
      requestBody:
        description: Ensure a Python code follows PEP8 style.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PEP8ConvertRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PEP8ConvertResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /ai/tools/syntax-check:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 10 AI Assistance
      - 02 Tools
      - 05 Syntax Check
      summary: Check the syntax of a code.
      requestBody:
        description: Check the syntax of a code.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicFilesRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyntaxCheckResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /ai/tools/search:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 10 AI Assistance
      - 02 Tools
      - 06 Search
      summary: Search for content in QuantConnect.
      requestBody:
        description: Search for content in QuantConnect.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string


components:
  schemas:
    BasicFilesRequest:
      type: object
      required:
        - language
        - files
      properties:
        language:
          type: string
          enum:
          - C#
          - Py
          example: Py
          description: Programming language.
        files:
          type: array
          example: "[{\"name\": \"file.py\", \"content\": \"fileContent\"}]"
          description: Files to process.
          items:
            $ref: '#/components/schemas/File'
      description: Request to process files.
    BacktestInitResponse:
      type: object
      properties:
        state:
          type: string
          example: End
          description: State of the backtest (e.g. Error, End).
        version:
          type: string
          example: 2.0
          description: Version of the response.
        payload:
          type: string
          description: Information about the backtest initialization. 
        payloadType:
          type: string
          example: String
          description: Type of the payload, e.g. String.
      description: Response to a backtest initialization request.
    CodeCompletionRequest:
      type: object
      required:
        - language
        - sentence
      properties:
        language:
          type: string
          enum:
          - C#
          - Py
          example: Py
          description: Programming language for the code completion.
        sentence:
          type: string
          example: self.add_equity(\"AAPL\"
          description: Sentence to complete.
        responseSizeLimit:
          type: integer
          example: 10
          description: Maximum size of the responses.
      description: Request to show code completion for a specific text input.
    CodeCompletionResponse:
      type: object
      properties:
        state:
          type: string
          example: End
          description: State of the code completion.
        version:
          type: string
          example: 2.0
          description: Version of the response.
        payload:
          type: array
          items:
            type: string
          description: Code completion suggestions. 
        payloadType:
          type: string
          example: StringArray
          description: Type of the payload, e.g. StringArray.
      description: Response to a code completion request.
    ErrorEnhanceRequest:
      type: object
      required:
        - language
        - 
      properties:
        language:
          type: string
          enum:
          - C#
          - Py
          example: Py
          description: Programming language for the code completion.
        error::
          type: object
          $ref: '#/components/schemas/Error'
          description: Error message to enhance.
      description: Request to show additional context and suggestions for error messages.
    ErrorEnhanceResponse:
      type: object
      properties:
        state:
          type: string
          example: End
          description: State of the code completion.
        version:
          type: string
          example: 2.0
          description: Version of the response.
        payload:
          type: string
          description: Error message suggestions.
        payloadType:
          type: string
          example: String
          description: Type of the payload, e.g. String.
      description: Response to error enhancement request.
    PEP8ConvertRequest:
      type: object
      required:
        - files
      properties:
        files:
          type: array
          example: "[{\"name\": \"file.py\", \"content\": \"fileContent\"}]"
          description: Files present in the project in which the algorithm is.
          items:
            $ref: '#/components/schemas/File'
      description: Request to convert Python code to PEP8 style.
    PEP8ConvertResponse:
      type: object
      properties:
        state:
          type: string
          example: End
          description: State of PEP8 conversion.
        version:
          type: string
          example: 2.0
          description: Version of the response.
        payload:
          type: dict
          example: {"utils.py": "def add(a,b):\n    return a+b\n"}
          description: PEP8 converted code.
        payloadType:
          type: string
          example: StringDict
          description: Type of the payload, e.g. StringDict.
      description: Response to a PEP8 conversion request.
    SyntaxCheckResponse:
      type: object
      properties:
        state:
          type: string
          example: End
          description: State of the syntax check.
        version:
          type: string
          example: 2.0
          description: Version of the response.
        payload:
          type: array
          items:
            type: string
          description: Code completion suggestions. 
        payloadType:
          type: string
          example: StringArray
          description: Type of the payload, e.g. StringArray.
      description: Response to a syntax check request.
    SearchRequest:
      type: object
      required:
        - language
        - criteria
      properties:
        language:
          type: string
          enum:
          - C#
          - Py
          example: Py
          description: Programming language of the content to search.
        criteria:
          type: array
          example: "[{\"input\": \"option\", \"type\": \"Docs\", \"count\": 1}]"
          items:
            $ref: '#/components/schemas/SearchCriteria'
          description: Criteria for the search.
      description: Request to search content in QuantConnect.
    SearchCriteria:
      type: object
      properties:
        input:
          type: string
          example: option
          description: Input for the search.
        type:
          type: string
          example: Docs
          description: Type of the search criteria.
        count:
          type: integer
          example: 1
          description: Number of results to return.
      description: Search criteria.
    SearchResponse:
      type: object
      properties:
        state:
          type: string
          example: End
          description: State of the search.
        version:
          type: string
          example: 2.0
          description: Version of the response.
        retrivals:
          type: array
          items:
            $ref: '#/components/schemas/SearchRetrieval'
          description: List of search results.
        messageId:
          type: integer
          example: 0
          description: ID of the message.
      description: Response to a search request.
    SearchRetrieval:
      type: object
      properties:
        url:
          type: string
          example: option[Index Options - QuantConnect.com](https://www.quantconnect.com/docs/v2/writing-algorithms/universes/index-options)
          description: Input for the search.
        score:
          type: number
          example: 0.320344448
          description: Relevance score of the search result.
        content:
          type: string
          description: Content of the search result.
        type:
          type: number
          example: 2
          description: Type of the search result.
      description: Search criteria.
    AbortOptimizationRequest:
      type: object
      properties:
        optimizationId:
          type: string
          example: O-401d3d40b5a0e9f8c46c954a303f3ddd
          description: Optimization ID we want to abort.
      description: Abort an optimization.
    AccountResponse:
      type: object
      properties:
        organizationId:
          type: string
          example: 5cad178b20a1d52567b534553413b691
          description: The organization Id.
        creditBalance:
          type: number
          description: The current account balance.
        card:
          type: object
          description: The current organizations credit card.
          $ref: '#/components/schemas/Card'
      description: Account information for an organization.
    AlgorithmPerformance:
      type: object
      properties:
        tradeStatistics:
          $ref: '#/components/schemas/TradeStatistics'
        portfolioStatistics:
          $ref: '#/components/schemas/PortfolioStatistics'
        closedTrades:
          type: array
          description: The algorithm statistics on portfolio.
          items:
            $ref: '#/components/schemas/Trade'
      description: The AlgorithmPerformance class is a wrapper for TradeStatistics and PortfolioStatistics.
    BacktestOrdersResponse:
      type: object
      properties:
        orders:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Order'
        length:
          type: integer
          description: Total number of returned orders
      description: Contains orders and the number of orders of the backtest in the request criteria.
    BacktestInsightsResponse:
      type: object
      properties:
        insights:
          type: array
          description: Collection of insights.
          items:
            $ref: '#/components/schemas/Insight'
        length:
          type: integer
          description: Total number of returned insights
        success:
          type: boolean
          description: Indicate if the API request was successful.
      description: Contains insights and the number of insights of the backtest in the request criteria.
    BacktestResponse:
      type: object
      properties:
        backtest:
          type: array
          description: Collection of backtests for a project.
          items:
            $ref: '#/components/schemas/BacktestResult'
        debugging:
          type: boolean
          description: Indicates if the backtest is run under debugging mode.
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Collection container for a list of backtests for a project.
    BacktestSummaryResponse:
      type: object
      properties:
        backtest:
          type: array
          description: Collection of backtest summaries for a project.
          items:
            $ref: '#/components/schemas/BacktestSummaryResult'
        count:
          type: integer
          description: Number of backtest summaries retrieved in the response.
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Collection container for a list of backtest summaries for a project.
    BacktestList:
      type: object
      properties:
        backtests:
          type: array
          description: Array of BacktestResponse objects
          items:
            $ref: '#/components/schemas/BacktestResponse'
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Collection container for a list of Backtest objects for a project.
    BacktestReport:
      type: object
      properties:
        report:
          type: string
          description: HTML data of the report with embedded base64 images.
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Backtest Report Response wrapper.
    BacktestReportRequest:
      type: object
      required:
        - projectId
        - backtestId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project to read.
        backtestId:
          type: string
          description: Specific backtest Id to read.
      description: Request to read out the report of a backtest.
    BacktestResult:
      type: object
      properties:
        note:
          type: string
          description: Note on the backtest attached by the user.
        name:
          type: string
          description: Name of the backtest.
        organizationId:
          type: string
          example: 5cad178b20a1d52567b534553413b691
          description: Orgainization ID.
        projectId:
          type: integer
          example: 23456789
          description: Project ID
        completed:
          type: boolean
          description: Boolean true when the backtest is completed.
        optimizationId:
          type: string
          example: O-401d3d40b5a0e9f8c46c954a303f3ddd
          description: Optimization task ID, if the backtest is part of an optimization.
        backtestId:
          type: string
          example: 26c7bb06b8487cff1c7b3c44652b30f1
          description: Assigned backtest ID.
        tradeableDates:
          type: integer
          description: Number of traadeable days.
        researchGuide:
          type: object
          $ref: '#/components/schemas/ResearchGuide'
          description: A power gauge for backtests, time and parameters to estimate the overfitting risk.
        backtestStart:
          type: string
          description: The starting time of the backtest
          format: date-time
        backtestEnd:
          type: string
          description: The ending time of the backtest
          format: date-time
        created:
          type: string
          description: Backtest creation date and time.
          format: date-time
        snapshotId:
          type: integer
          description: Snapshot id of this backtest result.
        status:
          type: string
          description: Status of the backtest.
          enum:
          - Completed.
          - In Queue...
          - '''Running: _%'''
        error:
          type: string
          description: Backtest error message.
        stacktrace:
          type: string
          description: Backtest error stacktrace.
        progress:
          type: number
          description: Progress of the backtest in percent 0-1.
          format: float
        hasInitializeError:
          type: boolean
          description: Indicates if the backtest has error during initialization.
        charts:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ChartSummary'
          description: Charts updates for the live algorithm since the last result packet.
        parameterSet:
          type: object
          description: Parameters used in the backtest.
          additionalProperties:
            $ref: '#/components/schemas/ParameterSet'
        rollingWindow:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AlgorithmPerformance'
          description: Rolling window detailed statistics.
        runtimeStatistics:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/RuntimeStatistics'
          description: Runtime banner/updating statistics in the title banner of the live algorithm GUI.
        statistics:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/StatisticsResult'
          description: Statistics information sent during the algorithm operations.
        totalPerformance:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AlgorithmPerformance'
          description: The algorithm performance statistics.
        nodeName:
          type: string
          description: The backtest node name.
        outOfSampleMaxEndDate:
          type: string
          description: End date of out of sample data.
          format: date-time
        outOfSampleDays:
          type: integer
          description: Number of days of out of sample days.
      description: Results object class. Results are exhaust from backtest or live algorithms running in LEAN.
    BacktestSummaryResult:
      type: object
      properties:
        backtestId:
          type: string
          example: 26c7bb06b8487cff1c7b3c44652b30f1
          description: Assigned backtest ID
        status:
          type: string
          description: Status of the backtest.
          enum:
          - Completed.
          - In Queue...
          - '''Running: _%'''
        name:
          type: string
          description: Name of the backtest.
        created:
          type: string
          description: Backtest creation date and time.
          format: date-time
        progress:
          type: number
          description: Progress of the backtest in percent 0-1.
          format: float
        optimizationId:
          type: string
          example: O-401d3d40b5a0e9f8c46c954a303f3ddd
          description: Optimization task ID, if the backtest is part of an optimization.
        tradeableDates:
          type: integer
          description: Number of traadeable days
        parameterSet:
          type: object
          description: Parameters used in the backtest.
          additionalProperties:
            $ref: '#/components/schemas/ParameterSet'
        snapshotId:
          type: integer
          description: Snapshot id of this backtest result.
        tags:
          type: array
          description: Collection of tags for the backtest.
          items:
            type: string
        sharpeRatio:
          type: float
          description: Sharpe ratio with respect to risk free rate; measures excess of return per unit of risk.
        alpha:
          type: float
          description: Algorithm "Alpha" statistic - abnormal returns over the risk free rate and the relationshio (beta) with the benchmark returns.
        beta:
          type: float
          description: Algorithm "beta" statistic - the covariance between the algorithm and benchmark performance, divided by benchmark's variance.
        compoundingAnnualReturn:
          type: float
          description: Annual compounded returns statistic based on the final-starting capital and years.
        drawdown:
          type: float
          description: Drawdown maximum percentage.
        lossRate:
          type: float
          description: The ratio of the number of losing trades to the total number of trades.
        netProfit:
          type: float
          description: Net profit percentage.
        parameters:
          type: integer
          description: Number of parameters in the backtest.
        psr:
          type: float
          description: Price-to-sales ratio.
        securityTypes:
          type: string
          description: SecurityTypes present in the backtest.
        sortinoRatio:
          type: float
          description: Sortino ratio with respect to risk free rate; measures excess of return per unit of downside risk.
        trades:
          type: integer
          description: Number of trades in the backtest.
        treynorRatio:
          type: float
          description: Treynor ratio statistic is a measurement of the returns earned in excess of that which could have been earned on an investment that has no diversifiable risk.
        winRate:
          type: float
          description: The ratio of the number of winning trades to the total number of trades.
      description: Result object class for the List Backtest response from the API.
    BaseLiveAlgorithmSettings:
      type: object
      properties:
        id:
          type: string
          description: '''Interactive'' / ''FXCM'' / ''Oanda'' / ''Tradier'' /''PaperTrading'''
          example: "Default"
        user:
          type: string
          description: Username associated with brokerage.
          example: ""
        password:
          type: string
          description: Password associated with brokerage.
          example: ""
        environment:
          type: string
          description: Represents the types of environments supported by brokerages for trading.
          enum:
            - live
            - paper
        account:
          type: string
          description: Account of the associated brokerage.
          example: ""
      description: Base class for settings that must be configured per Brokerage to create new algorithms via the API.
    BinanceSettings:
      type: object
      properties:
        id:
          type: string
          description: ID of the brokerage, this is, BinanceBrokerage
        binance-exchange-name:
          type: string
          description: Binance exchange, this is, Binance.
        binance-api-secret:
          type: string
          description: Your Binance API secret.
        binance-api-key:
          type: string
          description: Your Binance API key.
        binance-api-url:
          type: string
          description: Binance configuration for spot/margin. The value for this property is https://api.binance.com
        binance-websocket-url:
          type: string
          description: Binance configuration for spot/margin. The value for this property is wss://stream.binance.com:9443/ws
        holdings:
          type: array
          description: List of holdings for the brokerage.
          items:
            $ref: '#/components/schemas/BrokerageHolding'
      description: Settings for using Binance as a data provider or brokerage.
    BinanceFuturesUSDMSettings:
      type: object
      properties:
        id:
          type: string
          description: ID of the brokerage, this is, BinanceBrokerage
        binance-exchange-name:
          type: string
          description: Binance exchange, this is, Binance-USDM-Futures.
        binance-api-secret:
          type: string
          description: Your Binance API secret.
        binance-api-key:
          type: string
          description: Your Binance API key.
        binance-fapi-url:
          type: string
          description: Binance Futures configuration for spot/margin. The value for this property is https://fapi.binance.com
        binance-fwebsocket-url:
          type: string
          description: Binance Futures configuration for spot/margin. The value for this property is wss://fstream.binance.com/ws
        holdings:
          type: array
          description: List of holdings for the brokerage.
          items:
            $ref: '#/components/schemas/BrokerageHolding'
      description: Settings for using Binance Futures USDM as a data provider or brokerage.
    BinanceFuturesCOINSettings:
      type: object
      properties:
        id:
          type: string
          description: ID of the brokerage, this is, BinanceBrokerage
        binance-exchange-name:
          type: string
          description: Binance exchange, this is, Binance-COIN-Futures.
        binance-api-secret:
          type: string
          description: Your Binance API secret.
        binance-api-key:
          type: string
          description: Your Binance API key.
        binance-dapi-url:
          type: string
          description: Binance Futures configuration for spot/margin. The value for this property is https://dapi.binance.com
        binance-dwebsocket-url:
          type: string
          description: Binance Futures configuration for spot/margin. The value for this property is wss://dstream.binance.com/ws
        holdings:
          type: array
          description: List of holdings for the brokerage.
          items:
            $ref: '#/components/schemas/BrokerageHolding'
      description: Settings for using Binance Futures COIN as a data provider or brokerage.
    BinanceUSSettings:
      type: object
      properties:
        id:
          type: string
          description: ID of the brokerage, this is, BinanceBrokerage.
        binance-exchange-name:
          type: string
          description: Binance exchange, this is, BinanceUS.
        binanceus-api-secret:
          type: string
          description: Your Binance US API secret.
        binanceus-api-key:
          type: string
          description: Your Binance US API key.
        binanceus-api-url:
          type: string
          description: Binance US configuration for spot/margin. The value for this property is https://api.binance.us
        binanceus-websocket-url:
          type: string
          description: Binance US configuration for spot/margin. The value for this property is wss://stream.binance.us:9443/ws
        holdings:
          type: array
          description: List of holdings for the brokerage.
          items:
            $ref: '#/components/schemas/BrokerageHolding'
      description: Settings for using Binance US as a data provider or brokerage.
    BitfinexSettings:
      type: object
      properties:
        id:
          type: string
          description: ID of the brokerage, this is, BitfinexBrokerage.
        bitfinex-api-key:
          type: string
          description: Your Bitfinex API key.
        bitfinex-api-secret:
          type: string
          description: Your Bitfinex API secret.
      description: Settings for using Bitfinex as a data provider or brokerage.
    BrokerageData:
      type: object
      properties:
        authentication:
          $ref: '#/components/schemas/LiveAuthenticationData'
        additionalProperties:
          $ref: '#/components/schemas/BrokerageId'
      description: Brokerage data saved on live deployment.
    BrokerageId:
      type: object
      properties:
        id:
          type: string
          description: The ID of the brokerage.
      description: Brokerage Id.
    BybitSettings:
      type: object
      properties:
        id:
          type: string
          description: ID of the brokerage, this is, BybitBrokerage.
        bybit-api-key:
          type: string
          description: Your Bybit API key.
        bybit-api-secret:
          type: string
          description: Your Bybit API secret.
        bybit-vip-level:
          type: string
          description: Your Bybit VIP Level.
        bybit-use-testnet:
          type: string
          description: Whether the testnet should be used.
          enum:
            - live
            - paper
        bybit-api-url:
          type: string
          description: Bybit API URL, this is, https://api-testnet.bybit.com
        bybit-websocket-url:
          type: string
          description: Bybit Websocket URL, this is, wss://stream.bybit.com
        holdings:
          type: array
          description: List of holdings for the brokerage.
          items:
            $ref: '#/components/schemas/BrokerageHolding'
      description: Settings for using Bybit as a data provider or brokerage.
    Card:
      type: object
      properties:
        brand:
          type: string
          description: Credit card brand.
        expiration:
          type: string
          description: The credit card expiration.
          format: date-time
        last4:
          type: string
          description: The last 4 digits of the card.
      description: Credit card information.
    Cash:
      type: object
      properties:
        symbol:
          type: string
          description: Gets the symbol used to represent this cash.
        amount:
          type: number
          description: Gets or sets the amount of cash held.
          format: float
        conversionRate:
          type: number
          description: The currency conversion rate to the account base currency.
          format: float
        currencySymbol:
          description: The symbol of the currency, such as $.
        valueInAccountCurrency:
          type: number
          description: The value of the currency cash in the account base currency.
          format: float
      description: Represents a holding of a currency in cash.
    CashAmount:
      properties:
        amount:
          type: number
          description: The amount of cash.
          format: float
        currency:
          type: string
          description: The currency in which the cash amount is denominated.
      description: Represents a cash amount which can be converted to account currency using a currency converter.
    ChartSummary:
      type: object
      properties:
        name:
          type: string
          description: Name of the Chart.
      description: Contains the names of all charts
    Chart:
      type: object
      properties:
        name:
          type: string
          description: Name of the Chart.
        chartType:
          type: string
          description: Type of the Chart, Overlayed or Stacked.
          enum:
            - Overlay
            - Stacked
        series:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Series'
          description: List of Series Objects for this Chart.
      description: Single Parent Chart Object for Custom Charting.
    ChartPoint:
      type: object
      properties:
        x:
          type: string
          description: 'Time of this chart point: lower case for javascript encoding simplicty.'
        y:
          type: number
          description: 'Value of this chart point:  lower case for javascript encoding simplicty.'
          format: float
      description: Location on a chart containing the X-Y location
    CreateCompileRequest:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id we wish to compile.
      description: Request to compile a project.
    CoinbaseSettings:
      type: object
      properties:
        id:
          type: string
          description: ID of the brokerage, this is, CoinbaseBrokerage
        coinbase-api-key:
          type: string
          description: Your Coinbase Advanced Trade API key.
        coinbase-api-secret:
          type: string
          description: Your Coinbase Advanced Trade API secret.
        coinbase-url:
          type: string
          description: Coinbase URL, this is, wss://advanced-trade-ws.coinbase.com
        coinbase-rest-api:
          type: string
          description: Coinbase REST API, this is, https://api.coinbase.com
        holdings:
          type: array
          description: List of holdings for the brokerage.
          items:
            $ref: '#/components/schemas/BrokerageHolding'
      description: Settings for using Coinbase as a data provider or brokerage.
    Collaborator:
      type: object
      properties:
        uid:
          type: integer
          description: User ID.
        liveControl:
          type: boolean
          description: Indicate if the user have live control.
        permission:
          type: string
          description: The permission this user is given.
          enum:
          - read
          - write
        publicId:
          type: string
          description: The user public ID.
        profileImage:
          type: string
          description: The url of the user profile image.
          example: "https://cdn.quantconnect.com/web/i/users/profile/abc123.jpeg"
        email:
          type: string
          description: The registered email of the user.
          example: "abc@123.com"
        name:
          type: string
          description: The display name of the user.
        bio:
          type: string
          description: The biography of the user.
        owner:
          type: boolean
          description: Indicate if the user is the owner of the project.
    CreateCollaboratorRequest:
      type: object
      required:
        - projectId
        - collaboratorUserId 
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id we want to add the collaborator to.
        collaboratorUserId:
          type: string
          example: "mia-ai"
          description: User Id of the collaborator we want to add.
        collaborationLiveControl:
          type: boolean
          example: true
          description: Gives the right to deploy and stop live algorithms.
        collaborationWrite:
          type: boolean
          example: false
          description: Gives the right to edit the code.
      description: Request to add a new collaborator.
    CreateCollaboratorResponse:
      type: object
      properties:
        collaborators:
          type: array
          description: List of collaborators.
          items:
            $ref: '#/components/schemas/Collaborator'
        success:
          type: boolean
          description: Indicate if the API request was successful.
      description: Response received when creating collaborator.
    ReadCollaboratorsRequest:
      required:
      - projectId
      type: object
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project from which to read one or multiple collaborators.
      description: Request to list the collaborators in a project.
    ReadCollaboratorsResponse:
      type: object
      properties:
        collaborators:
          type: array
          description: List of collaborators.
          items:
            $ref: '#/components/schemas/Collaborator'
        userLiveControl:
          type: boolean
          description: Indicate if the user has the right to deploy and stop live algorithms.
        userPermissions:
          type: string
          description: List the user permissions - write/read
        success:
          type: boolean
          description: Indicate if the API request was successful.
      description: Response received when reading the collaborators of a project.
    UpdateCollaboratorRequest:
      type: object
      required:
        - projectId
        - collaboratorUserId 
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id we want to add the collaborator to.
        collaboratorUserId:
          type: string
          example: "mia-ai"
          description: User Id of the collaborator we want to add.
        liveControl:
          type: boolean
          example: true
          description: Gives the right to deploy and stop live algorithms.
        write:
          type: boolean
          example: true
          description: Gives the right to edit the code.
      description: Request to update an existing collaborator.
    UpdateCollaboratorResponse:
      type: object
      properties:
        collaborators:
          type: array
          description: List of collaborators.
          items:
            $ref: '#/components/schemas/Collaborator'
        success:
          type: boolean
          description: Indicate if the API request was successful.
      description: Response received when updating collaborator.
    DeleteCollaboratorRequest:
      type: object
      required:
        - projectId
        - collaboratorUserId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id we want to remove the collaborator from.
        collaboratorUserId:
          type: string
          example: "mia-ai"
          description: User Id of the collaborator we want to remove.
      description: Request to remove a collaborator.
    DeleteCollaboratorResponse:
      type: object
      properties:
        collaborators:
          type: array
          description: List of collaborators.
          items:
            $ref: '#/components/schemas/Collaborator'
        success:
          type: boolean
          description: Indicate if the API request was successful.
      description: Response received when removing collaborator.
    CompileFile:
      type: object
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project id.
        open:
          type: boolean
          description: Indicates if the file is being opened.
        isLibrary:
          type: boolean
          description: Indicates if the file is coming from a library project.
        collaborationId:
          type: string
          description: Collaboration id.
      description: File details of files being compiled.
      additionalProperties:
        $ref: '#/components/schemas/ProjectFile'
    CompileResponse:
      type: object
      properties:
        compileId:
          type: string
          example: c0edc6-49048b
          description: Compile Id for a sucessful build.
        state:
          type: string
          description: True on successful compile.
          enum:
          - InQueue
          - BuildSuccess
          - BuildError
        projectId:
          type: integer
          example: 23456789
          description: Project Id we sent for compile.
        signature:
          type: string
          description: Signature key of compilation.
        signatureOrder:
          type: array
          description: Signature order of files to be compiled.
          items:
            type: string
        logs:
          type: array
          description: Logs of the compilation request.
          items:
            type: string
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response from the compiler on a build event.
    CreateBacktestRequest:
      required:
        - projectId
        - compileId
      type: object
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id we sent for compile.
        compileId:
          type: string
          example: c0edc6-49048b
          description: Compile Id for the project to backtest.
        backtestName:
          type: string
          example: "New Backtest"
          description: Optional. Name for the new backtest.
        parameters[name]:
          type: object
          example: parameters[ema_fast] = 10, parameters[ema_slow] = 100
          description: Optional. Parameters used in the backtest.
      description: Request to create a new backtest.
    CreateLiveAlgorithmRequest:
      type: object
      required:
        - projectId
        - compileId
        - nodeId
        - brokerage
        - dataProviders
      properties:
        versionId:
          type: string
          description: The version of the Lean used to run the algorithm. -1 is master, however, sometimes this can create problems with live deployments. If you experience problems using, try specifying the version of Lean you would like to use.
          example: "-1"
        projectId:
          type: integer
          example: 23456789
          description: Project Id.
        compileId:
          type: string
          example: c0edc6-49048b
          description: Compile Id.
        nodeId:
          type: string
          description: Id of the node that will run the algorithm.
        brokerage:
          type: object
          description: Brokerage configurations to be used in the live algorithm.
          enum:
            - $ref: '#/components/schemas/QuantConnectSettings'
            - $ref: '#/components/schemas/InteractiveBrokersSettings'
            - $ref: '#/components/schemas/BinanceSettings'
            - $ref: '#/components/schemas/BinanceFuturesUSDMSettings'
            - $ref: '#/components/schemas/BinanceFuturesCOINSettings'
            - $ref: '#/components/schemas/BinanceUSSettings'
            - $ref: '#/components/schemas/TradierSettings'
            - $ref: '#/components/schemas/BitfinexSettings'
            - $ref: '#/components/schemas/CoinbaseSettings'
            - $ref: '#/components/schemas/KrakenSettings'
            - $ref: '#/components/schemas/BybitSettings'
            - $ref: '#/components/schemas/OandaSettings'
            - $ref: '#/components/schemas/ZerodhaSettings'
            - $ref: '#/components/schemas/SamcoSettings'
            - $ref: '#/components/schemas/WolverineSettings'
            - $ref: '#/components/schemas/CharlesSchwabSettings'
            - $ref: '#/components/schemas/TradingTechnologiesSettings'
            - $ref: '#/components/schemas/RBIBrokerageSettings'
            - $ref: '#/components/schemas/TerminalLinkSettings'
        dataProviders:
          type: object
          description: Dictionary of data provider configurations to be used in the live algorithm.
          key:
            type: string
            description: Data provider ID.
            enum:
              - QuantConnectBrokerage
              - InteractiveBrokersBrokerage
              - Polygon
              - BinanceBrokerage
              - TradierBrokerage
              - OandaBrokerage
              - BitfinexBrokerage
              - CoinbaseBrokerage
              - ZerodhaBrokerage
              - SamcoBrokerage
              - KrakenBrokerage
              - CharlesSchwab
              - BybitBrokerage
              - IEXDataFeed
            example: QuantConnectBrokerage
          value:
            type: object
            description: Data provider configuration.
            enum:
              - $ref: '#/components/schemas/QuantConnectSettings'
              - $ref: '#/components/schemas/InteractiveBrokersSettings'
              - $ref: '#/components/schemas/PolygonSettings'
              - $ref: '#/components/schemas/BinanceSettings'
              - $ref: '#/components/schemas/BinanceFuturesUSDMSettings'
              - $ref: '#/components/schemas/BinanceFuturesCOINSettings'
              - $ref: '#/components/schemas/BinanceUSSettings'
              - $ref: '#/components/schemas/TradierSettings'
              - $ref: '#/components/schemas/BitfinexSettings'
              - $ref: '#/components/schemas/CoinbaseSettings'
              - $ref: '#/components/schemas/KrakenSettings'
              - $ref: '#/components/schemas/BybitSettings'
              - $ref: '#/companents/schemas/OandaSettings'
              - $ref: '#/components/schemas/ZerodhaSettings'
              - $ref: '#/components/schemas/SamcoSettings'
              - $ref: '#/components/schemas/CharlesSchwabSettings'
              - $ref: '#/components/schemas/IEXDataFeedSettings'
      description: Request to create a live algorithm.
    CreateLiveAlgorithmResponse:
      type: object
      properties:
        live:
          type: object
          description: Echo of the algorithm created.
          $ref: '#/components/schemas/LiveAlgorithm'
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received when deploying a live algorithm.
    CreateLiveCommandRequest:
      type: object
      required: 
        - projectId
        - command
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project for the live instance we want to run the command against.
        command:
          type: object
          description: The command to run.
          example: { "$type": "OrderCommand", "symbol": { "id": "BTCUSD 2XR", "value": "BTCUSD" }, "order_type": "market", "quantity": "0.1", "limit_price": 0, "stop_price": 0, "tag": "" }
      description: Request to create a live command.
    BroadcastLiveCommandRequest:
      type: object
      required: 
        - organizationId
        - command
      properties:
        organizationId:
          type: string
          description: Organization Id of the projects we would like to broadcast the command to
          example: 5cad178b20a1d52567b534553413b691
        excludeProjectId:
          type: integer
          example: 23456789
          description: Project for the live instance we want to exclude from the broadcast list. If null, all projects will be included.
        command:
          type: object
          description: The command to run.
          example: { "$type": "OrderCommand", "symbol": { "id": "BTCUSD 2XR", "value": "BTCUSD" }, "order_type": "market", "quantity": "0.1", "limit_price": 0, "stop_price": 0, "tag": "" }
      description: Request to create a live command.
    CreateOptimizationRequest:
      type: object
      required:
        - projectId
        - name
        - target
        - targetTo
        - targetValue
        - strategy
        - compileId
        - parameters
        - estimatedCost
        - nodeType
        - parallelNodes
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project ID of the project the optimization belongs to.
        name:
          type: string
          example: "Mia First Optimization Job"
          description: Name of the optimization.
        target:
          type: string
          description: Target of the optimization.
          example: TotalPerformance.PortfolioStatistics.SharpeRatio
        targetTo:
          type: string
          description: Target extremum of the optimization.
          example: \'max\' or \'min\'
        targetValue:
          type: float
          description: Optimization target value.
          example: 1
        strategy:
          type: string
          description: Optimization strategy.
          example: QuantConnect.Optimizer.Strategies.GridSearchOptimizationStrategy
        compileId:
          type: string
          example: c0edc6-49048b
          description: Optimization compile ID.
        parameters:
          type: array
          description: Optimization parameters.
          items:
            $ref: '#/components/schemas/OptimizationParameter'
        constraints:
          type: array
          description: Optimization constraints.
          items:
            $ref: '#/components/schemas/OptimizationConstraint'
        estimatedCost:
          type: float
          description: Estimated cost for optimization.
          example: 10
        nodeType:
          type: string
          description: Optimization node type.
          example: O2-8
          enum:
          - O2-8
          - O4-12
          - O8-16          
        parallelNodes:
          type: integer
          description: Number of parallel nodes for optimization.
          example: 4
      description: Request to create an optimization job.
    CreateOptimizationResponse:
      type: object
      properties:
        optimizationId:
          type: string
          example: O-401d3d40b5a0e9f8c46c954a303f3ddd
          description: Optimization ID.
        projectId:
          type: integer
          example: 23456789
          description: Project ID of the project the optimization belongs to.
        name:
          type: string
          description: Name of the optimization.
        status:
          type: string
          description: Status of the optimization.
          enum:
          - New
          - Aborted
          - Running
          - Completed
        nodeType:
          type: string
          description: Optimization node type.
          example: O2-8
          enum:
          - O2-8
          - O4-12
          - O8-16 
        criterion:
          type: object
          description: Optimization statistical target.
          $ref: '#/components/schemas/OptimizationTarget'
        created:
          type: string
          description: Date when this optimization was created.
          format: date-time
        psr:
          type: number
          description: Price-sales ratio stastic.
        sharpeRatio:
          type: number
          description: Sharpe ratio statistic.
        trades:
          type: integer
          description: Number of trades.
        cloneId:
          type: integer
          description: ID of project, were this current project was originally cloned.
        outOfSampleDays:
          type: integer
          description: Number of days of out of sample days.
        outOfSampleMaxEndDate:
          type: string
          description: End date of out of sample data.
          format: date-time
        parameters:
          type: array
          description: Parameters used in this optimization.
          items:
            type: object
            $ref:  '#/components/schemas/OptimizationParameter'
      description: Response received when launching an optimization job.
    CreateProjectRequest:
      type: object
      required:
        - name
        - language
      properties:
        name:
          type: string
          description: Project name.
        language:
          type: string
          description: Programming language to use.
          enum:
          - C#
          - Py
        organizationId:
          type: string
          example: 5cad178b20a1d52567b534553413b691
          description: Optional parameter for specifying organization to create project under. If none provided web defaults to preferred.
      description: Request to create a project with the specified name and language via QuantConnect.com API.
    CreateProjectFileRequest:
      type: object
      required:
        - projectId
        - name
        - content
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id to which the file belongs.
        name:
          type: string
          example: main.py
          description: The name of the new file.
        content:
          type: string
          example: |
            class CustomClass:
                def __init__(self):
                    pass
          description: The content of the new file.
      description: Request to add a file to a project.
    DeleteFileRequest:
      type: object
      required:
        - projectId
        - name
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id to which the file belongs.
        name:
          type: string
          example: file.py
          description: The name of the file that should be deleted.
      description: Request to delete a file in a project.
    DeleteProjectRequest:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id to which the file belongs.
      description: Request to delete a project.
    DeleteBacktestRequest:
      type: object
      required:
        - projectId
        - backtestId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id for the backtest we want to delete.
        backtestId:
          type: string
          example: 26c7bb06b8487cff1c7b3c44652b30f1
          description: Backtest Id we want to delete.
      description: Request to delete a backtest.
    DeleteObjectStoreRequest:
      type: object
      required:
        - organizationId
        - key
      properties:
        organizationId:
          type: string
          example: 5cad178b20a1d52567b534553413b691
          description: Organization ID we'd like to delete the Object Store file from.
        key:
          type: string
          example: key1
          description: Key to the Object Store file
      description: Request to delete Object Store metadata of a specific organization and key.    
    DeleteOptimizationRequest:
      type: object
      properties:
        optimizationId:
          type: string
          example: O-401d3d40b5a0e9f8c46c954a303f3ddd
          description: Optimization ID we want to delete.
      description: Delete an optimization.
    EncryptionKey:
      type: object
      properties:
        id:
          type: string
          description: Encryption key id.
        name:
          type: string
          description: Name of the encryption key.
      description: Encryption key details.
    Estimate:
      type: object
      properties:
        estimateId:
          type: string
          description: Estimate Id.
        time:
          type: integer
          description: Estimate time in seconds.
          example: 60
        balance:
          type: integer
          description: Estimate balance in QCC.
          example: 10
      description: Response received when estimating the cost of an optimization.
    EstimateOptimizationRequest:
      type: object
      required:
        - projectId
        - name
        - target
        - targetValue
        - targetTo
        - strategy
        - compileId
        - parameters
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project ID of the project the optimization belongs to.
        name:
          type: string
          example: "Mia First Optimization Job"
          description: Name of the optimization.
        target:
          type: string
          description: Target of the optimization.
          example: TotalPerformance.PortfolioStatistics.SharpeRatio
        targetTo:
          type: string
          description: Target extremum of the optimization.
          example: \'max\' or \'min\'
        targetValue:
          type: float
          description: Optimization target value.
          example: 1
        strategy:
          type: string
          description: Optimization strategy.
          example: QuantConnect.Optimizer.Strategies.GridSearchOptimizationStrategy
        compileId:
          type: string
          example: c0edc6-49048b
          description: Optimization compile ID.
        parameters:
          type: array
          description: Optimization parameters.
          items:
            $ref: '#/components/schemas/OptimizationParameter'
        constraints:
          type: array
          description: Optimization constraints.
          items:
            $ref: '#/components/schemas/OptimizationConstraint'
      description: Request to estimate the cost of an optimization job.
    EstimateOptimizationResponse:
      type: object
      properties:
        estimate:
          $ref: '#/components/schemas/Estimate'
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received when estimating the cost of an optimization.
    GetObjectStoreJobIdRequest:
      type: object
      required:
        - organizationId
        - keys
      properties:
        organizationId:
          type: string
          example: 5cad178b20a1d52567b534553413b691
          description: Organization ID we would like to get the Object Store files from.
        keys:
          type: array
          example: "[\"key1\", \"key2\"]"
          description: Keys to the Object Store files.
          items:
            type: string
      description: Request to get JobId for the requested Object Store files.
    GetObjectStoreURLRequest:
      type: object
      required:
        - organizationId
        - jobId
      properties:
        organizationId:
          type: string
          example: 5cad178b20a1d52567b534553413b691
          description: Organization ID we would like to get the Object Store files from.
        jobId:
          type: string
          example: string
          description: Job ID for getting a download URL for.
      description: Request to get a download URL for certain Object Store files.
    GetObjectStorePropertiesRequest:
      type: object
      required:
        - organizationId
        - key
      properties:
        organizationId:
          type: string
          example: 5cad178b20a1d52567b534553413b691
          description: Organization ID we would like to get the Object Store properties from.
        key:
          type: string
          example: key1
          description: Key to the Object Store.
      description: Request to get Object Store properties of a specific organization and keys.
    GetObjectStoreResponse:
      type: object
      properties:
        jobId:
          type: string
          description: Job ID which can be used for querying state or packaging.
        url:
          type: string
          description: The URL to download the object. This can also be null.
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received when fetching Object Store file.
    GetObjectStorePropertiesResponse:
      type: object
      properties:
        metadata:
          type: object
          description: Object Store properties.
          $ref: '#/components/schemas/ObjectStoreProperties'
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received when fetching Object Store file properties.
    ObjectStoreProperties:
      type: object
      properties:
        key:
          type: string
          description: Object Store key.
        modified:
          type: string
          description: Last time it was modified.
          format: date
        created:
          type: string
          description: Date this project was created.
        size:
          type: float
          description: Object Store file size.
          example: 24
        md5:
          type: string
          description: MD5 (hashing algorithm) hash authentication code.
        mime:
          type: string
          description: MIME type.
        preview:
          type: string
          description: Preview of the Object Store file content.
      description: Object Store file properties.
    Grid:
      type: object
      properties:
        xs:
          type: array
          description: List of chart in the xs (Extra small) position.
          items:
            $ref: '#/components/schemas/GridChart'
        sm:
          type: array
          description: List of chart in the sm (Small) position.
          items:
            $ref: '#/components/schemas/GridChart'
        md:
          type: array
          description: List of chart in the md (Medium) position.
          items:
            $ref: '#/components/schemas/GridChart'
        lg:
          type: array
          description: List of chart in the lg (Large) position.
          items:
            $ref: '#/components/schemas/GridChart'
        xl:
          type: array
          description: List of chart in the xl (Extra large) position.
          items:
            $ref: '#/components/schemas/GridChart'
      description: The grid arrangement of charts.
    GridChart:
      type: object
      properties:
        chartName:
          type: string
          description: The chart name.
        width:
          type: integer
          description: Width of the chart.
        height:
          type: integer
          description: Height of the chart.
        row:
          type: integer
          description: Number of rows of the chart.
        column:
          type: integer
          description: Number of columns of the chart.
        sort:
          type: integer
          description: Sort of the chart.
      description: The chart display properties.
    GroupOrderManager:
      type: object
      properties:
        id:
          type: integer
          description: The unique order group Id.
        quantity:
          type: number
          description: The group order quantity.
        count:
          type: integer
          description: The total order count associated with this order group.
        limitPrice:
          type: number
          description: The limit price associated with this order group if any.
        orderIds:
          type: array
          description: The order Ids in this group.
          items:
            type: integer
        direction:
          type: integer
          description: Order Direction Property based off Quantity.
      description: Manager of a group of orders.
    Holding:
      type: object
      properties:
        symbol:
          $ref: '#/components/schemas/Symbol'
        type:
          type: string
          description: Type of tradable security / underlying asset.
          enum:
            - Base
            - Equity
            - Option
            - Commodity
            - Forex
            - Future
            - Cfd
            - Crypto
        currencySymbol:
          type: string
          description: The currency symbol of the holding.
          example: $
        averagePrice:
          type: number
          description: Average Price of our Holding in the currency the symbol is traded in.
          format: float
        quantity:
          type: number
          description: Quantity of the Symbol we hold.
          format: float
        marketPrice:
          type: number
          description: Current Market Price of the Asset in the currency the symbol is traded in.
          format: float
        conversionRate:
          type: number
          description: Current market conversion rate into the account currency.
          format: float
        marketValue:
          type: number
          description: Current market value of the holding.
          format: float
        unrealizedPnl:
          type: number
          description: Current unrealized P/L of the holding.
          format: float
      description: Live results object class for packaging live result data.
    BrokerageHolding:
      type: object
      properties:
        symbolId:
          type: string
          description: Symbol ID of the holding.
        symbol:
          type: string
          description: Symbol ticker of the holding.
        quantity:
          type: number
          description: Quantity of the Symbol we hold.
          format: float
        averagePrice:
          type: number
          description: Average Price of our Holding in the currency the symbol is traded in.
          format: float
      description: Holding object class for creating a live algorithm.
    IEXDataFeedSettings:
      type: object
      properties:
        id:
          type: string
          description: Data provider ID, this is, IEXDataFeed.
        iex-cloud-api-key:
          type: string
          description: Your iexcloud.io API token publishable key.
        iex-price-plan:
          type: string
          description: Your IEX Cloud Price plan.
          enum:
            - Launch
            - Grow
            - Enterprise
      description: Settings for using IEX Cloud as a data provider.
    Insight:
      type: object
      properties:
        id:
          type: string
          description: Insight ID.
        groupId:
          type: string
          description: ID of the group of insights.
        sourceModel:
          type: string
          description: Name of the model that sourced the insight.
        generatedTime:
          type: string
          description: Gets the utc unixtime this insight was generated.
        createdTime:
          type: number
          description: Gets the utc unixtime this insight was created.
          format: float
        closeTime:
          type: number
          description: Gets the utc unixtime this insight was closed.
          format: float
        symbol:
          type: string
          description: Gets the symbol ID this insight is for.
        ticker:
          type: string
          description: Gets the symbol ticker this insight is for.
        type:
          type: string
          description: Gets the type of insight, for example, price or volatility.
          enum:
          - price
          - volatility
        reference:
          type: string
          description: Gets the initial reference value this insight is predicting against.
        referenceValueFinal:
          type: string
          description: Gets the final reference value, used for scoring, this insight is predicting against.
        direction:
          type: string
          description: Gets the predicted direction, down, flat or up.
          enum:
          - down
          - flat
          - up
        period:
          type: number
          description: Gets the period, in seconds, over which this insight is expected to come to fruition.
          format: float
        magnitude:
          type: number
          description: Gets the predicted percent change in the insight type (price/volatility). This value can be null.
          format: float
        confidence:
          type: number
          description: Gets the confidence in this insight. This value can be null.
          format: float
        weight:
          type: number
          description: Gets the portfolio weight of this insight. This value can be null.
          format: float
        scoreIsFinal:
          type: boolean
          description: Gets whether or not this is the insight's final score.
          format: float
        scoreDirection:
          type: number
          description: Gets the direction score.
          format: float
        scoreMagnitude:
          type: number
          description: Gets the magnitude score.
          format: float
        estimatedValue:
          type: number
          description: Gets the estimated value of this insight in the account currency.
          format: float
        tag:
          type: string
          description: The insight's tag containing additional information
          format: float
      description: Insight struct for emitting new prediction.
    KrakenSettings:
      type: object
      properties:
        id:
          type: string
          description: ID of the brokerage, this is, KrakenBrokerage.
        kraken-api-key:
          type: string
          description: Your Kraken API key.
        kraken-api-secret:
          type: string
          description: Your Kraken API secret.
        kraken-verification-tier:
          type: string
          description: Your Kraken Verification Tier.
      description: Settings for using Kraken as a data provider.
    LeanVersionsResponse:
      type: object
      properties:
        versions:
          type: array
          description: List of LEAN versions with their basic descriptions.
          items:
            type: object
            $ref: '#/components/schemas/LeanVersion'
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Contains the LEAN versions with their basic descriptions.
    LeanVersion:
      type: object
      properties:
        id:
          type: integer
          description: ID of the LEAN version.
        created:
          type: string
          description: Date when this version was created.
          format: date-time
        description:
          type: string
          description: Description of the LEAN version.
        leanHash:
          type: string
          description: Commit Hash in the LEAN repository.
        leanCloudHash:
          type: string
          description: Commit Hash in the LEAN Cloud repository.
        name:
          type: string
          description: Name of the branch where the commit is.
        ref:
          type: string
          description: Reference to the branch where the commit is.
        public:
          type: integer
          description: Indicates if the version is available for the public (1) or not (0).
    Library:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id of the library project.
        libraryName:
          type: string
          description: Name of the library project.
        ownerName:
          type: string
          description: Name of the library project owner.
        access:
          type: boolean
          description: Indicate if the library project can be accessed.
    LiveAlgorithm:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id for the live instance.
        deployId:
          type: string
          example: L-sdf86b7045bb83203e79d2aa6150b321
          description: Unique live algorithm deployment identifier (similar to a backtest id).
        status:
          type: string
          description: States of a live deployment.
          enum:
            - DeployError
            - InQueue
            - Running
            - Stopped
            - Liquidated
            - Deleted
            - Completed
            - RuntimeError
            - Invalid
            - LoggingIn
            - Initializing
            - History
        launched:
          type: string
          description: Datetime the algorithm was launched in UTC.
          format: date-time
        stopped:
          type: string
          description: Datetime the algorithm was stopped in UTC, null if its still running.
          format: date-time
        brokerage:
          type: string
          description: Brokerage
          enum:
          - Interactive
          - FXCM
          - Oanda
          - Tradier
          - PaperBrokerage
          - Alpaca
          - Bitfinex
          - Binance
          - Coinbase
        subscription:
          type: string
          description: Chart we're subscribed to.
        error:
          type: string
          description: Live algorithm error message from a crash or algorithm runtime error.
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Live algorithm instance result from the QuantConnect Rest API.
    LiveAuthenticationData:
      type: object
      description: Authentication details of the live brokerage. Details on each brokerage refers to https://www.quantconnect.com/docs/v2/lean-cli/api-reference/lean-cloud-live-deploy.
    LiveForm:
      type: object
      properties:
        brokerageData:
          $ref: '#/components/schemas/BrokerageData'
        dataProvidersData:
          type: array
          description: The data providers used in the live deployment.
          items:
            $ref: '#/components/schemas/BrokerageId'
        node:
          type: string
          description: Node ID of the live node deployed.
        notifyInsights:
          type: string
          description: Indicates if notification should be issued on new insights.
          enum:
          - "true"
          - "false"
        notifyOrderEvents:
          type: string
          description: Indicates if notification should be issued on new order events.
          enum:
          - "true"
          - "false"
        autoRestart:
          type: string
          description: Indicates if the live algorithm should automatically restart after encountering runtime errors.
          enum:
          - "true"
          - "false"
    LiveAlgorithmResults:
      type: object
      properties:
        message:
          type: string
          example: message
          description: Error message.
        status:
          type: string
          example: Running
          description: Indicates the status of the algorihtm, i.e. 'Running', 'Stopped'.
        deployId:
          type: string
          example: L-sdf86b7045bb83203e79d2aa6150b321
          description: Algorithm deployment ID.
        cloneId:
          type: integer
          description: The snapshot project ID for cloning the live development's source code.
        launched:
          type: string
          description: Date the live algorithm was launched.
        stopped:
          type: string
          description: Date the live algorithm was stopped.
        brokerage:
          type: string
          description: Brokerage used in the live algorithm.
        securityTypes:
          type: string
          description: Security types present in the live algorithm.
        projectName:
          type: string
          description: Name of the project the live algorithm is in.
        dataCenter:
          type: string
          description: Name of the data center where the algorithm is physically located.
        public:
          type: boolean
          description: Indicates if the algorithm is being live shared.
        files:
          type: array
          description: Files present in the project in which the algorithm is.
          items:
            $ref: '#/components/schemas/ProjectFile'
        runtimeStatistics:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/RuntimeStatistics'
          description: Runtime banner/updating statistics in the title banner of the live algorithm GUI. It can be empty if the algorithm is not running.
        charts:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ChartSummary'
          description: Chart updates for the live algorithm since the last result packet.
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Details a live algorithm from the live/read API endpoint.
    LiveAlgorithmListResponse:
      type: object
      properties:
        live:
          type: array
          description: Algorithm list matching the requested status.
          items:
            $ref: '#/components/schemas/LiveAlgorithm'
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: List of the live algorithms running which match the requested status.
    LiquidateLiveAlgorithmRequest:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id for the live instance we want to liquidate.
      description: Request to liquidate a live algorithm.
    ListObjectStoreRequest:
      type: object
      required:
        - organizationId
      properties:
        organizationId:
          type: string
          example: 5cad178b20a1d52567b534553413b691
          description: Organization ID we'd like to list the Object Store files from.
        path:
          type: string
          example: "/folder1"
          description: Optional. Path to the Object Store files.
      description: Request to list Object Store files of a specific organization and path.
    ListObjectStoreResponse:
      type: object
      properties:
        path:
          type: string
          description: Path to the files in the Object Store.
          example: Mia
        objects:
          type: array
          description: List of objects stored.
          items:
            $ref: '#/components/schemas/ObjectStoreSummary'
        objectStorageUsed:
          type: integer
          description: Size of all objects stored in bytes.
        objectStorageUsedHuman:
          type: string
          description: Size of all the objects stored in human-readable format.
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received containing a list of stored objects metadata, as well as the total size of all of them.
    ListOptimizationRequest:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project ID we'd like to get a list of optimizations for.
      description: Project ID we'd like to get a list of optimizations for.
    ListOptimizationResponse:
      type: object
      properties:
        optimizations:
          type: array
          description: Collection of summarized optimization objects.
          items:
            $ref: '#/components/schemas/CreateOptimizationResponse'
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received when listing optimizations of a project.
    LivePortfolioResponse:
      type: object
      properties:
        portfolio:
          $ref: '#/components/schemas/Portfolio'
      description: Contains holdings and cash of the live algorithm in the request criteria.
    LiveOrdersResponse:
      type: object
      properties:
        orders:
          type: array
          description: Collection of orders.
          items:
            $ref: '#/components/schemas/Order'
        length:
          type: integer
          description: Total number of returned orders
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Contains orders and the number of orders of the live algorithm in the request criteria.
    LiveInsightsResponse:
      type: object
      properties:
        insights:
          type: array
          description: Collection of insights.
          items:
            $ref: '#/components/schemas/Insight'
        length:
          type: integer
          description: Total number of returned insights
        success:
          type: boolean
          description: Indicate if the API request was successful.
      description: Contains insights and the number of insights of the live algorithm in the request criteria.
    LoadingChartResponse:
      type: object
      properties:
        progress:
          type: number
          description: Loading percentage of the chart generation process.
        status:
          type: string
          description: Status of the chart generation process.
          example: loading
        success:
          type: boolean
          description: Indicate if the API request was successful.
      description: Response when the requested chart is being generated.
    Market:
      type: string
      description: Fungible market of the underlying security.
      enum:
      - usa
      - oanda
      - fxcm
      - dukascopy
      - bitfinex
      - cmeglobex
      - nymex
      - cbot
      - ice
      - cboe
      - nse
      - comex
      - cme
      - sgx
      - hkfe
      - coinbase
      - kraken
      - bitstamp
      - okcoin
      - bithumb
      - binance
      - poloniex
      - coinone
      - hitbtc
      - bittrex
    Node:
      type: object
      required:
        - projectId
      properties:
        speed:
          type: float
          description: The nodes cpu clock speed in GHz.
        price:
          $ref: '#/components/schemas/NodePrices'
          description: The monthly and yearly prices of the node in US dollars.
        cpu:
          type: integer
          description: CPU core count of node.
        ram:
          type: float
          description: Size of RAM in Gigabytes.
        name:
          type: string
          description: Name of the node.
        sku:
          type: string
          description: Node type identifier for configuration.
        description:
          type: string
          description: Description of the node.
        usedBy:
          type: string
          description: User currently using the node.
        userProfile:
          type: string
          description: URL of the user using the node.
        projectName:
          type: string
          description: Project the node is being used for.
        projectId:
          type: integer
          example: 23456789
          description: Id of the project the node is being used for.
        busy:
          type: boolean
          description: Indicates if the node is currently busy.
        id:
          type: string
          description: Full Id of node.
        assets:
          type: integer
          description: Maximum number of assets recommended for this node.
        host:
          type: string
          description: Node host. 
        active:
          type: boolean
          description: Indicate if this is the active node. The project will use this node if it's not busy.
        hasGpu:
          type: integer
          description: Indicate if the node has GPU (1) or not (0).
      description: Contains all relevant information on a Node to interact through API endpoints.
    OandaSettings:
      type: object
      properties:
        id:
          type: string
          description: ID of the brokerage, this is, OandaBrokerage.
        oanda-account-id:
          type: string
          description: Your OANDA account id can be found on your OANDA Account Statement page (https://www.oanda.com/account/statement/). It follows the following format '###-###-######-###'.
        oanda-access-token:
          type: string
          description: Your OANDA API token. You can generate an API token from the Manage API Access page (https://www.oanda.com/account/tpa/personal_token).
        oanda-environment:
          type: string
          description: The environment to run in, Practice for fxTrade Practice, Trade for fxTrade.
          enum:
            - Practice
            - Trade
      description: Settings for using Oanda as a data provider or brokerage.
    ObjectStoreBinaryFile:
      type: object
      required:
        - organizationId
        - key
        - objectData
      properties:
        organizationId:
          type: string
          example: 5cad178b20a1d52567b534553413b691
          description: Orgainization ID.
        key:
          type: string
          example: key1
          description: Unique key to access the object in Object Store.
        objectData:
          type: string
          format: binary
          description: Object data to be stored.
      description: Represents a binary file we we'd like to upload the file to upload to the Object Store.
    ObjectStoreSummary:
      type: object
      properties:
        key:
          type: string
          description: Object Store key.
          example: "Mia/Test"
        name:
          type: string
          description: File or folder name.
        modified:
          type: string
          description: Last time it was modified.
          format: date-time
        mime:
          type: string
          description: MIME type.
          example: application/json
        folder:
          type: boolean
          description: True if it is a folder, false otherwise.
        size:
          type: float
          description: Object Store file size.
          example: 13
      description: Summary information of the Object Store.
    OptimizationConstraint:
      type: object
      properties:
        target:
          type: string
          description: Property we want to track
          example: TotalPerformance.PortfolioStatistics.SharpeRatio
        operator:
          type: string
          description: The target comparison operation
          example: greater
        targetValue:
          type: float
          description: The value of the property we want to track
          example: 1
    OptimizationParameter:
      type: object
      properties:
        name:
          type: string
          description: Name of optimization parameter.
          example: rsi_period
        min:
          type: float
          description: Minimum value of optimization parameter, applicable for boundary conditions.
          example: 10
        max:
          type: float
          description: Maximum value of optimization parameter, applicable for boundary conditions.
          example: 20
        step:
          type: float
          description: Movement, should be positive
          example: 1
        minStep:
          type: float
          description: Minimal possible movement for current parameter, should be positive. Used by <code>Strategies.EulerSearchOptimizationStrategy</code> to determine when this parameter can no longer be optimized.
          example: 1
    OptimizationTarget:
      type: object
      properties:
        target:
          type: string
          description: Property we want to track
          example: TotalPerformance.PortfolioStatistics.SharpeRatio
        extremum:
          type: string
          description: Defines the direction of optimization.
          example: max or min
        targetValue:
          type: float
          description: The value of the property we want to track
          example: 1
    ProjectNodes:
      type: object
      properties:
        backtest:
          type: array
          description: Collection of backtest nodes.
          items:
            $ref: '#/components/schemas/Node'
        live:
          type: array
          description: Collection of live nodes.
          items:
            $ref: '#/components/schemas/Node'
        research:
          type: array
          description: Collection of research nodes.
          items:
            $ref: '#/components/schemas/Node'
      description: Contains sets of node lists for each target environment.
    NodePrices:
      type: object
      properties:
        monthly:
          type: integer
          description: The monthly price of the node in US dollars.
        yearly:
          type: integer
          description: The yearly price of the node in US dollars.
      description: Node prices from node object.
    NodeType:
      type: string
      description: NodeTypes enum for all possible options of target environments.
      enum:
      - Backtest
      - Research
      - Live
    Optimization:
      type: object
      required:
        - projectId
      properties:
        optimizationId:
          type: string
          example: O-401d3d40b5a0e9f8c46c954a303f3ddd
          description: Optimization ID.
        snapshotId:
          type: string
          description: Snapshot iD of this optimization.
        projectId:
          type: string
          example: 23456789
          description: Project ID of the project the optimization belongs to.
        name:
          type: string
          description: Name of the optimization.
        status:
          type: string
          description: Status of the optimization.
          enum:
          - New
          - Aborted
          - Running
          - Completed
        nodeType:
          type: string
          description: Optimization node type.
          example: O2-8
          enum:
          - O2-8
          - O4-12
          - O8-16 
        parallelNodes:
          type: integer
          description: Number of parallel nodes for optimization.
          example: 4
        criterion:
          type: object
          description: Optimization statistical target.
          $ref: '#/components/schemas/OptimizationTarget'
        runtimeStatistics:
          type: object
          additionalProperties:
            type: string
          description: Dictionary representing a runtime banner/updating statistics for the optimization.
        constraints:
          type: array
          description: Optimization constraints.
          items:
            $ref: '#/components/schemas/OptimizationConstraint'
        parameters:
          type: array
          description: Optimization parameters.
          items:
            $ref: '#/components/schemas/OptimizationParameter'
        backtests:
          type: object
          description: Dictionary of optimization backtests.
          items:
            $ref: '#/components/schemas/OptimizationBacktest'
        strategy:
          type: string
          description: Optimization strategy.
          example: QuantConnect.Optimizer.Strategies.GridSearchOptimizationStrategy
        requested:
          type: string
          description: Optimization requested date and time.
          format: date-time
        optimizationTarget:
          type: string
          description: Statistic to be optimized.
        gridLayout:
          type: array
          description: List with grid charts representing the grid layout.
          items:
            type: object
            $ref: '#/components/schemas/GridChart'
        outOfSampleMaxEndDate:
          type: string
          description: End date of out of sample data.
        outOfSampleDays:
          type: integer
          description: Number of days of out of sample days.
      description: Response received when launching an optimization job.
    OptimizationBacktest:
      type: object
      properties:
        name:
          type: string
          description: The backtest name.
        id:
          type: string
          description: The backtest id
        progress:
          type: string
          description: Progress of the backtest as a percentage from 0-1 based on the days lapsed from start-finish.
        exitCode:
          type: integer
          description: The exit code of this backtest
        statistics:
          type: array
          description: The backtest statistics results.
          items:
            type: number
        parameterSet:
          type: object
          description: Dictionary representing a combination as key value of parameters, i.e. order doesn't matter.
        equity:
          type: array
          description: The backtest equity chart series.
          items:
            type: integer
        startDate:
          type: string
          description: The backtest start date.
          format: date-time
        endDate:
          type: string
          description: The backtest end date.
          format: date-time
        outOfSampleDays:
          type: integer
          description: The backtest out of sample day count.
        outOfSampleMaxEndDate:
          type: string
          description: Backtest maximum end date.
    Order:
      type: object
      properties:
        id:
          type: integer
          description: Order ID.
        contingentId:
          type: integer
          description: Order Id to process before processing this order.
        brokerId:
          type: array
          description: Brokerage Id for this order for when the brokerage splits orders into multiple pieces.
          items:
            type: string
        symbol:
          type: object
          description: Symbol of the asset.
          $ref: '#/components/schemas/Symbol'
        limitPrice:
          type: nummber
          description: Limit price of the Order.
        stopPrice:
          type: number
          description: Stop price of the Order.
        stopTriggered:
          type: boolean
          description: Indicates if the stop price has been reached, so the limit order has been triggered.
        price:
          type: number
          description: Price of the Order.
          format: float
        priceCurrency:
          type: string
          description: Currency for the order price.
        time:
          type: string
          description: Gets the utc time the order was created.
          format: date-time
        createdTime:
          type: string
          description: Gets the utc time this order was created. Alias for Time.
          format: date-time
        lastFillTime:
          type: string
          description: Gets the utc time the last fill was received, or null if no fills have been received.
          format: date-time
        lastUpdateTime:
          type: string
          description: Gets the utc time this order was last updated, or null if the order has not been updated.
          format: date-time
        canceledTime:
          type: string
          description: Gets the utc time this order was canceled, or null if the order was not canceled.
          format: date-time
        quantity:
          type: number
          description: Number of shares to execute.
          format: float
        type:
          type: integer
          description: Order type.
          enum:
          - 0 = Market
          - 1 = Limit
          - 2 = StopMarket
          - 3 = StopLimit
          - 4 = MarketOnOpen
          - 5 = MarketOnClose
          - 6 = OptionExercise
          - 7 = LimitIfTouched
          - 8 = ComboMarket
          - 9 = ComboLimit
          - 10 = ComboLegLimit
          - 11 = TrailingStop
        status:
          type: integer
          description: Status of the Order.
          enum:
          - 0 = New
          - 1 = Submitted
          - 2 = PartiallyFilled
          - 3 = Filled
          - 5 = Canceled
          - 6 = None
          - 7 = Invalid
          - 8 = CancelPending
          - 9 = UpdateSubmitted
        tag:
          type: string
          description: Tag the order with some custom data.
        securityType:
          type: integer
          description: Type of tradable security / underlying asset.
          enum:
            - 0 = Base
            - 1 = Equity
            - 2 = Option
            - 3 = Commodity
            - 4 = Forex
            - 5 = Future
            - 6 = Cfd
            - 7 = Crypto
        direction:
          type: integer
          description: Order Direction Property based off Quantity. 
          enum:
            - 0 = Buy
            - 1 = Sell
            - 2 = Hold
        value:
          type: number
          description: Gets the executed value of this order. If the order has not yet filled, then this will return zero.
          format: float
        orderSubmissionData:
          type: object
          description: Gets the price data at the time the order was submitted.
          $ref: '#/components/schemas/OrderSubmissionData'
        isMarketable:
          type: boolean
          description: Returns true if the order is a marketable order.
        properties:
          type: object
          description: Additional properties of the order.
          $ref: '#/components/schemas/OrderProperties'
        events:
          type: array
          description: The order events.
          items:
            $ref : '#/components/schemas/OrderEvent'
        trailingAmount:
          type: number
          description: Trailing amount for a trailing stop order.
        trailingPercentage:
          type: boolean
          description: Determines whether the trailingAmount is a percentage or an absolute currency value.
        groupOrderManager:
          type: object
          description: Manager for the orders in the group if this is a combo order.
          $ref: '#/components/schemas/GroupOrderManager'
        triggerPrice:
          type: number
          description: The price which, when touched, will trigger the setting of a limit order at limitPrice.
        triggerTouched:
          type: boolean
          description: Whether or not the triggerPrice has been touched.
      description: Order struct for placing new trade.
    OrderProperties:
      type: object
      properties:
        timeInForce:
          type: object
          description: Defines the length of time over which an order will continue working before it is cancelled.
          enum:
            - 0 = GoodTilCanceled
            - 1 = Day
            - 2 = GoodTilDate
      description: Additional properties of the order.
    OrderDirection:
      type: string
      description: Direction of the order.
      enum:
      - buy
      - sell
      - hold
    OrderEvent:
      type: object
      properties:
        algorithmId:
          type: string
          description: Algorithm Id, BacktestId or DeployId.
        symbol:
          type: string
          description: Easy access to the order symbol associated with this event.
        symbolValue:
          type: string
          description: The current symbol for this ticker; It is a user friendly symbol representation.
        symbolPermtick:
          type: string
          description: The original symbol used to generate this symbol.
        orderId:
          type: integer
          description: Id of the order this event comes from.
        orderEventId:
          type: integer
          description: The unique order event id for each order.
        id:
          type: integer
          description: The unique order event Id for each order.
        status:
          type: string
          description: Status of the Order.
          enum:
            - new
            - submitted
            - partiallyFilled
            - filled
            - canceled
            - none
            - invalid
            - cancelPending
            - updateSubmitted
        orderFeeAmount:
          type: number
          description: The fee amount associated with the order.
        orderFeeCurrency:
          type: string
          description: The fee currency associated with the order.
        fillPrice:
          type: number
          description: Fill price information about the order.
          format: float
        fillPriceCurrency:
          type: string
          description: Currency for the fill price.
        fillQuantity:
          type: number
          description: Number of shares of the order that was filled in this event.
          format: float
        direction:
          type: string
          description: Order direction.
          $ref: '#/components/schemas/OrderDirection'
        message:
          type: string
          description: Any message from the exchange.
        isAssignment:
          type: boolean
          description: True if the order event is an assignment.
        stopPrice:
          type: number
          description: The current stop price.
          format: float
        limitPrice:
          type: number
          description: The current limit price.
          format: float
        quantity:
          type: number
          description: The current order quantity.
          format: float
        time:
          type: integer
          description: The time of this event in unix timestamp.
        isInTheMoney:
          type: boolean
          description: True if the order event's option is In-The-Money (ITM).
      description: Change in an order state applied to user algorithm portfolio
    OrderSubmissionData:
      type: object
      properties:
        bidPrice:
          type: number
          description: The bid price at an order submission time.
          format: float
        askPrice:
          type: number
          description: The ask price at an order submission time.
          format: float
        lastPrice:
          type: number
          description: The current price at an order submission time.
          format: float
      description: Stores time and price information available at the time an order was submitted.
    ParameterSet:
      type: object
      properties:
        name:
          type: string
          description: Name of parameter.
        value:
          type: number
          description: Value of parameter.
      description: Parameter set.
    PolygonSettings:
      type: object
      properties:
        id:
          type: string
          description: ID of the brokerage, this is, PolygonDataFeed.
        polygon-api-key:
          type: string
          description: Your Polygon.io API Key.
      description: Settings for using Polygon as a data provider.
    Portfolio:
      type: object
      properties:
        holdings:
          type: object
          description: Dictionary of algorithm holdings information.
          key:
            type: string
            description: ID of the symbol of the holding.
            example: AAPL R735QTJ8XC9X
          value:
            type: object
            description: Holding object associated with the symbol ID.
            $ref: '#/components/schemas/Holding'
        cash:
          type: object
          description: Dictionary of algorithm cash currencies information.
          key:
            type: string
            description: Cash currency.
            example: USD
          value:
            type: object
            description: Cash object associated with the cash currency.
            $ref: '#/components/schemas/Cash'
      description: Portfolio object with the holdings and cash information.
    Project:
      type: object
      required:
        - projectId
        - organizationId
        - name
        - modified
        - created
        - ownerId
        - language
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project id.
        organizationId:
          type: string
          example: 5cad178b20a1d52567b534553413b691
          description: Orgainization id.
        name:
          type: string
          description: Name of the project.
        modified:
          type: string
          description: Modified date for the project.
          format: date-time
        created:
          type: string
          description: Date the project was created.
          format: date-time
        ownerId:
          type: integer
          description: Owner id.
        language:
          type: string
          description: Programming language of the project.
          enum:
          - C#
          - Py
        collaborators:
          type: array
          description: List of collaborators.
          items:
            $ref: '#/components/schemas/Collaborator'
        leanVersionId:
          type: integer
          description: The version of LEAN this project is running on.
        leanPinnedToMaster:
          type: boolean
          description: Indicate if the project is pinned to the master branch of LEAN.
        owner:
          type: boolean
          description: Indicate if you are the owner of the project.
        description:
          type: string
          description: The project description.
        channelId:
          type: string
          description: Channel id.
        parameters:
          type: array
          description: Optimization parameters.
          items:
            $ref: '#/components/schemas/ParameterSet'
        libraries:
          type: array
          description: The library projects.
          items:
            $ref: '#/components/schemas/Library'
        grid:
          type: string
          $ref: '#/components/schemas/Grid'
          description: Configuration of the backtest view grid.
        liveGrid:
          type: string
          $ref: '#/components/schemas/Grid'
          description: Configuration of the live view grid.
        paperEquity:
          type: number
          description: The equity value of the last paper trading instance.
          format: float
        lastLiveDeployment:
          type: string
          description: The last live deployment active time.
          format: date-time
        liveForm:
          type: object
          description: The last live wizard content used.
        encrypted:
          type: boolean
          description: Indicates if the project is encrypted.
        codeRunning:
          type: boolean
          description: Indicates if the project is running or not.
        leanEnvironment:
          type: integer
          description: LEAN environment of the project running on.
        encryptionKey:
          $ref: '#/components/schemas/EncryptionKey'
          description: Text file with at least 32 characters to be used to encrypt the project.
      description: Response from reading a project by id.
    ProjectFile:
      type: object
      required:
        - projectId
      properties:
        id:
          type: integer
          description: ID of the project file. This can also be null.
        projectId:
          type: integer
          example: 23456789
          description: ID of the project.
        name:
          type: string
          description: Name of a project file.
        content:
          type: string
          description: Contents of the project file.
        modified:
          type: string
          description: DateTime project file was modified.
          format: date-time
        open:
          type: boolean
          description: Indicates if the project file is open or not.
        isLibrary:
          type: boolean
          description: Indicates if the project file is a library or not. It's always false in live/read and backtest/read.
      description: File for a project.
    ProjectFilesResponse:
      type: object
      properties:
        files:
          type: array
          description: List of project file information.
          items:
            $ref: '#/components/schemas/ProjectFile'
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received when reading files from a project.
    File:
      type: object
      properties:
        name:
          type: string
          description: Name of a file.
        content:
          type: string
          description: Contents of the file.
      description: File for a AI.
    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message.
        stacktrace:
          type: string
          description: Stack trace of the error.
      description: Error information.
    ProjectListResponse:
      type: object
      properties:
        projects:
          type: array
          description: List of projects for the authenticated user.
          items:
            $ref: '#/components/schemas/Project'
        versions:
          type: array
          description: List of LEAN versions.
          items:
            $ref: '#/components/schemas/LeanVersion'
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Project list response.
    ProjectNodesResponse:
      type: object
      properties:
        nodes:
          type: '#/components/schemas/ProjectNodes'
          description: List of project nodes.
        autoSelectNode:
          type: boolean
          description: Indicate if a node is automatically selected.
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received when reading all nodes of a project.
    PortfolioStatistics:
      type: object
      properties:
        averageWinRate:
          type: number
          description: The average rate of return for winning trades.
          format: float
        averageLossRate:
          type: number
          description: The average rate of return for losing trades.
          format: float
        profitLossRatio:
          type: number
          description: The ratio of the average win rate to the average loss rate.
          format: float
        winRate:
          type: number
          description: The ratio of the number of winning trades to the total number of trades.
          format: float
        lossRate:
          type: number
          description: The ratio of the number of losing trades to the total number of trades.
          format: float
        expectancy:
          type: number
          description: The expected value of the rate of return.
          format: float
        startEquity:
          type: number
          description: Initial Equity Total Value.
          format: float
        endEquity:
          type: number
          description: Final Equity Total Value
          format: float
        compoundingAnnualReturn:
          type: number
          description: Annual compounded returns statistic based on the final-starting capital and years.
          format: float
        drawdown:
          type: number
          description: Drawdown maximum percentage.
          format: float
        totalNetProfit:
          type: number
          description: The total net profit percentage.
          format: float
        sharpeRatio:
          type: number
          description: 'Sharpe ratio with respect to risk free rate: measures excess of return per unit of risk.'
          format: float
        probabilisticSharpeRatio:
          type: number
          description: Probabilistic Sharpe Ratio is a probability measure associated with the Sharpe ratio. It informs us of the probability that the estimated Sharpe ratio is greater than a chosen benchmark.
          format: float
        sortinoRatio:
          type: number
          description: Sortino ratio with respect to risk free rate; measures excess of return per unit of downside risk.
          format: float
        alpha:
          type: number
          description: Algorithm "Alpha" statistic - abnormal returns over the risk free rate and the relationshio (beta) with the benchmark returns.
          format: float
        beta:
          type: number
          description: Algorithm beta statistic - the covariance between the algorithm and benchmark performance, divided by benchmark variance.
          format: float
        annualStandardDeviation:
          type: number
          description: Annualized standard deviation
          format: float
        annualVariance:
          type: number
          description: Annualized variance statistic calculation using the daily performance variance and trading days per year.
          format: float
        informationRatio:
          type: number
          description: Information ratio - risk adjusted return.
          format: float
        trackingError:
          type: number
          description: Tracking error volatility (TEV) statistic - a measure of how closely a portfolio follows the index to which it is benchmarked.
          format: float
        treynorRatio:
          type: number
          description: Treynor ratio statistic is a measurement of the returns earned in excess of that which could have been earned on an investment that has no diversifiable risk.
          format: float
        portfolioTurnover:
          type: number
          description: The average Portfolio Turnover.
          format: float
        valueAtRisk99:
          type: number
          description: The 1-day VaR for the portfolio, using the Variance-covariance approach. Assumes a 99% confidence level, 1 year lookback period, and that the returns are normally distributed.
          format: float
        valueAtRisk95:
          type: number
          description: The 1-day VaR for the portfolio, using the Variance-covariance approach. Assumes a 95% confidence level, 1 year lookback period, and that the returns are normally distributed.
      description: Represents a set of statistics calculated from equity and benchmark samples.
    RBIBrokerageSettings:
      type: object
      properties:
        id:
          type: string
          description: Brokerage ID, this is, RBIBrokerage.
        rbi-on-behalf-of-comp-id:
          type: string
          description: Value used to identify the trading firm.
        rbi-account:
          type: string
          description: RBI account name.
        cash:
          type: array
          description: List of cash amount.
          items:
            $ref: '#/components/schemas/CashAmount'
        holdings:
          type: array
          description: List of holdings for the brokerage.
          items:
            $ref: '#/components/schemas/BrokerageHolding'
      description: Settings for using RBI as a brokerage.
    ReadFilesRequest:
      required:
        - projectId
      type: object
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id to which the file belongs.
        name:
          type: string
          example: file.py
          description: Optional. The name of the file that will be read.
      description: Request to read all files from a project or just one (if the name is provided).
    ReadCompileRequest:
      type: object
      required:
        - projectId
        - compileId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id we sent for compile.
        compileId:
          type: string
          example: c0edc6-49048b
          description: Compile Id returned during the creation request.
      description: Request to read a compile packet job.
    ReadLiveLogsRequest:
      type: object
      required:
        - projectId
        - algorithmId
        - startLine
        - endLine
      properties:
        format:
          description: Format of the log results
          example: json
        projectId:
          type: integer
          example: 23456789
          description: Project Id of the live running algorithm.
        algorithmId:
          type: string
          description: Deploy Id (Algorithm Id) of the live running algorithm.
        startLine:
          type: integer
          description: Start line of logs to read.
        endLine:
          type: integer
          description: End line of logs to read.
      description: Request to read the logs of a specific algorithm. The difference between 'startLine' and 'endLine' must be smaller than 250, else an error will be thrown.
    ReadLiveLogsResponse:
      type: object
      properties:
        logs:
          type: array
          description: List of logs from the live algorithm.
          items:
            type: string
        length:
          type: integer
          description: Total amount of rows in the logs.
        deploymentOffset:
          type: integer
          description: Amount of log rows before the current deployment.
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Logs from a live algorithm.
    ReadProjectRequest:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project. If not provided the API will return a details list of all projects.
      description: Request to get details about a specific project or a details list of all projects.
    ReadProjectNodesRequest:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: string
          example: 23456789
          description: Project Id to which the nodes refer.
      description: Request to get details about nodes of a specific organization.
    ReadLiveAlgorithmRequest:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project to read.
        deployId:
          type: string
          example: L-sdf86b7045bb83203e79d2aa6150b321
          description: Specific instance Id to read.
      description: Request to read out a single algorithm.
    ReadLivePortfolioRequest:
      required:
      - projectId
      type: object
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project from which to read the live algorithm.
      description: Request to read the portfolio state from a live algorithm.
    ReadLiveOrdersRequest:
      required:
      - end
      - projectId
      type: object
      properties:
        start:
          type: integer
          example: 0
          description: Starting index of the orders to be fetched. Required if end > 100.
        end:
          type: integer
          example: 100
          description: Last index of the orders to be fetched. Note that end - start must be less than 100.
        projectId:
          type: integer
          example: 23456789
          description: Id of the project from which to read the live algorithm.
      description: Request to read orders from a live algorithm.
    ReadLiveInsightsRequest:
      required:
      - end
      - projectId
      type: object
      properties:
        start:
          type: integer
          example: 0
          description: Starting index of the insights to be fetched. Required if end > 100.
        end:
          type: integer
          example: 100
          description: Last index of the insights to be fetched. Note that end - start must be less than 100.
        projectId:
          type: integer
          example: 23456789
          description: Id of the project from which to read the live algorithm.
      description: Request to read insights from a live algorithm.
    ListLiveAlgorithmsRequest:
      type: object
      properties:
        status:
          type: string
          description: States of a live deployment.
          enum:
            - DeployError
            - InQueue
            - Running
            - Stopped
            - Liquidated
            - Deleted
            - Completed
            - RuntimeError
            - Invalid
            - LoggingIn
            - Initializing
            - History
        start:
          type: number
          example: 1717801200
          description: Earliest launched time of the algorithms in UNIX timestamp.
        end:
          type: number
          example: 171851200
          description: Latest launched time of the algorithms in UNIX timestamp.
      description: Request for a list of live running algorithms.
    ReadBacktestRequest:
      required:
      - projectId
      - backtestId
      type: object
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project from which to read one or multiple backtests.
        backtestId:
          type: string
          example: 26c7bb06b8487cff1c7b3c44652b30f1
          description: When provided, specific backtest Id to read.
        chart:
          type: string
          example: "Strategy Equity"
          description: Optional. If provided, the API will return the backtests charts.
      description: Request to read a single backtest from a project.
    ListBacktestRequest:
      required:
        - projectId
      type: object
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Id of the project from which to read one or multiple backtests.
        includeStatistics:
          type: boolean
          example: true
          description: If true, the backtests summaries from the response will contain the statistics with their corresponding values.
      description: Request to list the backtests from a project.
    QuantConnectSettings:
      type: object
      properties:
        id:
          type: string
          description: ID of QuantConnect, this is QuantConnectBrokerage.
        holdings:
          type: array
          description: List of holdings for the brokerage.
          items:
            $ref: '#/components/schemas/BrokerageHolding'
        cash:
          type: array
          description: List of cash amount.
          items:
            $ref: '#/components/schemas/CashAmount'
      description: QuantConnect settings for using it as a brokerage or data provider.
    InteractiveBrokersSettings:
      type: object
      properties:
        id:
          type: string
          description: ID of InteractiveBrokers, this is InteractiveBrokersBrokerage.
        ib-user-name:
          type: string
          description: Your Interactive Brokers username.
        ib-password:
          type: string
          description: Your Interactive Brokers password.
        ib-trading-mode:
          type: string
          description: Represents the types of environments supported by Interactive Brokers for trading.
          enum:
            - live
            - paper
        ib-account:
          type: string
          description: Your Interactive Brokers account id.
        ib-weekly-restart-utc-time:
          type: string
          description: Weekly restart UTC time (hh:mm:ss).
          format: date
      description: Settings for using Interactive Brokers as brokerage or data provider.
    ReadBacktestChartRequest:
      type: object
      required:
        - projectId
        - backtestId
        - name
        - count
        - start
        - end
      properties:
        projectId:
          type: integer
          description: Project ID of the request.
          example: 12345678
        backtestId:
          type: string
          description: Associated Backtest ID for this chart request.
          example: 2a748c241eb93b0b57b4747b3dacc80e
        name:
          type: string
          description: The requested chart name.
          example: "Strategy Equity"
        count:
          type: integer
          description: The number of data points to request.
          example: 100
        start:
          type: integer
          description: Optional. If provided, the Utc start seconds timestamp of the request.
          example: 1717801200
        end:
          type: integer
          description: Optional. If provided, the Utc end seconds timestamp of the request.
          example: 1743462000
      description: Request body to obtain a chart from a backtest.
    ReadBacktestOrdersRequest:
      required:
      - start
      - end
      - projectId
      - backtestId
      type: object
      properties:
        start:
          type: integer
          example: 0
          description: Starting index of the orders to be fetched. Required if end > 100.
        end:
          type: integer
          example: 100
          description: Last index of the orders to be fetched. Note that end - start must be less than 100.
        projectId:
          type: integer
          example: 23456789
          description: Id of the project from which to read the backtest.
        backtestId:
          type: string
          example: 26c7bb06b8487cff1c7b3c44652b30f1
          description: Id of the backtest from which to read the orders.
      description: Request to read orders from a backtest.
    ReadBacktestInsightsRequest:
      required:
      - start
      - end
      - projectId
      - backtestId
      type: object
      properties:
        start:
          type: integer
          example: 0
          description: Starting index of the insights to be fetched. Required if end > 100.
        end:
          type: integer
          example: 100
          description: Last index of the insights to be fetched. Note that end - start must be less than 100.
        projectId:
          type: integer
          example: 23456789
          description: Id of the project from which to read the backtest.
        backtestId:
          type: string
          example: 26c7bb06b8487cff1c7b3c44652b30f1
          description: Id of the backtest from which to read the insights.
      description: Request to read insights from a backtest.
    ReadLiveChartRequest:
      type: object
      required:
        - projectId
        - start
        - end
        - name
        - count
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project ID of the request.
        name:
          type: string
          description: The requested chart name.
          example: "Strategy Equity"
        count:
          type: integer
          description: The number of data points to request.
          example: 100
        start:
          type: integer
          description: The Utc start seconds timestamp of the request.
          example: 1717801200  
        end:
          type: integer
          description: The Utc end seconds timestamp of the request.
          example: 1743462000
      description: Request to body to obtain a chart from a live algorithm.
    ReadChartResponse:
      type: object
      properties:
        chart:
          type: object
          description: Chart object requested.
          $ref: '#/components/schemas/Chart'
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response with the requested chart from a live algorithm or backtest
    ReadOptimizationRequest:
      required:
      - optimizationId
      type: object
      properties:
        optimizationId:
          type: string
          example: O-401d3d40b5a0e9f8c46c954a303f3ddd
          description: Optimization ID for the optimization we want to read.
      description: Request to read a optimization from a project.
    ReadOptimizationResponse:
      type: object
      properties:
        optimization:
          $ref: '#/components/schemas/Optimization'
          description: Optimization object requested to read.
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received when reading an optimization.
    RequestFailedError:
      type: object
      properties:
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: The API method call could not be completed as requested.
    ResearchGuide:
      type: object
      properties:
        minutes:
          type: integer
          description: Number of minutes used in developing the current backtest.
        backtestCount:
          type: integer
          description: The quantity of backtests run in the project.
        parameters:
          type: integer
          description: Number of parameters detected.
      description: A power gauge for backtests, time and parameters to estimate the overfitting risk.
    RestResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Base API response class for the QuantConnect API.
    Resolution:
      type: string
      description: Resolution of data requested.
      enum:
      - Tick
      - Second
      - Minute
      - Hour
      - Daily
    RuntimeStatistics:
      type: object
      properties:
        Equity:
          type: string
          description: Total portfolio value.
          example: '$100.00'
        Fees:
          type: string
          description: Transaction fee.
          example: '-$100.00'
        Holdings:
          type: string
          description: Equity value of security holdings.
          example: '$100.00'
        Net Profit:
          type: string
          description: Net profit.
          example: '$100.00'
        Probabilistic Sharpe Ratio:
          type: string
          description: Probabilistic Sharpe Ratio.
          example: '50.00%'
        Return:
          type: string
          description: Return.
          example: '50.00%'
        Unrealized:
          type: string
          description: Unrealized profit/loss.
          example: '$100.00'
        Volume:
          type: string
          description: Total transaction volume.
          example: '$100.00'
    ChartResolution:
      type: string
      description: Storage format of the charting data
      enum:
      - 10minute
      - minute
      - second
    SamcoSettings:
      type: object
      properties:
        id:
          type: string
          description: Brokerage ID, this is, SamcoBrokerage.
        samco-client-id:
          type: string
          description: Your Samco account Client ID.
        samco-client-password:
          type: string
          description: Your Samco account password.
        samco-year-of-birth:
          type: integer
          description: Your year of birth (YYYY) registered with Samco.
        samco-product-type:
          type: string
          description: MIS if you are targeting intraday products, CNC if you are targeting delivery products, NRML if you are targeting carry forward products.
          enum:
            - mis
            - cnc
            - nrml
        samco-trading-segment:
          type: string
          description: \'equity\' if you are trading equities on NSE or BSE, commodity if you are trading \'commodities\' on MCX.
          enum:
            - equity
            - commodity
      description: Settings for using Samco as a data provider or brokerage.
    Series:
      type: object
      properties:
        name:
          type: string
          description: Name of the series.
        unit:
          type: string
          description: Axis for the chart series.
        index:
          type: integer
          description: Index/position of the series on the chart.
        values:
          type: array
          description: Values for the series plot. These values are assumed to be in ascending time order (first points earliest, last points latest)
          items:
            type: object
            description: The type of the values depends on the series type.
        seriesType:
          type: string
          description: Chart type for the series.
          enum:
          - Line
          - Scatter
          - Candle
          - Bar
          - Flag
          - StackedArea
          - Pie
          - Treemap
        color:
          type: string
          description: Color the series.
        scatterMarkerSymbol:
          type: string
          description: Shape or symbol for the marker in a scatter plot.
          enum:
          - none
          - circle
          - square
          - diamond
          - triangle
          - triangle-down
      description: Chart Series Object - Series data and properties for a chart.
    SetObjectStoreRequest:
      type: object
      properties:
        organizationId:
          type: string
          example: 5cad178b20a1d52567b534553413b691
          description: Organization ID we'd like to upload the file to.
        key:
          type: string
          description: Key to the Object Store file.
      description: Request to upload a file to an Object Store of a specific organization and key.
    StatisticsResult:
      type: object
      properties:
        Total Orders:
          type: string
          description: Total nuber of orders.
        Average Win:
          type: string
          description: The average rate of return for winning trades.
        Average Loss:
          type: string
          description: The average rate of return for losing trades.
        Compounding Annual Return:
          type: string
          description: Annual compounded returns statistic based on the final-starting capital and years.
        Drawdown:
          type: string
          description: Drawdown maximum percentage.
        Expectancy:
          type: string
          description: The expected value of the rate of return.
        Start Equity:
          type: string
          description: Initial Equity Total Value.
        End Equity:
          type: string
          description: Final Equity Total Value.
        Net Profit:
          type: string
          description: The total net profit percentage.
        Sharpe Ratio:
          type: string
          description: Sharpe ratio with respect to risk free rate; measures excess of return per unit of risk.
        Sortino Ratio:
          type: string
          description: Sortino ratio with respect to risk free rate; measures excess of return per unit of downside risk.
        Probabilistic Sharpe Ratio:
          type: string
          description: Is a probability measure associated with the Sharpe ratio. It informs us of the probability that the estimated Sharpe ratio is greater than a chosen benchmark.
        Loss Rate:
          type: string
          description: The ratio of the number of losing trades to the total number of trades.
        Win Rate:
          type: string
          description: The ratio of the number of winning trades to the total number of trades.
        Profit-Loss Ratio:
          type: string
          description: The ratio of the average win rate to the average loss rate.
        Alpha:
          type: string
          description: Algorithm "Alpha" statistic - abnormal returns over the risk free rate and the relationshio (beta) with the benchmark returns.
        Beta:
          type: string
          description: Algorithm "beta" statistic - the covariance between the algorithm and benchmark performance, divided by benchmark's variance.
        Annual Standard Deviation:
          type: string
          description: Annualized standard deviation.
        Annual Variance:
          type: string
          description: Annualized variance statistic calculation using the daily performance variance and trading days per year.
        Information Ratio:
          type: string
          description: Information ratio - risk adjusted return.
        Tracking Error:
          type: string
          description: Tracking error volatility (TEV) statistic - a measure of how closely a portfolio follows the index to which it is benchmarked.
        Treynor Ratio:
          type: string
          description: Treynor ratio statistic is a measurement of the returns earned in excess of that which could have been earned on an investment that has no diversifiable risk.
        Total Fees:
          type: string
          description: Total amount of fees.
        Estimated Strategy Capacity:
          type: string
          description: The estimated total capacity of the strategy at a point in time.
        Lowest Capacity Asset:
          type: string
          description: Provide a reference to the lowest capacity symbol used in scaling down the capacity for debugging.
        Portfolio Turnover:
          type: string
          description: The average Portfolio Turnover
      description: Statistics information sent during the algorithm operations.
    StopLiveAlgorithmRequest:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id for the live instance we want to stop.
      description: Request to stop a live algorithm.
    Symbol:
      type: object
      properties:
        value:
          type: string
          description: The current symbol for this ticker.
        id:
          type: string
          description: The security identifier for this symbol.
        permtick:
          type: string
          description: The current symbol for this ticker.
      description: Represents a unique security identifier. This is made of two components, the unique SID and the Value. The value is the current ticker symbol while the SID is constant over the life of a security.
    CharlesSchwabSettings:
      type: object
      properties:
        id:
          type: string
          description: Brokerage ID, this is, Charles Schwab.
        charles-schwab-app-key:
          type: string
          description: Your Charles Schwab app key.
        charles-schwab-secret:
          type: string
          description: Your Charles Schwab secret.
        charles-schwab-account-number:
          type: string
          description: Your Charles Schwab account number.
      description: Settings for using Charles Schwab as a data provider or brokerage.
    TerminalLinkSettings:
      type: object
      properties:
        id:
          type: string
          description: Brokerage ID, this is TerminalLinkBrokerage.
        terminal-link-connection-type:
          type: string
          description: Terminal Link Connection Type [DAPI, SAPI].
          enum:
            - DAPI
            - SAPI
        cash:
          type: array
          description: List of cash amount.
          items:
            $ref: '#/components/schemas/CashAmount'
        holdings:
          type: array
          description: List of holdings for the brokerage.
          items:
            $ref: '#/components/schemas/BrokerageHolding'
      description: Settings for using TerminalLink as a brokerage.
    Trade:
      type: object
      properties:
        symbol:
          $ref: '#/components/schemas/Symbol'
        entryTime:
          type: string
          description: The date and time the trade was opened.
          format: date-time
        entryPrice:
          type: number
          description: The price at which the trade was opened (or the average price if multiple entries).
          format: float
        direction:
          type: string
          description: Direction of a trade.
          enum:
            - Long
            - Short
        quantity:
          type: number
          description: The total unsigned quantity of the trade.
          format: float
        exitTime:
          type: string
          description: The date and time the trade was closed.
          format: date-time
        exitPrice:
          type: number
          description: The price at which the trade was closed (or the average price if multiple exits).
          format: float
        profitLoss:
          type: number
          description: The gross profit/loss of the trade (as account currency).
          format: float
        totalFees:
          type: number
          description: The total fees associated with the trade (always positive value) (as account currency).
          format: float
        mae:
          type: number
          description: The Maximum Adverse Excursion (as account currency).
          format: float
        mfe:
          type: number
          description: The Maximum Favorable Excursion (as account currency).
          format: float
        duration:
          type: string
          description: The duration of the trade.
        endTradeDrawdown:
          type: number
          description: The amount of profit given back before the trade was closed.
          format: float
      description: Represents a closed trade.
    TradeStatistics:
      type: object
      properties:
        startDateTime:
          type: string
          description: The entry date/time of the first trade
          format: date-time
        endDateTime:
          type: string
          description: The exit date/time of the first trade.
          format: date-time
        totalNumberOfTrades:
          type: integer
          description: The total number of trades.
        numberOfWinningTrades:
          type: integer
          description: The total number of winning trades.
        numberOfLosingTrades:
          type: integer
          description: The total number of losing trades.
        totalProfitLoss:
          type: number
          description: The total profit/loss for all trades (as symbol currency).
          format: float
        totalProfit:
          type: number
          description: The total profit for all winning trades (as symbol currency).
          format: float
        totalLoss:
          type: number
          description: The total loss for all losing trades (as symbol currency).
          format: float
        largestProfit:
          type: number
          description: The largest profit in a single trade (as symbol currency).
          format: float
        largestLoss:
          type: number
          description: The largest loss in a single trade (as symbol currency).
          format: float
        averageProfitLoss:
          type: number
          description: The average profit/loss (a.k.a. Expectancy or Average Trade) for all trades (as symbol currency).
          format: float
        averageProfit:
          type: number
          description: The average profit for all winning trades (as symbol currency).
          format: float
        averageLoss:
          type: number
          description: The average loss for all winning trades (as symbol currency).
          format: float
        averageTradeDuration:
          type: string
          description: The average duration for all trades.
        averageWinningTradeDuration:
          type: string
          description: The average duration for all winning trades.
        averageLosingTradeDuration:
          type: string
          description: The average duration for all losing trades.
        medianTradeDuration:
          type: string
          description: The median duration for all trades.
        medianWinningTradeDuration:
          type: string
          description: The median duration for all winning trades.
        medianLosingTradeDuration:
          type: string
          description: The median duration for all losing trades.
        maxConsecutiveWinningTrades:
          type: integer
          description: The maximum number of consecutive winning trades.
        maxConsecutiveLosingTrades:
          type: integer
          description: The maximum number of consecutive losing trades.
        profitLossRatio:
          type: number
          description: The ratio of the average profit per trade to the average loss per trade.
          format: float
        winLossRatio:
          type: number
          description: The ratio of the number of winning trades to the number of losing trades.
          format: float
        winRate:
          type: number
          description: The ratio of the number of winning trades to the total number of trades.
          format: float
        lossRate:
          type: number
          description: The ratio of the number of losing trades to the total number of trades.
          format: float
        averageMAE:
          type: number
          description: The average Maximum Adverse Excursion for all trades.
          format: float
        averageMFE:
          type: number
          description: The average Maximum Adverse Excursion for all trades.
          format: float
        largestMAE:
          type: number
          description: The average Maximum Favorable Excursion for all trades.
          format: float
        largestMFE:
          type: number
          description: The largest Maximum Adverse Excursion in a single trade (as symbol currency).
          format: float
        maximumClosedTradeDrawdown:
          type: number
          description: The maximum closed-trade drawdown for all trades (as symbol currency).
          format: float
        maximumIntraTradeDrawdown:
          type: number
          description: The maximum intra-trade drawdown for all trades (as symbol currency).
          format: float
        profitLossStandardDeviation:
          type: number
          description: The standard deviation of the profits/losses for all trades (as symbol currency).
          format: float
        profitLossDownsideDeviation:
          type: number
          description: The downside deviation of the profits/losses for all trades (as symbol currency).
          format: float
        profitFactor:
          type: number
          description: The ratio of the total profit to the total loss.
          format: float
        sharpeRatio:
          type: number
          description: The ratio of the average profit/loss to the standard deviation.
          format: float
        sortinoRatio:
          type: number
          description: The ratio of the average profit/loss to the downside deviation.
          format: float
        profitToMaxDrawdownRatio:
          type: number
          description: The ratio of the total profit/loss to the maximum closed trade drawdown.
          format: float
        maximumEndTradeDrawdown:
          type: number
          description: The maximum amount of profit given back by a single trade before exit (as symbol currency).
          format: float
        averageEndTradeDrawdown:
          type: number
          description: The average amount of profit given back by all trades before exit (as symbol currency).
          format: float
        maximumDrawdownDuration:
          type: string
          description: The maximum amount of time to recover from a drawdown (longest time between new equity highs or peaks).
        totalFees:
          type: number
          description: The sum of fees for all trades.
          format: float
      description: A set of statistics calculated from a list of closed trades.
    TradierSettings:
      type: object
      properties:
        id:
          type: string
          description: ID of the brokerage, this is, TradierBrokerage
        tradier-account-id:
          type: string
          description: Your Tradier account id.
        tradier-access-token:
          type: string
          description: Your Tradier access token.
        tradier-environment:
          type: string
          description: Whether the developer sandbox should be used.
          enum:
            - live
            - paper
      description: Settings for using Tradier as a data provider.
    TradingTechnologiesSettings:
      type: object
      properties:
        id:
          type: string
          description: Brokerage ID, this is, TradingTechnologiesBrokerage.
        tt-user-name:
          type: string
          description: Trading Technologies user name.
        tt-session-password:
          type: string
          description: Trading Technologies session password.
        tt-account-name:
          type: string
          description: Trading Technologies account name.
        tt-rest-app-key:
          type: string
          description: Trading Technologies App key.
        tt-rest-app-secret:
          type: string
          description: Trading Technologies App secret.
        tt-rest-environment:
          type: string
          description: Environment in which the brokerage Trading Technologies will be used.
          enum:
            - live
            - uat
        tt-order-routing-sender-comp-id:
          type: string
          description: Trading Technologies remote comp id.
        cash:
          type: array
          description: List of cash amount.
          items:
            $ref: '#/components/schemas/CashAmount'
      description: Settings for using Trading Technologies as a brokerage.
    UpdateBacktestRequest:
      required:
      - backtestId
      - projectId
      - name
      type: object
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id for the backtest we want to update.
        backtestId:
          type: string
          example: 26c7bb06b8487cff1c7b3c44652b30f1
          description: Backtest Id we want to update.
        name:
          type: string
          description: Name we would like to assign to the backtest.
        note:
          type: string
          description: Note attached to the backtest.
      description: Request to update a backtest's name.
    UpdateFileNameRequest:
      type: object
      required:
        - projectId
        - oldFileName
        - newName
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id to which the file belongs.
        oldFileName:
          type: string
          example: file1.py
          description: The current name of the file.
        newName:
          type: string
          example: file2.py
          description: The new name for the file.
      description: Request to update the name of a file.
    UpdateFileContentsRequest:
      type: object
      required:
        - projectId
        - name
        - content
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id to which the file belongs.
        name:
          type: string
          example: main.py
          description: The name of the file that should be updated.
        content:
          type: string
          example: |
            class CustomClass:
                def __init__(self):
                    pass
          description: The new contents of the file.
      description: Request to update the contents of a file.
    UpdateOptimizationRequest:
      type: object
      required:
        - optimizationId
        - name
      properties:
        optimizationId:
          type: string
          example: O-401d3d40b5a0e9f8c46c954a303f3ddd
          description: Optimization ID we want to update.
        name:
          type: string
          example: "New Optimization Name"
          description: Name we'd like to assign to the optimization.
      description: Updates the name of an optimization.
    UpdateProjectRequest:
      type: object
      required: 
        - projectId
        - name
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id to which the file belongs.
        name:
          type: string
          example: "New Project Name"
          description: The new name for the project.
        description:
          type: string
          example: "New Project Description"
          description: The new description for the project.
      description: Update a project name, or description.
    UpdateProjectNodesRequest:
      type: object
      required:
        - projectId
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id to which the nodes refer.
        nodes:
          type: array
          description: List of node Id to update.
          items:
            type: string
      description: Request to update the nodes of a project.
    UpdateBacktestTagsRequest:
      type: object
      required:
        - projectId
        - backtestId
        - tags
      properties:
        projectId:
          type: integer
          example: 23456789
          description: Project Id for the backtest we want to update.
        backtestId:
          example: 26c7bb06b8487cff1c7b3c44652b30f1
          type: Backtest Id we want to update.
        tags:
          type: array
          description: Array of the new backtest tags.
          items:
            type: string
      description: Updates the tags collection for a backtest.
    Version:
      type: object
      properties:
        sdescription:
          type: string
          description:
        bpublic:
          type: integer
          description:
        itimestamp:
          type: string
          description:
          format: date-time
        benchmark_basic:
          type: number
          description:
          format: float
        benchmark_equity_400_minute:
          type: number
          description:
          format: float
        benchmark_equity_1_second:
          type: number
          description:
          format: float
        benchmark_cs_indicator:
          type: number
          description:
          format: float
        benchmark_cs_history:
          type: number
          description:
          format: float
        benchmark_cs_schedule_events:
          type: number
          description:
          format: float
        benchmark_py_basic:
          type: number
          description:
          format: float
        benchmark_py_equity_400_minute:
          type: number
          description:
          format: float
        benchmark_py_equity_1_second:
          type: number
          description:
          format: float
        benchmark_py_indicator:
          type: number
          description:
          format: float
        benchmark_py_history:
          type: number
          description:
          format: float
        benchmark_py_schedule_events:
          type: number
          description:
          format: float
        benchmark_py_universe_coarsefine:
          type: number
          description:
          format: float
        benchmark_cs_universe_coarsefine:
          type: number
          description:
          format: float
        benchmark_py_universe_stateful:
          type: number
          description:
          format: float
        benchmark_cs_universe_stateful:
          type: number
          description:
          format: float
        benchmark_py_universe_stateless:
          type: number
          description:
          format: float
        benchmark_cs_universe_stateless:
          type: number
          description:
          format: float
      additionalProperties:
        $ref: '#/components/schemas/Version'
    WolverineSettings:
      type: object
      properties:
        id:
          type: string
          description: Brokerage ID, this is, WolverineBrokerage.
        wolverine-on-behalf-of-comp-id:
          type: string
          description: Value used to identify the trading firm.
        wolverine-account:
          type: string
          description: Wolverine Execution Services account name.
        cash:
          type: array
          description: List of cash amount.
          items:
            $ref: '#/components/schemas/CashAmount'
        holdings:
          type: array
          description: List of holdings for the brokerage.
          items:
            $ref: '#/components/schemas/BrokerageHolding'
      description: Settings for using Wolverine Execution Services as a brokerage.
    ZerodhaSettings:
      type: object
      properties:
        id:
          type: string
          description: Brokerage ID, this is, ZerodhaBrokerage.
        zerodha-api-key:
          type: string
          description: Your Kite Connect API key.
        zerodha-access-token:
          type: string
          description: Your Kite Connect access token.
        zerodha-product-type:
          type: string
          description: The product type must be set to MIS if you are targeting intraday products, CNC if you are targeting delivery products or NRML if you are targeting carry forward products.
          enum:
            - mis
            - cnc
            - nrml
        zerodha-trading-segment:
          type: string
          description: The trading segment must be set to 'equity' if you are trading equities on NSE or BSE, or 'commodity' if you are trading commodities on MCX.
          enum:
            - equity
            - commodity
        zerodha-history-subscription:
          type: boolean
          description: Whether you have a history API subscription for Zerodha.
      description: Settings for using Zerodha as a data provider or brokerage.
    files_update_body:
      oneOf:
      - $ref: '#/components/schemas/UpdateFileNameRequest'
      - $ref: '#/components/schemas/UpdateFileContentsRequest'
    get_object_store:
      oneOf:
      - $ref: '#/components/schemas/GetObjectStoreJobIdRequest'
      - $ref: '#/components/schemas/GetObjectStoreURLRequest'
    inline_response_200:
      oneOf:
      - $ref: '#/components/responses/BacktestResponse'
      - $ref: '#/components/responses/BacktestList'
    inline_response_200_1:
      oneOf:
      - $ref: '#/components/responses/BacktestReport'
      - $ref: '#/components/responses/RequestFailedError'
    inline_response_200_3:
      oneOf:
      - $ref: '#/components/responses/LoadingChartResponse'
      - $ref: '#/components/responses/ReadChartResponse'
  responses:
    BacktestResponse:
      description: Backtest read response packet.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BacktestResponse'
    BacktestList:
      description: Collection container for a list of backtests for a project.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BacktestList'
    BacktestReport:
      description: Backtest Report Response wrapper.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BacktestReport'
    CompileResponse:
      description: Response from the compiler on a build event.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CompileResponse'
    LiveAlgorithm:
      description: Live algorithm instance result.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LiveAlgorithm'
    LiveAlgorithmListResponse:
      description: List of the live algorithms running which match the requested status.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LiveAlgorithmListResponse'
    LiveAlgorithmResults:
      description: Details a live algorithm from the live/read API endpoint.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LiveAlgorithmResults'
    ProjectListResponse:
      description: Project list response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectListResponse'
    ProjectFilesResponse:
      description: Response received when reading all files of a project.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectFilesResponse'
    ReadLiveLogsResponse:
      description: Logs from a live algorithm.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadLiveLogsResponse'
    RequestFailedError:
      description: Request Failed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestFailedError'
    RestResponse:
      description: Base API response class.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RestResponse'
    UnauthorizedError:
      description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
      headers:
        www_authenticate:
          style: simple
          explode: false
          schema:
            type: string
  securitySchemes:
    nonceTokenAuth:
      type: http
      description: The standard QuantConnect API authentication scheme is used. This requires the current unixtime and your api key to be hashed together with SHA256 and sent as the B64 password in a basic authentication. The username for the basic authentication is the UID on your QuantConnect account.
      scheme: basic