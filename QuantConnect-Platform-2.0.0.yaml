---
openapi: 3.0.0
info:
  title: QuantConnect Platform API v2.0
  description: QuantConnect Platform API controls creating, updating and deleting projects, files, backtests and live algorithms. Automate the updating and backtesting of your strategies, or build tools to fast track your development.
  termsOfService: https://www.quantconnect.com/terms
  contact:
    name: QuantConnect
    email: contact@quantconnect.com
  license:
    name: License For Use Granted Under QuantConnect Terms of Service. All other rights reserved.
  version: 2.0.0
servers:
- url: https://virtserver.swaggerhub.com/QuantConnect/Platform/2.0.0
  description: SwaggerHub API Auto Mocking
- url: https://www.quantconnect.com/api/v2
  description: Primary REST Endpoint
security:
- nonceTokenAuth: []
paths:
  /projects/create:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 02 Project Management
      - 01 Create Project
      summary: Create a new project in your default organization.
      description: Create a project with the specified name and programming language. If the project-name already exists, API call returns success:false with exception details in the errors array.
      requestBody:
        description: Name and language of the project to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
        required: true
      responses:
        "200":
          description: Project list response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /projects/read:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 02 Project Management
      - 02 Read Project
      summary: List details of all projects, or the project matched the passed project ID if the project ID property passed.
      requestBody:
        description: The projectId for the project to read, or nothing to get a list of all projects.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadProjectRequest'
        required: false
      responses:
        "200":
          description: Project list response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /projects/update:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 02 Project Management
      - 03 Update Project
      summary: Update a project name, description or parameters.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /projects/delete:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 02 Project Management
      - 04 Delete Project
      summary: Delete a project.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteProjectRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /projects/nodes/read:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 02 Project Management
      - 05 Read Project Nodes
      summary: Read all nodes in a project.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadProjectNodesRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectNodesResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /projects/nodes/update:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 02 Project Management
      - 06 Update Project Nodes
      summary: Update the active state of some nodes to true. If you don't provide any nodes, all the nodes become inactive and AutoSelectNode is true.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectNodesRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectNodesResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /files/create:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 03 File Management
      - 01 Create File
      summary: Add a file to given project.
      requestBody:
        description: Project, file name and file content to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectFileRequest'
        required: true
      responses:
        "200":
          description: Response received when reading all files of a project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectFilesResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /files/read:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 03 File Management
      - 02 Read File
      summary: If a ReadSingleFileRequest is passed, reads that file from the project. If a ReadAllFilesRequest is passed, reads all files in the project.
      requestBody:
        description: An array list of files from the project requested.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadFilesRequest'
        required: true
      responses:
        "200":
          description: Response received when reading all files of a project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectFilesResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /files/update:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 03 File Management
      - 03 Update File
      summary: If an UpdateProjectFileNameRequest is passed, update the name of a file. If a UpdateProjectFileContentsRequest is passed, update the contents of a file.
      requestBody:
        description: Information about the file to update along with the new properties to set.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/files_update_body'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /files/delete:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 03 File Management
      - 04 Delete File
      summary: Delete a file in a project
      requestBody:
        description: Project Id and filename to specify the file for deletion.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteFileRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /compile/create:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 04 Compiling Code
      - 01 Create Compilation Job
      summary: Asynchronously create a compile job request for a project
      requestBody:
        description: Project Id specifying project to build.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompileRequest'
        required: true
      responses:
        "200":
          description: Response from the compiler on a build event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompileResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /compile/read:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 04 Compiling Code
      - 02 Read Compilation Result
      summary: Read a compile packet job result.
      requestBody:
        description: Read a compile result for a specific Project Id and Compile Id.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadCompileRequest'
        required: true
      responses:
        "200":
          description: Response from the compiler on a build event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompileResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /backtests/create:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 05 Backtest Management
      - 01 Create Backtest
      summary: Create a new backtest request and get the backtest Id.
      requestBody:
        description: Create a new backtest given a project Id and compile Id.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBacktestRequest'
        required: true
      responses:
        "200":
          description: Backtest read response packet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BacktestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /backtests/read:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 05 Backtest Management
      - 02 Read Backtest
      - 01 Backtest Statistics
      summary: If a backtest Id is provided, read out that backtest from the project, otherwise list all the backtests for the project.
      requestBody:
        description: Fetch the results for the project Id and backtest Id provided.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadBacktestRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /backtests/read/portfolio:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 05 Backtest Management
      - 02 Read Backtest
      - 02 Portfolio
      summary: Read out the portfolio state of a backtest.
      requestBody:
        description: Fetch the portfolio state of a backtest for the project Id and backtest Id.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadBacktestPortfolioRequest'
        required: true
      responses:
        "200":
          description: Portfolio state of the backtest instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BacktestPortfolioResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /backtests/read/orders:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 05 Backtest Management
      - 02 Read Backtest
      - 03 Orders
      summary: Read out the orders of a backtest.
      requestBody:
        description: Fetch the orders of a backtest for the project Id, backtest Id and steps provided.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadBacktestOrdersRequest'
        required: true
      responses:
        "200":
          description: Orders of the backtest within range.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BacktestOrdersResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /backtests/read/report:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 11 Reports
      - 01 Backtest Report
      summary: Read out the report of a backtest in the project Id specified
      requestBody:
        description: A JSON object containing info about the project to delete.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BacktestReportRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /backtests/update:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 05 Backtest Management
      - 03 Update Backtest
      summary: Update a backtest name or note
      requestBody:
        description: A JSON object containing info about the backtest and new name.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBacktestRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /backtests/delete:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 05 Backtest Management
      - 04 Delete Backtest
      summary: Delete a backtest from the specified project and backtestId
      requestBody:
        description: Information required to delete the backtest.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteBacktestRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /live/create:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 07 Live Management
      - 01 Create Live Algorithm
      summary: Create a live algorithm
      requestBody:
        description: Project, compile and brokerage login information for deploying a live algorithm.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLiveAlgorithmRequest'
        required: true
      responses:
        "200":
          description: Live algorithm instance result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLiveAlgorithmResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /live/read:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 07 Live Management
      - 02 Read Live Algorithm
      - 01 Live Algorithm Statistics
      summary: If a ReadLiveAlgorithmRequest is provided details on a live algorithm are returned. If a ListLiveAlgorithmsRequest is passed get a list of live running algorithms.
      requestBody:
        description: Dynamic arguement to specify whether seeking single project or list response.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/live_read_body'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /live/read/log:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 07 Live Management
      - 02 Read Live Algorithm
      - 02 Logs
      summary: Get the logs of a specific live algorithm.
      requestBody:
        description: Information about the algorithm to read live logs from.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadLiveLogsRequest'
        required: true
      responses:
        "200":
          description: Logs from a live algorithm.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadLiveLogsResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /live/read/portfolio:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 07 Live Management
      - 02 Read Live Algorithm
      - 03 Portfolio State
      summary: Read out the portfolio state of a live algorithm.
      requestBody:
        description: Fetch the live portfolio state for the project Id provided.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadLivePortfolioRequest'
        required: true
      responses:
        "200":
          description: Portfolio holdings and cash of the live algorithm.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LivePortfolioResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /live/read/orders:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 07 Live Management
      - 02 Read Live Algorithm
      - 04 Orders
      summary: Read out the orders of a live algorithm.
      requestBody:
        description: Fetch the orders of a live algorithm for the project Id and steps provided.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadLiveOrdersRequest'
        required: true
      responses:
        "200":
          description: Orders of the live algorithm within range.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveOrdersResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /live/read/insights:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 07 Live Management
      - 02 Read Live Algorithm
      - 05 Insights
      summary: Read out the insights of a live algorithm.
      requestBody:
        description: Fetch the insights of a live algorithm for the project Id and steps provided.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadLiveInsightsRequest'
        required: true
      responses:
        "200":
          description: Insights of the live algorithm within range.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveInsightsResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /live/update/liquidate:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 07 Live Management
      - 03 Update Live Algorithm
      - 01 Liquidate Live Portfolio
      summary: Liquidate a live algorithm from the specified project and deployId.
      requestBody:
        description: Information about the live algorithm to liquidate.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LiquidateLiveAlgorithmRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /live/update/stop:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 07 Live Management
      - 03 Update Live Algorithm
      - 02 Stop Live Algorithm
      summary: Stop a live algorithm from the specified project and deployId.
      requestBody:
        description: Information about the project to delete.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopLiveAlgorithmRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /optimizations/create:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 08 Optimization Management
      - 01 Create Optimization
      summary: Create an optimization with the specified parameters
      requestBody:
        description: Project, compile and optimization parameters for launching an optimization job.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOptimizationRequest'
        required: true
      responses:
        "200":
          description: Response received when launching an optimization job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOptimizationResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /optimizations/update:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 08 Optimization Management
      - 02 Update Optimization
      summary: Updates the name of an optimization.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOptimizationRequest'
          required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /optimizations/read:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 08 Optimization Management
      - 03 Read Optimization
      summary: Read an optimization.
      requestBody:
        description: Optimization ID for the optimization we want to read
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadOptimizationRequest'
        required: true
      responses:
        "200":
          description: Response received when reading an optimization job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadOptimizationResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /optimizations/delete:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 08 Optimization Management
      - 04 Delete Optimization
      summary: Delete an optimization.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteOptimizationRequest'
          required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /optimizations/abort:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 08 Optimization Management
      - 05 Abort Optimization
      summary: Abort an optimization.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbortOptimizationRequest'
          required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /optimizations/list:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 08 Optimization Management
      - 06 List Optimization
      summary: List all the optimizations for a project.
      requestBody:
        description: Project ID we'd like to get a list of optimizations for.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListOptimizationRequest'
        required: true
      responses:
        "200":
          description: Response received when reading an optimization job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOptimizationResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /optimizations/estimate:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 08 Optimization Management
      - 07 Estimate Optimization Cost
      summary: Estimate the cost of an optimization with the specified parameters
      requestBody:
        description: Project, compile and optimization parameters for estimating the cost of an optimization job.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EstimateOptimizationRequest'
        required: true
      responses:
        "200":
          description: Response received when estimating the cost of an optimization job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EstimateOptimizationResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /object/set:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 09 Object Store Management
      - 01 Upload Object Store Files
      summary: Upload files to the Object Store.
      requestBody:
        description: Upload files to the Object Store.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetObjectStoreRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ObjectStoreBinaryFile'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /object/get:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 09 Object Store Management
      - 02 Get Object Store Metadata
      summary: Get Object Store metadata of a specific organization and key.
      requestBody:
        description: Get Object Store metadata of a specific organization and key.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetObjectStoreRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetObjectStoreResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /object/delete:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 09 Object Store Management
      - 03 Delete Object Store File
      summary: Delete the Object Store file of a specific organization and key.
      requestBody:
        description: Delete the Object Store file of a specific organization and key.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteObjectStoreRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /object/list:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 09 Object Store Management
      - 04 List Object Store Files
      summary: List the Object Store files of a specific organization and path.
      requestBody:
        description: List the Object Store files of a specific organization and path.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListObjectStoreRequest'
        required: true
      responses:
        "200":
          description: Base API response class.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListObjectStoreResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
  /data/read:
    post:
      tags:
      - 01 Cloud Platform
      - 99 API Reference
      - 10 Downloading Data
      - 01 Read Downloaded Data
      summary: Get the link to the downloadable data.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataDownloadRequest'
        required: true
      responses:
        "200":
          description: Response from reading purchased data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadDataLinkResponse'
        "401":
          description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
          headers:
            www_authenticate:
              style: simple
              explode: false
              schema:
                type: string
components:
  schemas:
    AbortOptimizationRequest:
      type: object
      properties:
        optimizationId:
          type: string
          description: Optimization ID we want to abort.
      description: Abort an optimization.
    AlgorithmPerformance:
      type: object
      properties:
        TradeStatistics:
          $ref: '#/components/schemas/TradeStatistics'
        PortfolioStatistics:
          $ref: '#/components/schemas/PortfolioStatistics'
        ClosedTrades:
          type: array
          description: The algorithm statistics on portfolio.
          items:
            $ref: '#/components/schemas/Trade'
      description: The AlgorithmPerformance class is a wrapper for TradeStatistics and PortfolioStatistics.
    AlgorithmStatus:
      type: string
      description: States of a live deployment.
      enum:
      - DeployError
      - InQueue
      - Running
      - Stopped
      - Liquidated
      - Deleted
      - Completed
      - RuntimeError
      - Invalid
      - LoggingIn
      - Initializing
      - History
    AlphaRuntimeStatistics:
      type: object
      properties:
        MeanPopulationScore:
          $ref: '#/components/schemas/InsightScore'
        RollingAveragedPopulationScore:
          $ref: '#/components/schemas/InsightScore'
        LongCount:
          type: string
          description: Gets the total number of insights with an up direction.
        ShortCount:
          type: string
          description: Gets the total number of insights with a down direction.
        LongShortRatio:
          type: number
          description: The ratio of InsightDirection.Up over InsightDirection.Down
          format: float
        TotalAccumulatedEstimatedAlphaValue:
          type: number
          description: The total accumulated estimated value of trading all insights.
          format: float
        KellyCriterionEstimate:
          type: number
          description: Score of the strategy's insights predictive power.
          format: float
        KellyCriterionProbabilityValue:
          type: number
          description: The p-value or probability value of the KellyCriterionEstimate.
          format: float
        FitnessScore:
          type: number
          description: Score of the strategy's performance, and suitability for the Alpha Stream Market.
          format: float
        PortfolioTurnover:
          type: number
          description: Measurement of the strategies trading activity with respect to the portfolio value. Calculated as the sales volume with respect to the average total portfolio value.
          format: float
        ReturnOverMaxDrawdown:
          type: number
          description: Provides a risk adjusted way to factor in the returns and drawdown of the strategy. It is calculated by dividing the Portfolio Annualized Return by the Maximum Drawdown seen during the backtest.
          format: float
        SortinoRatio:
          type: number
          description: Gives a relative picture of the strategy volatility. It is calculated by taking a portfolio's annualized rate of return and subtracting the risk free rate of return.
          format: float
        EstimatedMonthlyAlphaValue:
          type: number
          description: Suggested Value of the Alpha On A Monthly Basis For Licensing.
          format: float
        TotalInsightsGenerated:
          type: string
          description: The total number of insight signals generated by the algorithm.
        TotalInsightsClosed:
          type: string
          description: The total number of insight signals generated by the algorithm.
        TotalInsightsAnalysisCompleted:
          type: string
          description: The total number of insight signals generated by the algorithm.
        MeanPopulationEstimatedInsightValue:
          type: number
          description: Gets the mean estimated insight value.
          format: float
      description: Contains insight population run time statistics.
    BacktestPortfolioResponse:
      type: object
      properties:
        portfolio:
          $ref: '#/components/schemas/Portfolio'
      description: Contains holdings and cash of the backtest instance.
    BacktestOrdersResponse:
      type: object
      properties:
        Orders:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Order'
        Length:
          type: integer
          description: Total number of returned orders
      description: Contains orders and the number of orders of the backtest in the request criteria.
    BacktestResponse:
      type: object
      properties:
        backtest:
          $ref: '#/components/schemas/BacktestResult'
        debugging:
          type: boolean
          description: Indicates if the backtest is run under debugging mode.
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Packet container for carrying Backtest results.
    BacktestList:
      type: object
      properties:
        backtests:
          type: array
          description: Array of BacktestResponse objects
          items:
            $ref: '#/components/schemas/BacktestResponse'
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Collection container for a list of Backtest objects for a project.
    BacktestReport:
      type: object
      properties:
        report:
          type: string
          description: HTML data of the report with embedded base64 images.
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Backtest Report Response wrapper.
    BacktestReportRequest:
      type: object
      properties:
        projectId:
          type: integer
          description: Id of the project to read.
        backtestId:
          type: string
          description: Specific backtest Id to read.
      description: Request to read out the report of a backtest.
    BacktestResult:
      type: object
      properties:
        note:
          type: string
          description: Note on the backtest attached by the user.
        name:
          type: string
          description: Name of the backtest.
        organizationId:
          type: integer
          description: Organization ID.
        projectId:
          type: integer
          description: Project ID
        completed:
          type: boolean
          description: Boolean true when the backtest is completed.
        optimizationId:
          type: string
          description: Optimization task ID, if the backtest is part of an optimization
        backtestId:
          type: string
          description: Assigned backtest ID
        tradeableDates:
          type: integer
          description: Number of traadeable days
        researchGuide:
          $ref: '#/components/schemas/ResearchGuide'
        backtestStart:
          type: string
          description: The starting time of the backtest
          format: date-time
        backtestEnd:
          type: string
          description: The ending time of the backtest
          format: date-time
        created:
          type: string
          description: Backtest creation date and time.
          format: date-time
        snapshotId:
          type: integer
          description: Snapshot id of this backtest result.
        status:
          type: string
          description: Status of the backtest.
          enum:
          - Completed.
          - In Queue...
          - '''Running: _%'''
        error:
          type: string
          description: Backtest error message.
        stacktrace:
          type: string
          description: Backtest error stacktrace.
        progress:
          type: number
          description: Progress of the backtest in percent 0-1.
          format: float
        profitLoss:
          type: object
          description: time-PnL pairs of profit/loss at a timestamp.
        hasInitializeError:
          type: boolean
          description: Indicates if the backtest has error during initialization.
        charts:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Chart'
          description: Charts updates for the live algorithm since the last result packet.
        parameterSet:
          type: array
          description: Parameters used in the backtest.
          items:
            $ref: '#/components/schemas/ParameterSet'
        alphaRuntimeStatistics:
          $ref: '#/components/schemas/AlphaRuntimeStatistics'
        rollingWindow:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AlgorithmPerformance'
          description: Rolling window detailed statistics.
        runtimeStatistics:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/RuntimeStatistics'
          description: Runtime banner/updating statistics in the title banner of the live algorithm GUI.
        statistics:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TradeStatistics'
          description: Statistics information sent during the algorithm operations.
        totalPerformance:
          $ref: '#/components/schemas/AlgorithmPerformance'
        signals:
          type: string
          description:
        nodeName:
          type: string
          description: The backtest node name.
        outOfSampleMaxEndDate:
          type: string
          description: End date of out of sample data.
          format: date-time
        outOfSampleDays:
          type: integer
          description: Number of days of out of sample days.
      description: Results object class. Results are exhaust from backtest or live algorithms running in LEAN.
    BaseLiveAlgorithmSettings:
      type: object
      properties:
        id:
          type: string
          description: '''Interactive'' / ''FXCM'' / ''Oanda'' / ''Tradier'' /''PaperTrading'''
          example: "Default"
        user:
          type: string
          description: Username associated with brokerage.
          example: ""
        password:
          type: string
          description: Password associated with brokerage.
          example: ""
        environment:
          type: string
          description: Represents the types of environments supported by brokerages for trading.
          enum:
            - live
            - paper
        account:
          type: string
          description: Account of the associated brokerage.
          example: ""
      description: Base class for settings that must be configured per Brokerage to create new algorithms via the API.
    BrokerageData:
      type: object
      properties:
        authentication:
          $ref: '#/components/schemas/LiveAuthenticationData'
        additionalProperties:
          $ref: '#/components/schemas/BrokerageId'
      description: Brokerage data saved on live deployment.
    BrokerageId:
      type: object
      properties:
        id:
          type: string
          description: The ID of the brokerage.
      description: Brokerage Id.
    Cash:
      type: object
      properties:
        Symbol:
          type: string
          description: Gets the symbol used to represent this cash.
        Amount:
          type: number
          description: Gets or sets the amount of cash held.
          format: float
        ConversionRate:
          type: number
          description: The currency conversion rate to the account base currency.
          format: float
        CurrencySymbol:
          description: The symbol of the currency, such as $.
        ValueInAccountCurrency:
          type: number
          description: The value of the currency cash in the account base currency.
          format: float
      description: Represents a holding of a currency in cash.
    CashAmount:
      properties:
        Amount:
          type: number
          description: The amount of cash.
          format: float
        Currency:
          type: string
          description: The currency in which the cash amount is denominated.
      description: Represents a cash amount which can be converted to account currency using a currency converter.
    CashBook:
      type: object
      properties:
        TotalValueInAccountCurrency:
          type: number
          description: The total value of the cash book in units of the base currency.
          format: float
        AccountCurrency:
          type: string
          description: Gets account currency.
      additionalProperties:
        $ref: '#/components/schemas/Cash'
      description: Keeps track of the different cash holdings of an algorithm. Is also a Dictionary of Cash objects.
    Chart:
      type: object
      properties:
        Name:
          type: string
          description: Name of the Chart.
        ChartType:
          type: string
          description: Type of the Chart, Overlayed or Stacked.
          enum:
          - Overlay
          - Stacked
        Series:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Series'
          description: List of Series Objects for this Chart.
      description: Single Parent Chart Object for Custom Charting.
    ChartPoint:
      type: object
      properties:
        x:
          type: string
          description: 'Time of this chart point: lower case for javascript encoding simplicty.'
        y:
          type: number
          description: 'Value of this chart point:  lower case for javascript encoding simplicty.'
          format: float
      description: Location on a chart containing the X-Y location
    CreateCompileRequest:
      type: object
      properties:
        projectId:
          type: integer
          description: Project Id we wish to compile.
      description: Request to compile a project.
    Collaborator:
      type: object
      properties:
        uid:
          type: integer
          description: User id.
        liveControl:
          type: boolean
          description: Indicate if the user have live control.
        permission:
          type: string
          description: The permission this user is given.
          enum:
          - read
          - write
        profileImage:
          type: string
          description: The url of the user profile image.
          example: "https://cdn.quantconnect.com/web/i/users/profile/abc123.jpeg"
        email:
          type: string
          description: The registered email of the user.
          example: "abc@123.com"
        name:
          type: string
          description: The display name of the user.
        bio:
          type: string
          description: The biography of the user.
        owner:
          type: boolean
          description: Indicate if the user is the owner of the project.
    CompileFile:
      type: object
      properties:
        projectId:
          type: integer
          description: Project id.
        open:
          type: boolean
          description: Indicates if the file is being opened.
        isLibrary:
          type: boolean
          description: Indicates if the file is coming from a library project.
        collaborationId:
          type: string
          description: Collaboration id.
      description: File details of files being compiled.
      additionalProperties:
        $ref: '#/components/schemas/ProjectFile'
    CompileResponse:
      type: object
      properties:
        compileId:
          type: string
          description: Compile Id for a sucessful build.
        state:
          type: string
          description: True on successful compile.
          enum:
          - InQueue
          - BuildSuccess
          - BuildError
        parameters:
          type: array
          description: Optimization parameters.
          items:
            $ref: '#/components/schemas/OptimizationParameter'
        projectId:
          type: integer
          description: Project Id we sent for compile.
        signature:
          type: string
          description: Signature key of compilation.
        signatureOrder:
          type: array
          description: Signature order of files to be compiled.
          items:
          - string
        logs:
          type: array
          description: Logs of the compilation request.
          items:
            type: string
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response from the compiler on a build event.
    CreateBacktestRequest:
      type: object
      properties:
        projectId:
          type: integer
          description: Project Id we sent for compile.
        compileId:
          type: string
          description: Compile Id for the project to backtest.
        backtestName:
          type: string
          description: Name for the new backtest.
      description: Request to create a new backtest.
    CreateLiveAlgorithmRequest:
      type: object
      properties:
        versionId:
          type: string
          description: The version of the Lean used to run the algorithm. -1 is master, however, sometimes this can create problems with live deployments. If you experience problems using, try specifying the version of Lean you would like to use.
          example: "-1"
        projectId:
          type: integer
          description: Project Id.
        compileId:
          type: string
          description: Compile Id.
        nodeId:
          type: string
          description: Id of the node that will run the algorithm.
        brokerage:
          $ref: '#/components/schemas/BaseLiveAlgorithmSettings'
      description: Request to create a live algorithm.
    CreateLiveAlgorithmResponse:
      type: object
      properties:
        responseCode:
          type: string
          description: Response code
          example: "200 OK"
        versionId:
          type: string
          description: The version of the Lean used to run the algorithm.
          example: "15753"
        projectId:
          type: integer
          description: Project Id.
        deployId:
          type: string
          description: Deployment Id.
        source:
          type: string
          description: Id of the node that will run the algorithm.
          example: "api-v2"
        queueHandler:
          type: string
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received when deploying a live algorithm.
    CreateOptimizationRequest:
      type: object
      properties:
        projectId:
          type: integer
          description: Project ID of the project the optimization belongs to.
        name:
          type: string
          description: Name of the optimization.
        target:
          type: string
          description: Target of the optimization.
        targetTo:
          type: string
          description: Target extremum of the optimization.
          example: max or min
        targetValue:
          type: float
          description: Optimization target value.
        strategy:
          type: string
          description: Optimization strategy.
          example: QuantConnect.Optimizer.Strategies.GridSearchOptimizationStrategy
        compileId:
          type: string
          description: Optimization compile ID.
        parameters:
          type: array
          description: Optimization parameters.
          items:
            $ref: '#/components/schemas/OptimizationParameter'
        constraints:
          type: array
          description: Optimization constraints.
          items:
            $ref: '#/components/schemas/OptimizationConstraint'
        estimatedCost:
          type: float
          description: Estimated cost for optimization.
          example: 10
        nodeType:
          type: string
          description: Optimization node type.
          example: O2-8
          enum:
          - O2-8
          - O4-12
          - O8-16          
        parallelNodes:
          type: integer
          description: Number of parallel nodes for optimization.
          example: 4
      description: Request to create an optimization job.
    CreateOptimizationResponse:
      type: object
      properties:
        optimizationId:
          type: string
          description: Optimization ID.
        projectId:
          type: string
          description: Project ID of the project the optimization belongs to.
        name:
          type: string
          description: Name of the optimization.
        status:
          type: string
          description: Status of the optimization.
          enum:
          - New
          - Aborted
          - Running
          - Completed
        nodeType:
          type: string
          description: Optimization node type.
          example: O2-8
          enum:
          - O2-8
          - O4-12
          - O8-16 
        criterion:
          $ref: '#/components/schemas/OptimizationTarget'
      description: Response received when launching an optimization job.
    CreateProjectRequest:
      type: object
      properties:
        name:
          type: string
          description: Project name.
        language:
          type: string
          description: Programming langage to use.
          enum:
          - C#
          - Py
      description: Request to create a project.
    CreateProjectFileRequest:
      type: object
      properties:
        projectId:
          type: integer
          description: Project Id to which the file belongs.
        name:
          type: string
          description: The name of the new file.
          example: main.py
        content:
          type: string
          description: The content of the new file.
      description: Request to add a file to a project.
    DataDownloadRequest:
      type: object
      properties:
        format:
          description: Format for returning data, link or download.
          example: link
        ticker:
          type: string
        type:
          $ref: '#/components/schemas/SecurityType'
        resolution:
          $ref: '#/components/schemas/Resolution'
        market:
          $ref: '#/components/schemas/Market'
        date:
          type: string
          description: Date of the data requested yyyyMMdd.
          example: yyyyMMdd
      description: Request for a link to downloadable data.
    DeleteFileRequest:
      type: object
      properties:
        projectId:
          type: integer
          description: Project Id to which the file belongs.
        name:
          type: string
          description: The name of the file that should be deleted.
      description: Request to delete a file in a project.
    DeleteProjectRequest:
      type: object
      properties:
        projectId:
          type: integer
          description: Project Id to which the file belongs.
      description: Request to delete a project.
    DeleteBacktestRequest:
      type: object
      properties:
        projectId:
          type: integer
          description: Project Id for the backtest we want to delete.
        backtestId:
          type: string
          description: Backtest Id we want to delete.
      description: Request to delete a backtest.
    DeleteObjectStoreRequest:
      type: object
      properties:
        organizationId:
          type: string
          description: Organization ID we'd like to delete the Object Store file from.
        key:
          type: string
          description: Key to the Object Store file
      description: Request to delete Object Store metadata of a specific organization and key.    
    DeleteOptimizationRequest:
      type: object
      properties:
        optimizationId:
          type: string
          description: Optimization ID we want to delete.
      description: Delete an optimization.
    EncryptionKey:
      type: object
      properties:
        id:
          type: string
          description: Encryption key id.
        name:
          type: string
          description: Name of the encryption key.
      description: Encryption key details.
    Estimate:
      type: object
      properties:
        estimateId:
          type: string
          description: Estimate Id.
        time:
          type: integer
          description: Estimate time in seconds.
          example: 60
        balance:
          type: integer
          description: Estimate balance in QCC.
          example: 10
      description: Response received when estimating the cost of an optimization.
    EstimateOptimizationRequest:
      type: object
      properties:
        projectId:
          type: integer
          description: Project ID of the project the optimization belongs to.
        name:
          type: string
          description: Name of the optimization.
        target:
          type: string
          description: Target of the optimization.
        targetTo:
          type: string
          description: Target extremum of the optimization.
          example: max or min
        targetValue:
          type: float
          description: Optimization target value.
        strategy:
          type: string
          description: Optimization strategy.
          example: QuantConnect.Optimizer.Strategies.GridSearchOptimizationStrategy
        compileId:
          type: string
          description: Optimization compile ID.
        parameters:
          type: array
          description: Optimization parameters.
          items:
            $ref: '#/components/schemas/OptimizationParameter'
        constraints:
          type: array
          description: Optimization constraints.
          items:
            $ref: '#/components/schemas/OptimizationConstraint'
      description: Request to estimate the cost of an optimization job.
    EstimateOptimizationResponse:
      type: object
      properties:
        estimate:
          $ref: '#/components/schemas/Estimate'
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received when estimating the cost of an optimization.
    GetObjectStoreRequest:
      type: object
      properties:
        organizationId:
          type: string
          description: Organization ID we'd like to get the Object Store metadata from.
        key:
          type: string
          description: Key to the Object Store file
      description: Request to get Object Store metadata of a specific organization and key.
    GetObjectStoreResponse:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/ObjectStoreMetadata'
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received when fetching Object Store metadata.
    Grid:
      type: object
      properties:
        xs:
          type: array
          description: List of chart in the xs position
          items:
            $ref: '#/components/schemas/GridChart'
        sm:
          type: array
          description: List of chart in the sm position
          items:
            $ref: '#/components/schemas/GridChart'
        md:
          type: array
          description: List of chart in the md position
          items:
            $ref: '#/components/schemas/GridChart'
        lg:
          type: array
          description: List of chart in the lg position
          items:
            $ref: '#/components/schemas/GridChart'
        xl:
          type: array
          description: List of chart in the xl position
          items:
            $ref: '#/components/schemas/GridChart'
      description: The grid arrangement of charts.
    GridChart:
      type: object
      properties:
        chartName:
          type: string
          description: The chart name.
        width:
          type: integer
          description: Width of the chart.
        height:
          type: integer
          description: Height of the chart.
        row:
          type: integer
          description: Number of rows of the chart.
        column:
          type: integer
          description: Number of columns of the chart.
        sort:
          type: integer
          description: Sort of the chart.
      description: The chart display properties.
    Holding:
      type: object
      properties:
        Symbol:
          $ref: '#/components/schemas/Symbol'
        Type:
          $ref: '#/components/schemas/SecurityType'
        CurrencySymbol:
          type: string
          description: The currency symbol of the holding.
          example: $
        AveragePrice:
          type: number
          description: Average Price of our Holding in the currency the symbol is traded in.
          format: float
        Quantity:
          type: number
          description: Quantity of the Symbol we hold.
          format: float
        MarketPrice:
          type: number
          description: Current Market Price of the Asset in the currency the symbol is traded in.
          format: float
        ConversionRate:
          type: number
          description: Current market conversion rate into the account currency.
          format: float
        MarketValue:
          type: number
          description: Current market value of the holding.
          format: float
        UnrealizedPnl:
          type: number
          description: Current unrealized P/L of the holding.
          format: float
      description: Live results object class for packaging live result data.
    Insight:
      type: object
      properties:
        Id:
          type: string
          description: Insight ID.
        Time:
          type: number
          description: Gets the utc unixtime this insight was created.
          format: float
        SignalDirection:
          type: string
          description: Gets the predicted direction, down, flat or up.
          enum:
          - Down
          - Flat
          - Up
        Type:
          type: string
          description: Gets the type of insight, for example, price or volatility
          enum:
          - Price
          - Volatility
        Symbol:
          type: string
          description: Gets the symbol this insight is for
        Direction:
          type: number
          description: Gets the direction score
          format: float
        Magnitude:
          type: number
          description: Gets the magnitude score
          format: float
        Period:
          type: number
          description: Gets the period, in seconds, over which this insight is expected to come to fruition
          format: float
        Weight:
          type: number
          description: Gets the portfolio weight of this insight
          format: float
      description: Insight struct for emitting new prediction.    
    InsightScore:
      type: object
      properties:
        UpdatedTimeUtc:
          type: string
          description: The time these scores were last updated.
          format: date-time
        Direction:
          type: number
          description: The direction score.
          format: float
        Magnitude:
          type: number
          description: The magnitude score.
          format: float
        IsFinalScore:
          type: boolean
          description: Is the insight past its expiry time and score can be finalized.
      description: Defines the scores given to a particular insight
    Library:
      type: object
      properties:
        projectId:
          type: integer
          description: Project Id of the library project.
        libraryName:
          type: string
          description: Name of the library project.
        ownerName:
          type: string
          description: Name of the library project owner.
        access:
          type: boolean
          description: Indicate if the library project can be accessed.
    LiveAlgorithm:
      type: object
      properties:
        projectId:
          type: integer
          description: Project Id for the live instance.
        deployId:
          type: string
          description: Unique live algorithm deployment identifier (similar to a backtest id).
        status:
          $ref: '#/components/schemas/AlgorithmStatus'
        launched:
          type: string
          description: Datetime the algorithm was launched in UTC.
          format: date-time
        stopped:
          type: string
          description: Datetime the algorithm was stopped in UTC, null if its still running.
          format: date-time
        brokerage:
          type: string
          description: Brokerage
          enum:
          - Interactive
          - FXCM
          - Oanda
          - Tradier
          - PaperTrading
          - Alpaca
          - Bitfinex
          - Binance
          - Coinbase
        subscription:
          type: string
          description: Chart we're subscribed to.
        error:
          type: string
          description: Live algorithm error message from a crash or algorithm runtime error.
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Live algorithm instance result from the QuantConnect Rest API.
    LiveAuthenticationData:
      type: object
      description: Authentication details of the live brokerage. Details on each brokerage refers to https://www.quantconnect.com/docs/v2/lean-cli/api-reference/lean-cloud-live-deploy.
    LiveForm:
      type: object
      properties:
        brokerageData:
          $ref: '#/components/schemas/BrokerageData'
        dataProvidersData:
          type: array
          description: The data providers used in the live deployment.
          items:
            $ref: '#/components/schemas/BrokerageId'
        node:
          type: string
          description: Node ID of the live node deployed.
        notifyInsights:
          type: string
          description: Indicates if notification should be issued on new insights.
          enum:
          - "true"
          - "false"
        notifyOrderEvents:
          type: string
          description: Indicates if notification should be issued on new order events.
          enum:
          - "true"
          - "false"
        autoRestart:
          type: string
          description: Indicates if the live algorithm should automatically restart after encountering runtime errors.
          enum:
          - "true"
          - "false"
    LiveResult:
      type: object
      properties:
        Holdings:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Holding'
          description: Dictionary of algorithm holdings information.
        Cash:
          $ref: '#/components/schemas/Cash'
        AlphaRuntimeStatistics:
          $ref: '#/components/schemas/AlphaRuntimeStatistics'
        Charts:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Chart'
          description: Charts updates for the live algorithm since the last result packet.
        Orders:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Order'
          description: Order updates since the last result packet.
        OrderEvents:
          type: array
          description: OrderEvent updates since the last result packet.
          items:
            $ref: '#/components/schemas/OrderEvent'
        ProfitLoss:
          type: object
          additionalProperties:
            type: number
            format: float
          description: Trade profit and loss information since the last algorithm result packet.
        Statistics:
          type: object
          additionalProperties:
            type: string
          description: Statistics information sent during the algorithm operations.
        RuntimeStatistics:
          type: object
          additionalProperties:
            type: string
          description: Runtime banner/updating statistics in the title banner of the live algorithm GUI.
        ServerStatistics:
          type: object
          additionalProperties:
            type: string
          description: Server status information, including CPU and RAM usage.
      description: Live results object class for packaging live result data.
    LiveAlgorithmResults:
      type: object
      properties:
        LiveResults:
          $ref: '#/components/schemas/LiveResultsData'
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Details a live algorithm from the live/read API endpoint.
    LiveAlgorithmLogs:
      type: object
      properties:
        LiveAlgorithmLogs:
          type: array
          description: List of logs from the live algorithm.
          items:
            type: string
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Logs from a live algorithm.
    LiveAlgorithmList:
      type: object
      properties:
        live:
          type: array
          description: Algorithm list matching the requested status.
          items:
            $ref: '#/components/schemas/LiveAlgorithm'
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: List of the live algorithms running which match the requested status.
    LiquidateLiveAlgorithmRequest:
      type: object
      properties:
        projectId:
          type: integer
          description: Project Id for the live instance we want to liquidate.
      description: Request to liquidate a live algorithm.
    ListObjectStoreRequest:
      type: object
      properties:
        organizationId:
          type: string
          description: Organization ID we'd like to list the Object Store files from.
        path:
          type: string
          description: Path to the Object Store files
      description: Request to list Object Store files of a specific organization and key.   
    ListObjectStoreResponse:
      type: object
      properties:
        path:
          type: string
          description: Path to the files in the Object Store.
          example: Mia
        objects:
          type: array
          description: Indicate if the API request was successful.
          items:
            $ref: '#/components/schemas/ObjectStoreSummary'
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received when listing Object of a project.
    ListOptimizationRequest:
      type: object
      properties:
        projectId:
          type: integer
          description: Project ID we'd like to get a list of optimizations for.
      description: Project ID we'd like to get a list of optimizations for.
    ListOptimizationResponse:
      type: object
      properties:
        optimizations:
          type: array
          description: Collection of summarized optimization objects.
          items:
            $ref: '#/components/schemas/CreateOptimizationResponse'
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received when listing optimizations of a project.
    LiveList:
      type: object
      properties:
        Algorithms:
          type: array
          description: Algorithm list matching the requested status.
          items:
            $ref: '#/components/schemas/LiveAlgorithm'
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: List of the live algorithms running which match the requested status.
    LivePortfolioResponse:
      type: object
      properties:
        portfolio:
          $ref: '#/components/schemas/Portfolio'
      description: Contains holdings and cash of the live algorithm in the request criteria.
    LiveOrdersResponse:
      type: object
      properties:
        orders:
          type: array
          description: Collection of orders.
          items:
            $ref: '#/components/schemas/Order'
        Length:
          type: integer
          description: Total number of returned orders
        latestOrderTimestamp:
          type: integer
          description: Timestamp of the latest order event.
      description: Contains orders and the number of orders of the live algorithm in the request criteria.
    LiveInsightsResponse:
      type: object
      properties:
        insights:
          type: array
          description: Collection of insights.
          items:
            $ref: '#/components/schemas/Insight'
        length:
          type: integer
          description: Total number of returned insights
        success:
          type: boolean
          description: Indicate if the API request was successful.
      description: Contains insights and the number of insights of the live algorithm in the request criteria.
    LiveResultsData:
      type: object
      properties:
        version:
          type: integer
          description: Results version.
        resolution:
          $ref: '#/components/schemas/ChartResolution'
        results:
          $ref: '#/components/schemas/LiveResult'
      description: Holds information about the state and operation of the live running algorithm.
    Market:
      type: string
      description: Fungible market of the underlying security.
      enum:
      - usa
      - oanda
      - fxcm
      - dukascopy
      - bitfinex
      - cmeglobex
      - nymex
      - cbot
      - ice
      - cboe
      - nse
      - comex
      - cme
      - sgx
      - hkfe
      - coinbase
      - kraken
      - bitstamp
      - okcoin
      - bithumb
      - binance
      - poloniex
      - coinone
      - hitbtc
      - bittrex
    Node:
      type: object
      properties:
        speed:
          type: float
          description: The nodes cpu clock speed in GHz.
        price:
          $ref: '#/components/schemas/NodePrices'
          description: The monthly and yearly prices of the node in US dollars.
        cpu:
          type: integer
          description: CPU core count of node.
        ram:
          type: float
          description: Size of RAM in Gigabytes.
        name:
          type: string
          description: Name of the node.
        sku:
          type: string
          description: Node type identifier for configuration.
        description:
          type: string
          description: String description of the node.
        usedBy:
          type: string
          description: User currently using the node.
        projectName:
          type: string
          description: Project the node is being used for.
        projectId:
          type: int
          description: Id of the project the node is being used for.
        busy:
          type: boolean
          description: Indicates if the node is currently busy.
        id:
          type: string
          description: Full Id of node.
        assets:
          type: int
          description: Maximum number of assets recommended for this node.
        host:
          type: string
          description: Node host. 
        active:
          type: boolean
          description: Indicate if this is the active node. The project will use this node if it's not busy.
      description: Contains all relevant information on a Node to interact through API endpoints.
    ObjectStoreBinaryFile:
      type: object
      properties:
        objectData:
          type: string
          format: binary
      description: Represents a binary file we we'd like to upload the file to upload to the Object Store.
    ObjectStoreMetadata:
      type: object
      properties:
        key:
          type: string
          description: Object Store key.
          example: "Mia/Test"
        created:
          type: string
          description: Time the file was created.
          format: date-time
        modified:
          type: string
          description: Time the file was modified.
          format: date-time
        size:
          type: float
          description: File size.
          example: 13
        md5:
          type: string
          description: MD5 Hash of the file.
          example: 5d41402abc4b2a76b9719d911017c592
        mime: 
          type: string
          description: MIME type.
          example: "text/plain"
        preview:
          type: string
          description: Preview of the file content.
          example: Hello, world!
      description: Metadata of the Object Store file.
    ObjectStoreSummary:
      type: object
      properties:
        key:
          type: string
          description: Object Store key.
          example: "Mia/Test"
        name:
          type: string
          description: File or folder name.
        folder:
          type: boolean
          description: True if it is a folder.
        size:
          type: float
          description: File size.
          example: 13
      description: Summary information of the Object Store.
    OptimizationConstraint:
      type: object
      properties:
        target:
          type: string
          description: Property we want to track
          example: TotalPerformance.PortfolioStatistics.SharpeRatio
        operator:
          type: string
          description: The target comparison operation
          example: greater
        target-value:
          type: float
          description: The value of the property we want to track
          example: 1
    OptimizationParameter:
      type: object
      properties:
        name:
          type: string
          description: Name of optimization parameter.
          example: rsi_period
        min:
          type: float
          description: Minimum value of optimization parameter, applicable for boundary conditions.
          example: 10
        max:
          type: float
          description: Maximum value of optimization parameter, applicable for boundary conditions.
          example: 20
        step:
          type: float
          description: Movement, should be positive
          example: 1
        min-step:
          type: float
          description: Minimal possible movement for current parameter, should be positive. Used by <code>Strategies.EulerSearchOptimizationStrategy</code> to determine when this parameter can no longer be optimized.
          example: 1
    OptimizationTarget:
      type: object
      properties:
        target:
          type: string
          description: Property we want to track
          example: TotalPerformance.PortfolioStatistics.SharpeRatio
        extremum:
          type: string
          description: Defines the direction of optimization.
          example: max or min
        target-value:
          type: float
          description: The value of the property we want to track
          example: 1
    ProjectLiveResult:
      type: object
      properties:
        eStatus:
          type: string
          description:
        sDeployID:
          type: string
          description: The live deployment id.
        sServerType:
          type: string
          description: The live server node type.
        dtLaunched:
          type: string
          description: The datetime of live deployment launched.
          format: date-time
        dtStopped:
          type: string
          description: The datetime of live deployment stopped.
          format: date-time
        sBrokerage:
          type: string
          description: The broker chosen for the live deployment instance.
        sSecurityTypes:
          type: array
          description: The security types involved in the live deployment instance.
          items:
            type: string
        dUnrealized:
          type: number
          description: The unrealized profit or loss.
          format: float
        dfees:
          type: number
          description: The transaction fee generated.
          format: float
        dnetprofit:
          type: number
          description: The net profit or loss.
          format: float
        dEquity:
          type: number
          description: The total portfolio value.
          format: float
        dHoldings:
          type: number
          description: The holding equity's value.
          format: float
        dCapital:
          type: number
          description: The free cash value.
          format: float
        dVolume:
          type: number
          description: The holding equity's value.
          format: float
        iTrades:
          type: number
          description:
          format: float
        sErrorMessage:
          type: string
          description: The error message last generated.
    ProjectNodes:
      type: object
      properties:
        backtest:
          type: array
          description: Collection of backtest nodes.
          items:
            $ref: '#/components/schemas/Node'
        live:
          type: array
          description: Collection of live nodes.
          items:
            $ref: '#/components/schemas/Node'
        research:
          type: array
          description: Collection of research nodes.
          items:
            $ref: '#/components/schemas/Node'
      description: Contains sets of node lists for each target environment.
    NodePrices:
      type: object
      properties:
        monthly:
          type: integer
          description: The monthly price of the node in US dollars.
        yearly:
          type: integer
          description: The yearly price of the node in US dollars.
      description: Node prices from node object.
    NodeType:
      type: string
      description: NodeTypes enum for all possible options of target environments.
      enum:
      - Backtest
      - Research
      - Live
    Optimization:
      type: object
      properties:
        optimizationId:
          type: string
          description: Optimization ID.
        projectId:
          type: string
          description: Project ID of the project the optimization belongs to.
        name:
          type: string
          description: Name of the optimization.
        status:
          type: string
          description: Status of the optimization.
          enum:
          - New
          - Aborted
          - Running
          - Completed
        nodeType:
          type: string
          description: Optimization node type.
          example: O2-8
          enum:
          - O2-8
          - O4-12
          - O8-16 
        parallelNodes:
          type: integer
          description: Number of parallel nodes for optimization.
          example: 4
        criterion:
          $ref: '#/components/schemas/OptimizationTarget'
        runtimeStatistics:
          type: object
          additionalProperties:
            type: string
          description: Runtime banner/updating statistics for the optimization.
        constraints:
          type: array
          description: Optimization constraints.
          items:
            $ref: '#/components/schemas/OptimizationConstraint'
        parameters:
          type: array
          description: Optimization parameters.
          items:
            $ref: '#/components/schemas/OptimizationParameter'
        backtests:
          type: array
          description: Optimization constraints.
          items:
            $ref: '#/components/schemas/OptimizationBacktest'
        strategy:
          type: string
          description: Optimization strategy.
          example: QuantConnect.Optimizer.Strategies.GridSearchOptimizationStrategy
        requested:
          type: string
          description: Optimization requested date and time.
          format: date-time    
      description: Response received when launching an optimization job.
    OptimizationBacktest:
      type: object
      properties:
        name:
          type: string
          description: The backtest name.
        id:
          type: string
          description: The backtest id
        progress:
          type: string
          description: Progress of the backtest as a percentage from 0-1 based on the days lapsed from start-finish.
        exitCode:
          type: integer
          description: The exit code of this backtest
        statistics:
          type: object
          additionalProperties:
            type: string
          description: The backtest statistics results.
        parameterSet:
          type: string
          description: Represent a combination as key value of parameters, i.e. order doesn't matter.
        equity:
          type: string
          description: The backtest equity chart series.
    Order:
      type: object
      properties:
        Id:
          type: integer
          description: Order ID.
        ContingentId:
          type: integer
          description: Order Id to process before processing this order.
        BrokerId:
          type: array
          description: Brokerage Id for this order for when the brokerage splits orders into multiple pieces.
          items:
            type: string
        Symbol:
          $ref: '#/components/schemas/Symbol'
        Price:
          type: number
          description: Price of the Order.
          format: float
        PriceCurrency:
          type: string
          description: Currency for the order price.
        Time:
          type: string
          description: Gets the utc time the order was created.
          format: date-time
        CreatedTime:
          type: string
          description: Gets the utc time this order was created. Alias for Time.
          format: date-time
        LastFillTime:
          type: string
          description: Gets the utc time the last fill was received, or null if no fills have been received.
          format: date-time
        LastUpdateTime:
          type: string
          description: Gets the utc time this order was last updated, or null if the order has not been updated.
          format: date-time
        CanceledTime:
          type: string
          description: Gets the utc time this order was canceled, or null if the order was not canceled.
          format: date-time
        Quantity:
          type: number
          description: Number of shares to execute.
          format: float
        Type:
          type: string
          description: Order type.
          enum:
          - Market
          - Limit
          - StopMarket
          - StopLimit
          - MarketOnOpen
          - MarketOnClose
          - OptionExercise
        Status:
          type: string
          description: Status of the Order.
          enum:
          - New
          - Submitted
          - PartiallyFilled
          - Filled
          - Canceled
          - None
          - Invalid
          - CancelPending
          - UpdateSubmitted
        Tag:
          type: string
          description: Tag the order with some custom data.
        SecurityType:
          $ref: '#/components/schemas/SecurityType'
        Direction:
          $ref: '#/components/schemas/OrderDirection'
        Value:
          type: number
          description: Gets the executed value of this order. If the order has not yet filled, then this will return zero.
          format: float
        OrderSubmissionData:
          $ref: '#/components/schemas/OrderSubmissionData'
        IsMarketable:
          type: boolean
          description: Returns true if the order is a marketable order.
      description: Order struct for placing new trade.
    OrderDirection:
      type: string
      description: Direction of the order.
      enum:
      - Buy
      - Sell
      - Hold
    OrderEvent:
      type: object
      properties:
        OrderId:
          type: integer
          description: Id of the order this event comes from.
        Id:
          type: integer
          description: The unique order event Id for each order.
        Symbol:
          $ref: '#/components/schemas/Symbol'
        UtcTime:
          type: string
          description: The date and time of this event (UTC).
          format: date-time
        Status:
          $ref: '#/components/schemas/OrderStatus'
        OrderFee:
          $ref: '#/components/schemas/OrderFee'
        FillPrice:
          type: number
          description: Fill price information about the order.
          format: float
        FillPriceCurrency:
          type: string
          description: Currency for the fill price.
        FillQuantity:
          type: number
          description: Number of shares of the order that was filled in this event.
          format: float
        Direction:
          $ref: '#/components/schemas/OrderDirection'
        Message:
          type: string
          description: Any message from the exchange.
        IsAssignment:
          type: boolean
          description: True if the order event is an assignment.
        StopPrice:
          type: number
          description: The current stop price.
          format: float
        LimitPrice:
          type: number
          description: The current limit price.
          format: float
        Quantity:
          type: number
          description: The current order quantity.
          format: float
      description: Change in an order state applied to user algorithm portfolio
    OrderFee:
      type: object
      properties:
        Value:
          $ref: '#/components/schemas/CashAmount'
      description: The order fee associated with the specified order.
    OrderSubmissionData:
      type: object
      properties:
        BidPrice:
          type: number
          description: The bid price at an order submission time.
          format: float
        AskPrice:
          type: number
          description: The ask price at an order submission time.
          format: float
        LastPrice:
          type: number
          description: The current price at an order submission time.
          format: float
      description: Stores time and price information available at the time an order was submitted.
    OrderStatus:
      type: object
      properties:
        OrderId:
          type: integer
          description: Id of the order this event comes from.
        Id:
          type: integer
          description: The unique order event Id for this order.
        Symbol:
          $ref: '#/components/schemas/Symbol'
        UtcTime:
          type: string
          description: The date and time of this event.
          format: date-time
        Status:
          $ref: '#/components/schemas/Order/properties/Status'
        FillPrice:
          type: number
          description: Fill price information about the order.
          format: float
        FillPriceCurrency:
          type: string
          description: Currency for the fill price.
        FillQuantity:
          type: number
          description: Number of shares of the order that was filled in this event.
          format: float
        Direction:
          $ref: '#/components/schemas/OrderDirection'
        Message:
          type: string
          description: Any message from the exchange.
        IsAssignment:
          type: boolean
          description: Order event is an allocation of trades from ITM option assignment.
        StopPrice:
          type: number
          description: The current stop price.
          format: float
        LimitPrice:
          type: number
          description: The current limit price.
          format: float
        Quantity:
          type: number
          description: The current order quantity.
          format: float
      description: Messaging class signifying a change in an order state and record the change in the users algorithm portfolio.
    ParameterSet:
      type: object
      properties:
        name:
          type: string
          description: Name of parameter.
        value:
          type: number
          description: Value of parameter.
      description: Parameter set.
    Portfolio:
      type: object
      properties:
        Holdings:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Holding'
          description: Dictionary of algorithm holdings information.
        Cash:
          $ref: '#/components/schemas/Cash'
    Project:
      type: object
      properties:
        projectId:
          type: integer
          description: Project id.
        organizationId:
          type: integer
          description: Orgainization id.
        name:
          type: string
          description: Name of the project.
        modified:
          type: string
          description: Modified date for the project.
          format: date-time
        created:
          type: string
          description: Date the project was created.
          format: date-time
        ownerId:
          type: integer
          description: Owner id.
        language:
          type: string
          description: Programming language of the project.
          enum:
          - C#
          - Py
        collaborators:
          type: array
          description: List of collaborators.
          items:
            $ref: '#/components/schemas/Collaborator'
        leanVersionId:
          type: integer
          description: The version of LEAN this project is running on.
        leanPinnedToMaster:
          type: boolean
          description: Indicate if the project is pinned to the master branch of LEAN.
        owner:
          type: boolean
          description: Indicate if you are the owner of the project.
        description:
          type: string
          description: The project description.
        channelId:
          type: string
          description: Channel id.
        parameters:
          type: array
          description: Optimization parameters.
          items:
            $ref: '#/components/schemas/ParameterSet'
        liveResults:
          $ref: '#/components/schemas/ProjectLiveResult'
        libraries:
          type: array
          description: The library projects
          items:
            $ref: '#/components/schemas/Library'
        isAlphaStreamDeployment:
          type: integer
          description: Indicate if the project is an alpha stream deployment
        grid:
          $ref: '#/components/schemas/Grid'
        liveGrid:
          $ref: '#/components/schemas/Grid'
        builder:
          type: integer
          description:
        paperEquity:
          type: number
          description: The equity value of the last paper trading instance.
          format: float
        lastLiveDeployment:
          type: string
          description: The last live deployment active time.
          format: date-time
        liveForm:
          type: object
        encrypted:
          type: boolean
          description: Indicates if the project is encrypted.
        codeRunning:
          type: boolean
          description:
        leanEnvironment:
          type: integer
          description: LEAN environment of the project running on.
        encryptionKey:
          $ref: '#/components/schemas/EncryptionKey'
      description: Response from reading a project by id.
    ProjectFile:
      type: object
      properties:
        name:
          type: string
          description: Name of a project file.
        content:
          type: string
          description: Contents of the project file.
        modified:
          type: string
          description: DateTime project file was modified.
          format: date-time
      description: File for a project.
    ProjectFilesResponse:
      type: object
      properties:
        files:
          type: array
          description: List of project file information.
          items:
            $ref: '#/components/schemas/ProjectFile'
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received when reading files from a project.
    ProjectListResponse:
      type: object
      properties:
        projects:
          type: array
          description: List of projects for the authenticated user.
          items:
            $ref: '#/components/schemas/Project'
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Project list response.
    ProjectNodesResponse:
      type: object
      properties:
        nodes:
          type: '#/components/schemas/ProjectNodes'
          description: List of project nodes.
        autoSelectNode:
          type: boolean
          description: Indicate if a node is automatically selected.
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received when reading all nodes of a project.
    PortfolioStatistics:
      type: object
      properties:
        RiskFreeRate:
          type: number
          description: The current defined risk free annual return rate.
          format: float
        AverageWinRate:
          type: number
          description: The average rate of return for winning trades.
          format: float
        AverageLossRate:
          type: number
          description: The average rate of return for losing trades.
          format: float
        ProfitLossRatio:
          type: number
          description: The ratio of the average win rate to the average loss rate.
          format: float
        WinRate:
          type: number
          description: The ratio of the number of winning trades to the total number of trades.
          format: float
        LossRate:
          type: number
          description: The ratio of the number of losing trades to the total number of trades.
          format: float
        Expectancy:
          type: number
          description: The expected value of the rate of return.
          format: float
        CompoundingAnnualReturn:
          type: number
          description: Annual compounded returns statistic based on the final-starting capital and years.
          format: float
        Drawdown:
          type: number
          description: Drawdown maximum percentage.
          format: float
        TotalNetProfit:
          type: number
          description: The total net profit percentage.
          format: float
        SharpeRatio:
          type: number
          description: 'Sharpe ratio with respect to risk free rate: measures excess of return per unit of risk.'
          format: float
        ProbabilisticSharpeRatio:
          type: number
          description: Probabilistic Sharpe Ratio is a probability measure associated with the Sharpe ratio. It informs us of the probability that the estimated Sharpe ratio is greater than a chosen benchmark.
          format: float
        Alpha:
          type: number
          description: Algorithm "Alpha" statistic - abnormal returns over the risk free rate and the relationshio (beta) with the benchmark returns.
          format: float
        Beta:
          type: number
          description: Algorithm beta statistic - the covariance between the algorithm and benchmark performance, divided by benchmark variance.
          format: float
        AnnualStandardDeviation:
          type: number
          description: Annualized standard deviation
          format: float
        AnnualVariance:
          type: number
          description: Annualized variance statistic calculation using the daily performance variance and trading days per year.
          format: float
        InformationRatio:
          type: number
          description: Information ratio - risk adjusted return.
          format: float
        TrackingError:
          type: number
          description: Tracking error volatility (TEV) statistic - a measure of how closely a portfolio follows the index to which it is benchmarked.
          format: float
        TreynorRatio:
          type: number
          description: Treynor ratio statistic is a measurement of the returns earned in excess of that which could have been earned on an investment that has no diversifiable risk.
          format: float
      description: Represents a set of statistics calculated from equity and benchmark samples.
    ReadFilesRequest:
      required:
      - projectId
      type: object
      properties:
        projectId:
          type: integer
          description: Project Id to which the file belongs.
        includeLibraries:
          type: boolean
          description: Optional. Indicates if files from library projects should be read.
        name:
          type: string
          description: Optional. The name of the file that should be updated.
      description: Request to read all files from a project.
    ReadCompileRequest:
      type: object
      properties:
        projectId:
          type: integer
          description: Project Id we sent for compile.
        compileId:
          type: string
          description: Compile Id returned during the creation request.
      description: Request to read a compile packet job.
    ReadDataLinkResponse:
      type: object
      properties:
        link:
          type: string
          description: Link to the data.
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response from reading purchased data.
    ReadLiveLogsRequest:
      type: object
      properties:
        format:
          description: Format of the log results
          example: json
        projectId:
          type: integer
          description: Project Id of the live running algorithm.
        algorithmId:
          type: string
          description: Deploy Id (Algorithm Id) of the live running algorithm.
        start:
          type: integer
          description: No logs will be returned before this unixtime.
        end:
          type: integer
          description: No logs will be returned after this unixtime.
      description: Request to read the logs of a specific algorithm.
    ReadLiveLogsResponse:
      type: object
      properties:
        LiveLogs:
          type: array
          description: List of logs from the live algorithm.
          items:
            type: string
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Logs from a live algorithm.
    ReadProjectRequest:
      type: object
      properties:
        projectId:
          type: integer
          description: Id of the project.
      description: Request to get details about a specific project.
    ReadProjectNodesRequest:
      type: object
      properties:
        projectId:
          type: string
          description: Project Id to which the nodes refer.
      description: Request to get details about nodes of a specific organization.
    ReadLiveAlgorithmRequest:
      type: object
      properties:
        projectId:
          type: integer
          description: Id of the project to read.
        deployId:
          type: string
          description: Specific instance Id to read.
      description: Request to read out a single algorithm.
    ReadLivePortfolioRequest:
      required:
      - projectId
      type: object
      properties:
        projectId:
          type: integer
          description: Id of the project from which to read the live algorithm.
      description: Request to read the portfolio state from a live algorithm.
    ReadLiveOrdersRequest:
      required:
      - end
      - projectId
      type: object
      properties:
        start:
          type: integer
          description: Starting index of the orders to be fetched. Required if end > 100.
        end:
          type: integer
          description: Last index of the orders to be fetched. Note that end - start must be less than 100.
        projectId:
          type: integer
          description: Id of the project from which to read the live algorithm.
      description: Request to read orders from a live algorithm.
    ReadLiveInsightsRequest:
      required:
      - end
      - projectId
      type: object
      properties:
        start:
          type: integer
          description: Starting index of the insights to be fetched. Required if end > 100.
        end:
          type: integer
          description: Last index of the insights to be fetched. Note that end - start must be less than 100.
        projectId:
          type: integer
          description: Id of the project from which to read the live algorithm.
      description: Request to read insights from a live algorithm.
    ListLiveAlgorithmsRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/AlgorithmStatus'
        start:
          type: string
          description: Earliest launched time of the algorithms
          format: date-time
        end:
          type: string
          description: Latest launched time of the algorithms
          format: date-time
      description: Request for a list of live running algorithms.
    ReadBacktestRequest:
      required:
      - projectId
      type: object
      properties:
        projectId:
          type: integer
          description: Id of the project from which to read one or multiple backtests.
        backtestId:
          type: string
          description: When provided, specific backtest Id to read.
      description: Request to read a single backtest from a project.
    ReadBacktestPortfolioRequest:
      required:
      - projectId
      - backtestId
      type: object
      properties:
        projectId:
          type: integer
          description: Id of the project from which to read the backtest.
        backtestId:
          type: string
          description: Id of the backtest from which to read the portfolio state.
      description: Request to read the portfolio state from a backtest in a project.
    ReadBacktestOrdersRequest:
      required:
      - start
      - end
      - projectId
      - backtestId
      type: object
      properties:
        start:
          type: integer
          description: Starting index of the orders to be fetched. Required if end > 100.
        end:
          type: integer
          description: Last index of the orders to be fetched. Note that end - start must be less than 100.
        projectId:
          type: integer
          description: Id of the project from which to read the backtest.
        backtestId:
          type: string
          description: Id of the backtest from which to read the orders.
      description: Request to read orders from a backtest.
    ReadOptimizationRequest:
      required:
      - optimizationId
      type: object
      properties:
        optimizationId:
          type: string
          description: Optimization ID for the optimization we want to read.
      description: Request to read a optimization from a project.
    ReadOptimizationResponse:
      type: object
      properties:
        optimization:
          $ref: '#/components/schemas/Optimization'
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Response received when reading an optimization.
    RequestFailedError:
      type: object
      properties:
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: The API method call could not be completed as requested.
    ResearchGuide:
      type: object
      properties:
        minutes:
          type: integer
          description: Number of minutes used in developing the current backtest.
        backtestCount:
          type: integer
          description: Backtest count of the current backtest in the project.
        parameters:
          type: integer
          description: Number of parameters detected.
      description: The API method call could not be completed as requested.
    RestResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicate if the API request was successful.
        errors:
          type: array
          description: List of errors with the API call.
          items:
            type: string
      description: Base API response class for the QuantConnect API.
    Resolution:
      type: string
      description: Resolution of data requested.
      enum:
      - Tick
      - Second
      - Minute
      - Hour
      - Daily
    RuntimeStatistics:
      type: object
      properties:
        Equity:
          type: string
          description: Total portfolio value.
          example: '$100.00'
        Fees:
          type: string
          description: Transaction fee.
          example: '-$100.00'
        Holdings:
          type: string
          description: Equity value of security holdings.
          example: '$100.00'
        Net Profit:
          type: string
          description: Net profit.
          example: '$100.00'
        Probabilistic Sharpe Ratio:
          type: string
          description: Probabilistic Sharpe Ratio.
          example: '50.00%'
        Return:
          type: string
          description: Return.
          example: '50.00%'
        Unrealized:
          type: string
          description: Unrealized profit/loss.
          example: '$100.00'
        Volume:
          type: string
          description: Total transaction volume.
          example: '$100.00'
    ChartResolution:
      type: string
      description: Storage format of the charting data
      enum:
      - 10minute
      - minute
      - second
    SecurityType:
      type: string
      description: Type of tradable security / underlying asset.
      enum:
      - Base
      - Equity
      - Option
      - Commodity
      - Forex
      - Future
      - Cfd
      - Crypto
    Series:
      type: object
      properties:
        Name:
          type: string
          description: Name of the series.
        Unit:
          type: string
          description: Axis for the chart series.
        Index:
          type: integer
          description: Index/position of the series on the chart.
        Values:
          type: array
          description: Values for the series plot. These values are assumed to be in ascending time order (first points earliest, last points latest)
          items:
            $ref: '#/components/schemas/ChartPoint'
        SeriesType:
          type: string
          description: Chart type for the series.
          enum:
          - Line
          - Scatter
          - Candle
          - Bar
          - Flag
          - StackedArea
          - Pie
          - Treemap
        Color:
          type: string
          description: Color the series.
        ScatterMarkerSymbol:
          type: string
          description: Shape or symbol for the marker in a scatter plot.
          enum:
          - none
          - circle
          - square
          - diamond
          - triangle
          - triangle-down
      description: Chart Series Object - Series data and properties for a chart.
    SetObjectStoreRequest:
      type: object
      properties:
        organizationId:
          type: string
          description: Organization ID we'd like to upload the file to.
        key:
          type: string
          description: Key to the Object Store file.
      description: Request to upload a file to an Object Store of a specific organization and key.
    StopLiveAlgorithmRequest:
      type: object
      properties:
        projectId:
          type: integer
          description: Project Id for the live instance we want to stop.
      description: Request to stop a live algorithm.
    Symbol:
      type: object
      properties:
        Value:
          type: string
          description: The current symbol for this ticker.
        ID:
          type: string
          description: The security identifier for this symbol.
        Permtick:
          type: string
          description: The current symbol for this ticker.
      description: Represents a unique security identifier. This is made of two components, the unique SID and the Value. The value is the current ticker symbol while the SID is constant over the life of a security.
    Trade:
      type: object
      properties:
        Symbol:
          $ref: '#/components/schemas/Symbol'
        EntryTime:
          type: string
          description: The date and time the trade was opened.
          format: date-time
        EntryPrice:
          type: number
          description: The price at which the trade was opened (or the average price if multiple entries).
          format: float
        Direction:
          $ref: '#/components/schemas/TradeDirection'
        Quantity:
          type: number
          description: The total unsigned quantity of the trade.
          format: float
        ExitTime:
          type: string
          description: The date and time the trade was closed.
          format: date-time
        ExitPrice:
          type: number
          description: The price at which the trade was closed (or the average price if multiple exits).
          format: float
        ProfitLoss:
          type: number
          description: The gross profit/loss of the trade (as account currency).
          format: float
        TotalFees:
          type: number
          description: The total fees associated with the trade (always positive value) (as account currency).
          format: float
        MAE:
          type: number
          description: The Maximum Adverse Excursion (as account currency).
          format: float
        MFE:
          type: number
          description: The Maximum Favorable Excursion (as account currency).
          format: float
        Duration:
          type: string
          description: The duration of the trade.
        EndTradeDrawdown:
          type: number
          description: The amount of profit given back before the trade was closed.
          format: float
      description: Represents a closed trade.
    TradeDirection:
      type: string
      description: Direction of a trade.
      enum:
      - Long
      - Short
    TradeStatistics:
      type: object
      properties:
        StartDateTime:
          type: string
          description: The entry date/time of the first trade
          format: date-time
        EndDateTime:
          type: string
          description: The exit date/time of the first trade.
          format: date-time
        TotalNumberOfTrades:
          type: integer
          description: The total number of trades.
        NumberOfWinningTrades:
          type: integer
          description: The total number of winning trades.
        NumberOfLosingTrades:
          type: integer
          description: The total number of losing trades.
        TotalProfitLoss:
          type: number
          description: The total profit/loss for all trades (as symbol currency).
          format: float
        TotalProfit:
          type: number
          description: The total profit for all winning trades (as symbol currency).
          format: float
        TotalLoss:
          type: number
          description: The total loss for all losing trades (as symbol currency).
          format: float
        LargestProfit:
          type: number
          description: The largest profit in a single trade (as symbol currency).
          format: float
        LargestLoss:
          type: number
          description: The largest loss in a single trade (as symbol currency).
          format: float
        AverageProfitLoss:
          type: number
          description: The average profit/loss (a.k.a. Expectancy or Average Trade) for all trades (as symbol currency).
          format: float
        AverageProfit:
          type: number
          description: The average profit for all winning trades (as symbol currency).
          format: float
        AverageLoss:
          type: number
          description: The average loss for all winning trades (as symbol currency).
          format: float
        AverageTradeDuration:
          type: string
          description: The average duration for all trades.
        AverageWinningTradeDuration:
          type: string
          description: The average duration for all winning trades.
        AverageLosingTradeDuration:
          type: string
          description: The average duration for all losing trades.
        MedianTradeDuration:
          type: string
          description: The median duration for all trades.
        MedianWinningTradeDuration:
          type: string
          description: The median duration for all winning trades.
        MedianLosingTradeDuration:
          type: string
          description: The median duration for all losing trades.
        MaxConsecutiveWinningTrades:
          type: integer
          description: The maximum number of consecutive winning trades.
        MaxConsecutiveLosingTrades:
          type: integer
          description: The maximum number of consecutive losing trades.
        ProfitLossRatio:
          type: number
          description: The ratio of the average profit per trade to the average loss per trade.
          format: float
        WinLossRatio:
          type: number
          description: The ratio of the number of winning trades to the number of losing trades.
          format: float
        WinRate:
          type: number
          description: The ratio of the number of winning trades to the total number of trades.
          format: float
        LossRate:
          type: number
          description: The ratio of the number of losing trades to the total number of trades.
          format: float
        AverageMAE:
          type: number
          description: The average Maximum Adverse Excursion for all trades.
          format: float
        AverageMFE:
          type: number
          description: The average Maximum Adverse Excursion for all trades.
          format: float
        LargestMAE:
          type: number
          description: The average Maximum Favorable Excursion for all trades.
          format: float
        LargestMFE:
          type: number
          description: The largest Maximum Adverse Excursion in a single trade (as symbol currency).
          format: float
        MaximumClosedTradeDrawdown:
          type: number
          description: The maximum closed-trade drawdown for all trades (as symbol currency).
          format: float
        MaximumIntraTradeDrawdown:
          type: number
          description: The maximum intra-trade drawdown for all trades (as symbol currency).
          format: float
        ProfitLossStandardDeviation:
          type: number
          description: The standard deviation of the profits/losses for all trades (as symbol currency).
          format: float
        ProfitLossDownsideDeviation:
          type: number
          description: The downside deviation of the profits/losses for all trades (as symbol currency).
          format: float
        ProfitFactor:
          type: number
          description: The ratio of the total profit to the total loss.
          format: float
        SharpeRatio:
          type: number
          description: The ratio of the average profit/loss to the standard deviation.
          format: float
        SortinoRatio:
          type: number
          description: The ratio of the average profit/loss to the downside deviation.
          format: float
        ProfitToMaxDrawdownRatio:
          type: number
          description: The ratio of the total profit/loss to the maximum closed trade drawdown.
          format: float
        MaximumEndTradeDrawdown:
          type: number
          description: The maximum amount of profit given back by a single trade before exit (as symbol currency).
          format: float
        AverageEndTradeDrawdown:
          type: number
          description: The average amount of profit given back by all trades before exit (as symbol currency).
          format: float
        MaximumDrawdownDuration:
          type: string
          description: The maximum amount of time to recover from a drawdown (longest time between new equity highs or peaks).
        TotalFees:
          type: number
          description: The sum of fees for all trades.
          format: float
      description: A set of statistics calculated from a list of closed trades.
    UpdateBacktestRequest:
      required:
      - backtestId
      - projectId
      type: object
      properties:
        projectId:
          type: integer
          description: Project Id for the backtest we want to update.
        backtestId:
          type: string
          description: Backtest Id we want to update.
        name:
          type: string
          description: Name we'd like to assign to the backtest.
        note:
          type: string
          description: Note attached to the backtest.
      description: Request to update a backtest's name.
    UpdateFileNameRequest:
      type: object
      properties:
        projectId:
          type: integer
          description: Project Id to which the file belongs.
        oldFileName:
          type: string
          description: The current name of the new file.
        newFileName:
          type: string
          description: The new name for the file.
      description: Request to update the name of a file.
    UpdateFileContentsRequest:
      type: object
      properties:
        projectId:
          type: integer
          description: Project Id to which the file belongs.
        fileName:
          type: string
          description: The name of the file that should be updated.
        newFileContents:
          type: string
          description: The new contents of the file.
      description: Request to update the contents of a file.
    UpdateOptimizationRequest:
      type: object
      properties:
        optimizationId:
          type: string
          description: Optimization ID we want to update.
        name:
          type: string
          description: Name we'd like to assign to the optimization.
      description: Updates the name of an optimization.
    UpdateProjectRequest:
      type: object
      properties:
        projectId:
          type: integer
          description: Project Id to which the file belongs.
        name:
          type: string
          description: The new name for the project.
        description:
          description: The new description for the project.
      description: Update a project name, description or parameters.
    UpdateProjectNodesRequest:
      type: object
      properties:
        projectId:
          type: integer
          description: Project Id to which the nodes refer.
        nodes:
          type: array
          description: List of node Id to update.
          items:
            type: string
      description: Request to update the nodes of a project.
    Version:
      type: object
      properties:
        sdescription:
          type: string
          description:
        bpublic:
          type: integer
          description:
        itimestamp:
          type: string
          description:
          format: date-time
        benchmark_basic:
          type: number
          description:
          format: float
        benchmark_equity_400_minute:
          type: number
          description:
          format: float
        benchmark_equity_1_second:
          type: number
          description:
          format: float
        benchmark_cs_indicator:
          type: number
          description:
          format: float
        benchmark_cs_history:
          type: number
          description:
          format: float
        benchmark_cs_schedule_events:
          type: number
          description:
          format: float
        benchmark_py_basic:
          type: number
          description:
          format: float
        benchmark_py_equity_400_minute:
          type: number
          description:
          format: float
        benchmark_py_equity_1_second:
          type: number
          description:
          format: float
        benchmark_py_indicator:
          type: number
          description:
          format: float
        benchmark_py_history:
          type: number
          description:
          format: float
        benchmark_py_schedule_events:
          type: number
          description:
          format: float
        benchmark_py_universe_coarsefine:
          type: number
          description:
          format: float
        benchmark_cs_universe_coarsefine:
          type: number
          description:
          format: float
        benchmark_py_universe_stateful:
          type: number
          description:
          format: float
        benchmark_cs_universe_stateful:
          type: number
          description:
          format: float
        benchmark_py_universe_stateless:
          type: number
          description:
          format: float
        benchmark_cs_universe_stateless:
          type: number
          description:
          format: float
      additionalProperties:
        $ref: '#/components/schemas/Version'
    files_update_body:
      oneOf:
      - $ref: '#/components/schemas/UpdateFileNameRequest'
      - $ref: '#/components/schemas/UpdateFileContentsRequest'
    inline_response_200:
      oneOf:
      - $ref: '#/components/responses/BacktestResponse'
      - $ref: '#/components/responses/BacktestList'
    inline_response_200_1:
      oneOf:
      - $ref: '#/components/responses/BacktestReport'
      - $ref: '#/components/responses/RequestFailedError'
    live_read_body:
      oneOf:
      - $ref: '#/components/schemas/ReadLiveAlgorithmRequest'
      - $ref: '#/components/schemas/ListLiveAlgorithmsRequest'
    inline_response_200_2:
      oneOf:
      - $ref: '#/components/responses/LiveAlgorithmResults'
      - $ref: '#/components/responses/LiveList'
  responses:
    BacktestResponse:
      description: Backtest read response packet.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BacktestResponse'
    BacktestList:
      description: Collection container for a list of backtests for a project.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BacktestList'
    BacktestReport:
      description: Backtest Report Response wrapper.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BacktestReport'
    CompileResponse:
      description: Response from the compiler on a build event.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CompileResponse'
    LiveAlgorithm:
      description: Live algorithm instance result.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LiveAlgorithm'
    LiveAlgorithmLog:
      description: Logs from a live algorithm.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LiveAlgorithmLogs'
    LiveAlgorithmList:
      description: List of the live algorithms running which match the requested status.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LiveAlgorithmList'
    LiveAlgorithmResults:
      description: Details a live algorithm from the live/read API endpoint.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LiveAlgorithmResults'
    LiveList:
      description: List of the live algorithms running which match the requested status.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LiveList'
    ProjectListResponse:
      description: Project list response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectListResponse'
    ProjectFilesResponse:
      description: Response received when reading all files of a project.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectFilesResponse'
    ReadDataLinkResponse:
      description: Response from reading purchased data.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadDataLinkResponse'
    ReadLiveLogsResponse:
      description: Logs from a live algorithm.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReadLiveLogsResponse'
    RequestFailedError:
      description: Request Failed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RequestFailedError'
    RestResponse:
      description: Base API response class.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RestResponse'
    UnauthorizedError:
      description: Unauthorized response from the API. Key is missing, invalid, or timestamp is too old for hash.
      headers:
        www_authenticate:
          style: simple
          explode: false
          schema:
            type: string
  securitySchemes:
    nonceTokenAuth:
      type: http
      description: The standard QuantConnect API authentication scheme is used. This requires the current unixtime and your api key to be hashed together with SHA256 and sent as the B64 password in a basic authentication. The username for the basic authentication is the UID on your QuantConnect account.
      scheme: basic
